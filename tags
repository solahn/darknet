!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATION	include/darknet.h	/^}ACTIVATION;$/;"	t	typeref:enum:__anon44
ACTIVATIONS_H	src/activations.h	2;"	d
ACTIVATION_LAYER_H	src/activation_layer.h	2;"	d
ACTIVE	include/darknet.h	/^    ACTIVE,$/;"	e	enum:__anon52
ADD	include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon51
ADDRPOINTER	src/http_stream.cpp	36;"	d	file:
AI2	src/convolutional_layer.c	23;"	d	file:
APPNAMESO	Makefile	/^APPNAMESO=uselib$/;"	m
ARCH	Makefile	/^ARCH= -gencode arch=compute_35,code=sm_35 \\$/;"	m
ARCH	Makefile	/^ARCH= -gencode arch=compute_72,code=[sm_72,compute_72]$/;"	m
ASN1_STRING_get0_data	src/httplib.h	/^inline const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *asn1) {$/;"	f
AVGPOOL	include/darknet.h	/^    AVGPOOL,$/;"	e	enum:__anon52
AVGPOOL_LAYER_H	src/avgpool_layer.h	2;"	d
AVX	Makefile	/^AVX=0$/;"	m
B1	include/darknet.h	/^    float B1;$/;"	m	struct:layer
B1	include/darknet.h	/^    float B1;$/;"	m	struct:network
B1	include/darknet.h	/^    float B1;$/;"	m	struct:update_args
B2	include/darknet.h	/^    float B2;$/;"	m	struct:layer
B2	include/darknet.h	/^    float B2;$/;"	m	struct:network
B2	include/darknet.h	/^    float B2;$/;"	m	struct:update_args
BADARG	src/getopt.h	93;"	d
BADCH	src/getopt.h	92;"	d
BASE_LAYER_H	src/layer.h	2;"	d
BATCHNORM	include/darknet.h	/^    BATCHNORM,$/;"	e	enum:__anon52
BATCHNORM_LAYER_H	src/batchnorm_layer.h	2;"	d
BILLION	src/gettimeofday.h	10;"	d
BINARY_ACTIVATION	include/darknet.h	/^} BINARY_ACTIVATION;$/;"	t	typeref:enum:__anon51
BLANK	include/darknet.h	/^    BLANK,$/;"	e	enum:__anon52
BLAS_H	src/blas.h	2;"	d
BLOCK	src/dark_cuda.h	18;"	d
BLOCK_TRANSPOSE32	src/dark_cuda.h	21;"	d
BMP	include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon50
BOX	build/darknet/x64/darknet.py	/^class BOX(Structure):$/;"	c
BOX	darknet.py	/^class BOX(Structure):$/;"	c
BOX_H	src/box.h	2;"	d
BattleRoyaleWithCheese	src/compare.c	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f
BboxContainer	build/darknet/YoloWrapper.cs	/^        public struct BboxContainer$/;"	s	class:Darknet.YoloWrapper
BboxContainer	src/csharp/YoloCSharpWrapper.cs	/^        public struct BboxContainer$/;"	s	class:Darknet.YoloWrapper
BufferStream	src/httplib.h	/^class BufferStream : public Stream {$/;"	c	namespace:httplib
CAFFE_CUDA_NUM_THREADS	src/col2im_kernels.cu	/^const int CAFFE_CUDA_NUM_THREADS = 512;$/;"	v
CAFFE_CUDA_NUM_THREADS	src/im2col_kernels.cu	/^const int CAFFE_CUDA_NUM_THREADS = 512;$/;"	v
CAFFE_GET_BLOCKS	src/col2im_kernels.cu	/^inline int CAFFE_GET_BLOCKS(const int N) {$/;"	f
CAFFE_GET_BLOCKS	src/im2col_kernels.cu	/^inline int CAFFE_GET_BLOCKS(const int N) {$/;"	f
CAPTCHA_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
CC	Makefile	/^CC=g++$/;"	m
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC$/;"	m
CHECK_CUBLAS	src/dark_cuda.h	61;"	d
CHECK_CUDA	src/dark_cuda.h	60;"	d
CHECK_CUDNN	src/dark_cuda.h	96;"	d
CIOU	include/darknet.h	/^    IOU, GIOU, MSE, DIOU, CIOU$/;"	e	enum:__anon45
CLASSIFICATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
CLASSIFIER_H	src/classifier.h	2;"	d
CLASS_LIST	scripts/get_openimages_dataset.py	/^CLASS_LIST = ('\/m\/01g317','\/m\/04yx4')$/;"	v
CLOCK_REALTIME	src/gettimeofday.h	9;"	d
COL2IM_H	src/col2im.h	2;"	d
COMMON	Makefile	/^COMMON= -Iinclude\/ -I3rdparty\/stb\/include$/;"	m
COMPARE_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
CONNECTED	include/darknet.h	/^    CONNECTED,$/;"	e	enum:__anon52
CONNECTED_LAYER_H	src/connected_layer.h	2;"	d
CONSTANT	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM, SGDR$/;"	e	enum:__anon54
CONTRASTIVE	include/darknet.h	/^    CONTRASTIVE,$/;"	e	enum:__anon52
CONVOLUTIONAL	include/darknet.h	/^    CONVOLUTIONAL,$/;"	e	enum:__anon52
CONVOLUTIONAL_LAYER_H	src/convolutional_layer.h	2;"	d
CONV_LSTM	include/darknet.h	/^    CONV_LSTM,$/;"	e	enum:__anon52
CONV_LSTM_LAYER_H	src/conv_lstm_layer.h	2;"	d
CORNERS_NMS	include/darknet.h	/^    DEFAULT_NMS, GREEDY_NMS, DIOU_NMS, CORNERS_NMS$/;"	e	enum:__anon46
COST	include/darknet.h	/^    COST,$/;"	e	enum:__anon52
COST_LAYER_H	src/cost_layer.h	2;"	d
COST_TYPE	include/darknet.h	/^} COST_TYPE;$/;"	t	typeref:enum:__anon53
CPP	Makefile	/^CPP=g++ -std=c++11$/;"	m
CPPHTTPLIB_HTTPLIB_H	src/httplib.h	9;"	d
CPPHTTPLIB_KEEPALIVE_MAX_COUNT	src/httplib.h	24;"	d
CPPHTTPLIB_KEEPALIVE_TIMEOUT_SECOND	src/httplib.h	16;"	d
CPPHTTPLIB_KEEPALIVE_TIMEOUT_USECOND	src/httplib.h	20;"	d
CPPHTTPLIB_PAYLOAD_MAX_LENGTH	src/httplib.h	44;"	d
CPPHTTPLIB_READ_TIMEOUT_SECOND	src/httplib.h	28;"	d
CPPHTTPLIB_READ_TIMEOUT_USECOND	src/httplib.h	32;"	d
CPPHTTPLIB_RECV_BUFSIZ	src/httplib.h	48;"	d
CPPHTTPLIB_REDIRECT_MAX_COUNT	src/httplib.h	40;"	d
CPPHTTPLIB_REQUEST_URI_MAX_LENGTH	src/httplib.h	36;"	d
CPPHTTPLIB_THREAD_POOL_COUNT	src/httplib.h	52;"	d
CRNN	include/darknet.h	/^    CRNN,$/;"	e	enum:__anon52
CRNN_LAYER_H	src/crnn_layer.h	3;"	d
CROP	include/darknet.h	/^    CROP,$/;"	e	enum:__anon52
CROP_LAYER_H	src/crop_layer.h	2;"	d
CUDA_KERNEL_LOOP	src/col2im_kernels.cu	69;"	d	file:
CUDA_KERNEL_LOOP	src/im2col_kernels.cu	2227;"	d	file:
CUDNN	Makefile	/^CUDNN=0$/;"	m
CUDNN_HALF	Makefile	/^CUDNN_HALF=0$/;"	m
CV_AA	src/image_opencv.cpp	77;"	d	file:
CV_FILLED	src/image_opencv.cpp	73;"	d	file:
CV_RGB	src/image_opencv.cpp	69;"	d	file:
C_SHARP_MAX_OBJECTS	include/yolo_v2_class.hpp	20;"	d
Client	src/httplib.h	/^class Client {$/;"	c	namespace:httplib
Client	src/httplib.h	/^inline Client::Client(const char *host, int port, time_t timeout_sec)$/;"	f	class:httplib::Client
DARKCUDA_H	src/dark_cuda.h	2;"	d
DARKNET_API	include/darknet.h	2;"	d
DARKNET_LOC	src/utils.h	18;"	d
DATA_H	src/data.h	2;"	d
DEBUG	Makefile	/^DEBUG=0$/;"	m
DECONVOLUTIONAL	include/darknet.h	/^    DECONVOLUTIONAL,$/;"	e	enum:__anon52
DECONVOLUTIONAL_LAYER_H	src/deconvolutional_layer.h	2;"	d
DEFAULT_NMS	include/darknet.h	/^    DEFAULT_NMS, GREEDY_NMS, DIOU_NMS, CORNERS_NMS$/;"	e	enum:__anon46
DEMO_H	src/demo.h	2;"	d
DEPS	Makefile	/^DEPS = $(wildcard src\/*.h) Makefile include\/darknet.h$/;"	m
DETECTION	build/darknet/x64/darknet.py	/^class DETECTION(Structure):$/;"	c
DETECTION	darknet.py	/^class DETECTION(Structure):$/;"	c
DETECTION	include/darknet.h	/^    DETECTION,$/;"	e	enum:__anon52
DETECTION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
DETECTION_LAYER_H	src/detection_layer.h	2;"	d
DETNUMPAIR	build/darknet/x64/darknet.py	/^class DETNUMPAIR(Structure):$/;"	c
DETNUMPAIR	darknet.py	/^class DETNUMPAIR(Structure):$/;"	c
DET_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
DIOU	include/darknet.h	/^    IOU, GIOU, MSE, DIOU, CIOU$/;"	e	enum:__anon45
DIOU_NMS	include/darknet.h	/^    DEFAULT_NMS, GREEDY_NMS, DIOU_NMS, CORNERS_NMS$/;"	e	enum:__anon46
DIV	include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon51
DOABS	src/region_layer.c	12;"	d	file:
DROPOUT	include/darknet.h	/^    DROPOUT,$/;"	e	enum:__anon52
DROPOUT_LAYER_H	src/dropout_layer.h	2;"	d
DWORD	3rdparty/pthreads/include/pthread.h	1360;"	d
DWORD	3rdparty/pthreads/include/pthread.h	312;"	d
DWORD_PTR	3rdparty/pthreads/include/pthread.h	/^typedef unsigned long DWORD_PTR;$/;"	t
Darknet	build/darknet/YoloWrapper.cs	/^namespace Darknet$/;"	n
Darknet	src/csharp/YoloCSharpWrapper.cs	/^namespace Darknet$/;"	n
Darknet.YoloWrapper	build/darknet/YoloWrapper.cs	/^    public class YoloWrapper : IDisposable$/;"	c	namespace:Darknet
Darknet.YoloWrapper	src/csharp/YoloCSharpWrapper.cs	/^    public class YoloWrapper : IDisposable$/;"	c	namespace:Darknet
Darknet.YoloWrapper.BboxContainer	build/darknet/YoloWrapper.cs	/^        public struct BboxContainer$/;"	s	class:Darknet.YoloWrapper
Darknet.YoloWrapper.BboxContainer	src/csharp/YoloCSharpWrapper.cs	/^        public struct BboxContainer$/;"	s	class:Darknet.YoloWrapper
Darknet.YoloWrapper.BboxContainer.candidates	build/darknet/YoloWrapper.cs	/^            public bbox_t[] candidates;$/;"	f	struct:Darknet.YoloWrapper.BboxContainer
Darknet.YoloWrapper.BboxContainer.candidates	src/csharp/YoloCSharpWrapper.cs	/^            public bbox_t[] candidates;$/;"	f	struct:Darknet.YoloWrapper.BboxContainer
Darknet.YoloWrapper.Detect	build/darknet/YoloWrapper.cs	/^        public bbox_t[] Detect(byte[] imageData)$/;"	m	class:Darknet.YoloWrapper
Darknet.YoloWrapper.Detect	build/darknet/YoloWrapper.cs	/^        public bbox_t[] Detect(string filename)$/;"	m	class:Darknet.YoloWrapper
Darknet.YoloWrapper.Detect	src/csharp/YoloCSharpWrapper.cs	/^        public bbox_t[] Detect(byte[] imageData)$/;"	m	class:Darknet.YoloWrapper
Darknet.YoloWrapper.Detect	src/csharp/YoloCSharpWrapper.cs	/^        public bbox_t[] Detect(string filename)$/;"	m	class:Darknet.YoloWrapper
Darknet.YoloWrapper.DetectImage	build/darknet/YoloWrapper.cs	/^        private static extern int DetectImage(IntPtr pArray, int nSize, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.DetectImage	build/darknet/YoloWrapper.cs	/^        private static extern int DetectImage(string filename, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.DetectImage	src/csharp/YoloCSharpWrapper.cs	/^        private static extern int DetectImage(IntPtr pArray, int nSize, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.DetectImage	src/csharp/YoloCSharpWrapper.cs	/^        private static extern int DetectImage(string filename, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.Dispose	build/darknet/YoloWrapper.cs	/^        public void Dispose()$/;"	m	class:Darknet.YoloWrapper
Darknet.YoloWrapper.Dispose	src/csharp/YoloCSharpWrapper.cs	/^        public void Dispose()$/;"	m	class:Darknet.YoloWrapper
Darknet.YoloWrapper.DisposeYolo	build/darknet/YoloWrapper.cs	/^        private static extern int DisposeYolo();$/;"	m	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.DisposeYolo	src/csharp/YoloCSharpWrapper.cs	/^        private static extern int DisposeYolo();$/;"	m	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.InitializeYolo	build/darknet/YoloWrapper.cs	/^        private static extern int InitializeYolo(string configurationFilename, string weightsFilename, int gpu);$/;"	m	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.InitializeYolo	src/csharp/YoloCSharpWrapper.cs	/^        private static extern int InitializeYolo(string configurationFilename, string weightsFilename, int gpu, int batch_size);$/;"	m	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.MaxObjects	build/darknet/YoloWrapper.cs	/^        private const int MaxObjects = 1000;$/;"	f	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.MaxObjects	src/csharp/YoloCSharpWrapper.cs	/^        private const int MaxObjects = 1000;$/;"	f	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.YoloLibraryName	build/darknet/YoloWrapper.cs	/^        private const string YoloLibraryName = "yolo_cpp_dll.dll";$/;"	f	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.YoloLibraryName	src/csharp/YoloCSharpWrapper.cs	/^        private const string YoloLibraryName = "darknet.dll";$/;"	f	class:Darknet.YoloWrapper	file:
Darknet.YoloWrapper.YoloWrapper	build/darknet/YoloWrapper.cs	/^        public YoloWrapper(string configurationFilename, string weightsFilename, int gpu)$/;"	m	class:Darknet.YoloWrapper
Darknet.YoloWrapper.YoloWrapper	src/csharp/YoloCSharpWrapper.cs	/^        public YoloWrapper(string configurationFilename, string weightsFilename, int gpu, int batch_size = 1)$/;"	m	class:Darknet.YoloWrapper
Darknet.YoloWrapper.bbox_t	build/darknet/YoloWrapper.cs	/^        public struct bbox_t$/;"	s	class:Darknet.YoloWrapper
Darknet.YoloWrapper.bbox_t	src/csharp/YoloCSharpWrapper.cs	/^        public struct bbox_t$/;"	s	class:Darknet.YoloWrapper
Darknet.YoloWrapper.bbox_t.frames_counter	build/darknet/YoloWrapper.cs	/^            public UInt32 frames_counter;$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.frames_counter	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 frames_counter;$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.h	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.h	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.obj_id	build/darknet/YoloWrapper.cs	/^            public UInt32 obj_id;        \/\/ class of object - from range [0, classes-1]$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.obj_id	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 obj_id;        \/\/ class of object - from range [0, classes-1]$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.prob	build/darknet/YoloWrapper.cs	/^            public float prob;           \/\/ confidence - probability that the object was found correctly$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.prob	src/csharp/YoloCSharpWrapper.cs	/^            public float prob;           \/\/ confidence - probability that the object was found correctly$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.track_id	build/darknet/YoloWrapper.cs	/^            public UInt32 track_id;      \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.track_id	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 track_id;      \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.w	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.w	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.x	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.x	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.x_3d	build/darknet/YoloWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.x_3d	src/csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.y	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.y	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.y_3d	build/darknet/YoloWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.y_3d	src/csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.z_3d	build/darknet/YoloWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Darknet.YoloWrapper.bbox_t.z_3d	src/csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
Delete	src/httplib.h	/^inline Server &Server::Delete(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Delete	src/httplib.h	/^inline std::shared_ptr<Response> Client::Delete(const char *path) {$/;"	f	class:httplib::Client
Delete	src/httplib.h	/^inline std::shared_ptr<Response> Client::Delete(const char *path,$/;"	f	class:httplib::Client
Detect	build/darknet/YoloWrapper.cs	/^        public bbox_t[] Detect(byte[] imageData)$/;"	m	class:Darknet.YoloWrapper
Detect	build/darknet/YoloWrapper.cs	/^        public bbox_t[] Detect(string filename)$/;"	m	class:Darknet.YoloWrapper
Detect	src/csharp/YoloCSharpWrapper.cs	/^        public bbox_t[] Detect(byte[] imageData)$/;"	m	class:Darknet.YoloWrapper
Detect	src/csharp/YoloCSharpWrapper.cs	/^        public bbox_t[] Detect(string filename)$/;"	m	class:Darknet.YoloWrapper
DetectImage	build/darknet/YoloWrapper.cs	/^        private static extern int DetectImage(IntPtr pArray, int nSize, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
DetectImage	build/darknet/YoloWrapper.cs	/^        private static extern int DetectImage(string filename, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
DetectImage	src/csharp/YoloCSharpWrapper.cs	/^        private static extern int DetectImage(IntPtr pArray, int nSize, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
DetectImage	src/csharp/YoloCSharpWrapper.cs	/^        private static extern int DetectImage(string filename, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
Detector	include/yolo_v2_class.hpp	/^class Detector {$/;"	c
Detector	src/yolo_v2_class.cpp	/^LIB_API Detector::Detector(std::string cfg_filename, std::string weight_filename, int gpu_id, int batch_size)$/;"	f	class:Detector
Detector::Detector	src/yolo_v2_class.cpp	/^LIB_API Detector::Detector(std::string cfg_filename, std::string weight_filename, int gpu_id, int batch_size)$/;"	f	class:Detector
Detector::_cfg_filename	include/yolo_v2_class.hpp	/^    std::string _cfg_filename, _weight_filename;$/;"	m	class:Detector
Detector::_weight_filename	include/yolo_v2_class.hpp	/^    std::string _cfg_filename, _weight_filename;$/;"	m	class:Detector
Detector::cur_gpu_id	include/yolo_v2_class.hpp	/^    const int cur_gpu_id;$/;"	m	class:Detector
Detector::detect	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> detect(cv::Mat mat, float thresh = 0.2, bool use_mean = false)$/;"	f	class:Detector
Detector::detect	src/yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::detect(image_t img, float thresh, bool use_mean)$/;"	f	class:Detector
Detector::detect	src/yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::detect(std::string image_filename, float thresh, bool use_mean)$/;"	f	class:Detector
Detector::detectBatch	src/yolo_v2_class.cpp	/^LIB_API std::vector<std::vector<bbox_t>> Detector::detectBatch(image_t img, int batch_size, int width, int height, float thresh, bool make_nms)$/;"	f	class:Detector
Detector::detect_resized	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> detect_resized(image_t img, int init_w, int init_h, float thresh = 0.2, bool use_mean = false)$/;"	f	class:Detector
Detector::detector_gpu_ptr	include/yolo_v2_class.hpp	/^    std::shared_ptr<void> detector_gpu_ptr;$/;"	m	class:Detector
Detector::free_image	src/yolo_v2_class.cpp	/^LIB_API void Detector::free_image(image_t m)$/;"	f	class:Detector
Detector::get_cuda_context	src/yolo_v2_class.cpp	/^void *Detector::get_cuda_context()$/;"	f	class:Detector
Detector::get_net_color_depth	src/yolo_v2_class.cpp	/^LIB_API int Detector::get_net_color_depth() const {$/;"	f	class:Detector
Detector::get_net_height	src/yolo_v2_class.cpp	/^LIB_API int Detector::get_net_height() const {$/;"	f	class:Detector
Detector::get_net_width	src/yolo_v2_class.cpp	/^LIB_API int Detector::get_net_width() const {$/;"	f	class:Detector
Detector::load_image	src/yolo_v2_class.cpp	/^LIB_API image_t Detector::load_image(std::string image_filename)$/;"	f	class:Detector
Detector::make_empty_image	include/yolo_v2_class.hpp	/^    static image_t make_empty_image(int w, int h, int c)$/;"	f	class:Detector
Detector::make_image_custom	include/yolo_v2_class.hpp	/^    static image_t make_image_custom(int w, int h, int c)$/;"	f	class:Detector
Detector::mat_to_image	include/yolo_v2_class.hpp	/^    static std::shared_ptr<image_t> mat_to_image(cv::Mat img_src)$/;"	f	class:Detector
Detector::mat_to_image_custom	include/yolo_v2_class.hpp	/^    static image_t mat_to_image_custom(cv::Mat mat)$/;"	f	class:Detector
Detector::mat_to_image_resize	include/yolo_v2_class.hpp	/^    std::shared_ptr<image_t> mat_to_image_resize(cv::Mat mat) const$/;"	f	class:Detector
Detector::nms	include/yolo_v2_class.hpp	/^    float nms = .4;$/;"	m	class:Detector
Detector::prev_bbox_vec_deque	include/yolo_v2_class.hpp	/^    std::deque<std::vector<bbox_t>> prev_bbox_vec_deque;$/;"	m	class:Detector
Detector::send_json_http	include/yolo_v2_class.hpp	/^    bool send_json_http(std::vector<bbox_t> cur_bbox_vec, std::vector<std::string> obj_names, int frame_id,$/;"	f	class:Detector
Detector::tracking_id	src/yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::tracking_id(std::vector<bbox_t> cur_bbox_vec, bool const change_history,$/;"	f	class:Detector
Detector::wait_stream	include/yolo_v2_class.hpp	/^    bool wait_stream;$/;"	m	class:Detector
Detector::~Detector	src/yolo_v2_class.cpp	/^LIB_API Detector::~Detector()$/;"	f	class:Detector
Dispose	build/darknet/YoloWrapper.cs	/^        public void Dispose()$/;"	m	class:Darknet.YoloWrapper
Dispose	src/csharp/YoloCSharpWrapper.cs	/^        public void Dispose()$/;"	m	class:Darknet.YoloWrapper
DisposeYolo	build/darknet/YoloWrapper.cs	/^        private static extern int DisposeYolo();$/;"	m	class:Darknet.YoloWrapper	file:
DisposeYolo	src/csharp/YoloCSharpWrapper.cs	/^        private static extern int DisposeYolo();$/;"	m	class:Darknet.YoloWrapper	file:
EDEADLK	3rdparty/pthreads/include/pthread.h	285;"	d
EDEADLK	3rdparty/pthreads/include/pthread.h	287;"	d
ELU	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
EMPTY	include/darknet.h	/^    EMPTY,$/;"	e	enum:__anon52
EMSG	src/getopt.h	/^static char EMSG[] = "";$/;"	v
EMSG	src/getopt.h	105;"	d
ENOSYS	3rdparty/pthreads/include/pthread.h	280;"	d
ENOTRECOVERABLE	3rdparty/pthreads/include/pthread.h	296;"	d
ENOTSUP	3rdparty/pthreads/include/pthread.h	272;"	d
EOWNERDEAD	3rdparty/pthreads/include/pthread.h	293;"	d
ETIMEDOUT	3rdparty/pthreads/include/pthread.h	276;"	d
EXEC	Makefile	/^EXEC=darknet$/;"	m
EXP	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM, SGDR$/;"	e	enum:__anon54
FAST_BITS	3rdparty/stb/include/stb_image.h	1639;"	d
FLAG_ALLARGS	src/getopt.h	88;"	d
FLAG_LONGONLY	src/getopt.h	89;"	d
FLAG_PERMUTE	src/getopt.h	87;"	d
FULL_MASK	src/dark_cuda.h	19;"	d
F_OK	src/darkunistd.h	25;"	d
GAUSSIAN_YOLO	include/darknet.h	/^    GAUSSIAN_YOLO,$/;"	e	enum:__anon52
GAUSSIAN_YOLO_LAYER_H	src/gaussian_yolo_layer.h	3;"	d
GELU	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
GEMM_H	src/gemm.h	2;"	d
GIOU	include/darknet.h	/^    IOU, GIOU, MSE, DIOU, CIOU$/;"	e	enum:__anon45
GPU	Makefile	/^GPU=1$/;"	m
GPU	src/yolo_console_dll.cpp	32;"	d	file:
GREEDY_NMS	include/darknet.h	/^    DEFAULT_NMS, GREEDY_NMS, DIOU_NMS, CORNERS_NMS$/;"	e	enum:__anon46
GRU	include/darknet.h	/^    GRU,$/;"	e	enum:__anon52
GRU_LAYER_H	src/gru_layer.h	3;"	d
Get	src/httplib.h	/^Client::Get(const char *path, const Headers &headers, Progress progress) {$/;"	f	class:httplib::Client
Get	src/httplib.h	/^inline Server &Server::Get(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Get	src/httplib.h	/^inline std::shared_ptr<Response> Client::Get(const char *path) {$/;"	f	class:httplib::Client
Get	src/httplib.h	/^inline std::shared_ptr<Response> Client::Get(const char *path,$/;"	f	class:httplib::Client
Get	src/httplib.h	/^inline void Get(std::vector<Request> &requests, const char *path) {$/;"	f	namespace:httplib
Get	src/httplib.h	/^inline void Get(std::vector<Request> &requests, const char *path,$/;"	f	namespace:httplib
HANDLE	3rdparty/pthreads/include/pthread.h	1357;"	d
HANDLE	3rdparty/pthreads/include/pthread.h	308;"	d
HARDTAN	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
HARD_MISH	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
HAVE_DECL_GETOPT	src/getopt.h	220;"	d
HAVE_MODE_T	3rdparty/pthreads/include/pthread.h	250;"	d
HAVE_MODE_T	3rdparty/pthreads/include/pthread.h	252;"	d
HAVE_MODE_T	3rdparty/pthreads/include/sched.h	101;"	d
HAVE_MODE_T	3rdparty/pthreads/include/sched.h	103;"	d
HAVE_MODE_T	3rdparty/pthreads/include/semaphore.h	100;"	d
HAVE_MODE_T	3rdparty/pthreads/include/semaphore.h	102;"	d
HAVE_PTW32_CONFIG_H	3rdparty/pthreads/include/pthread.h	115;"	d
HAVE_SIGNAL_H	3rdparty/pthreads/include/pthread.h	114;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/pthreads/include/pthread.h	113;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/pthreads/include/pthread.h	249;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/pthreads/include/pthread.h	317;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/pthreads/include/sched.h	100;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/pthreads/include/semaphore.h	99;"	d
HISTORY	include/darknet.h	/^    HISTORY,$/;"	e	enum:__anon52
HTTP_STREAM_H	src/http_stream.h	2;"	d
HW_ABM	src/gemm.c	/^static int HW_ABM;      \/\/ Advanced Bit Manipulation$/;"	v	file:
HW_ADX	src/gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_AES	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_AVX	src/gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_AVX2	src/gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_AVX512BW	src/gemm.c	/^static int HW_AVX512BW;   \/\/  AVX512 Byte + Word$/;"	v	file:
HW_AVX512CD	src/gemm.c	/^static int HW_AVX512CD;   \/\/  AVX512 Conflict Detection$/;"	v	file:
HW_AVX512DQ	src/gemm.c	/^static int HW_AVX512DQ;   \/\/  AVX512 Doubleword + Quadword$/;"	v	file:
HW_AVX512ER	src/gemm.c	/^static int HW_AVX512ER;   \/\/  AVX512 Exponential + Reciprocal$/;"	v	file:
HW_AVX512F	src/gemm.c	/^static int HW_AVX512F;    \/\/  AVX512 Foundation$/;"	v	file:
HW_AVX512IFMA	src/gemm.c	/^static int HW_AVX512IFMA; \/\/  AVX512 Integer 52-bit Fused Multiply-Add$/;"	v	file:
HW_AVX512PF	src/gemm.c	/^static int HW_AVX512PF;   \/\/  AVX512 Prefetch$/;"	v	file:
HW_AVX512VBMI	src/gemm.c	/^static int HW_AVX512VBMI; \/\/  AVX512 Vector Byte Manipulation Instructions$/;"	v	file:
HW_AVX512VL	src/gemm.c	/^static int HW_AVX512VL;   \/\/  AVX512 Vector Length Extensions$/;"	v	file:
HW_BMI1	src/gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_BMI2	src/gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_FMA3	src/gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_FMA4	src/gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_MMX	src/gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_PREFETCHWT1	src/gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_RDRAND	src/gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_SHA	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE2	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE3	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE41	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE42	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE4a	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSSE3	src/gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_XOP	src/gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_x64	src/gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
Head	src/httplib.h	/^inline std::shared_ptr<Response> Client::Head(const char *path) {$/;"	f	class:httplib::Client
Head	src/httplib.h	/^inline std::shared_ptr<Response> Client::Head(const char *path,$/;"	f	class:httplib::Client
HttpVersion	src/httplib.h	/^enum class HttpVersion { v1_0 = 0, v1_1 };$/;"	c	namespace:httplib
IDENTICAL_INTERPRETATION	src/getopt.c	160;"	d	file:
IDENTICAL_INTERPRETATION	src/getopt.c	269;"	d	file:
IM2COL_H	src/im2col.h	2;"	d
IMAGE	build/darknet/x64/darknet.py	/^class IMAGE(Structure):$/;"	c
IMAGE	darknet.py	/^class IMAGE(Structure):$/;"	c
IMAGE_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
IMAGE_H	src/image.h	2;"	d
IMAGE_OPENCV_H	src/image_opencv.h	2;"	d
IMPLICIT	include/darknet.h	/^    IMPLICIT$/;"	e	enum:__anon52
IMTYPE	include/darknet.h	/^} IMTYPE;$/;"	t	typeref:enum:__anon50
INCLUDE_STB_IMAGE_WRITE_H	3rdparty/stb/include/stb_image_write.h	125;"	d
INORDER	src/getopt.h	94;"	d
INSTANCE_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
IOU	build/darknet/x64/gen_anchors.py	/^def IOU(x,centroids):$/;"	f
IOU	include/darknet.h	/^    IOU, GIOU, MSE, DIOU, CIOU$/;"	e	enum:__anon45
IOU	scripts/gen_anchors.py	/^def IOU(x,centroids):$/;"	f
IOU_LOSS	include/darknet.h	/^} IOU_LOSS;$/;"	t	typeref:enum:__anon45
ISEG	include/darknet.h	/^    ISEG,$/;"	e	enum:__anon52
ISEG_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
InitializeYolo	build/darknet/YoloWrapper.cs	/^        private static extern int InitializeYolo(string configurationFilename, string weightsFilename, int gpu);$/;"	m	class:Darknet.YoloWrapper	file:
InitializeYolo	src/csharp/YoloCSharpWrapper.cs	/^        private static extern int InitializeYolo(string configurationFilename, string weightsFilename, int gpu, int batch_size);$/;"	m	class:Darknet.YoloWrapper	file:
JPG	include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon50
JSON_sender	src/http_stream.cpp	/^    JSON_sender(int port = 0, int _timeout = 400000)$/;"	f	class:JSON_sender
JSON_sender	src/http_stream.cpp	/^class JSON_sender$/;"	c	file:
JSON_sender::JSON_sender	src/http_stream.cpp	/^    JSON_sender(int port = 0, int _timeout = 400000)$/;"	f	class:JSON_sender
JSON_sender::_write	src/http_stream.cpp	/^    int _write(int sock, char const*const s, int len)$/;"	f	class:JSON_sender	file:
JSON_sender::close_all	src/http_stream.cpp	/^    void close_all()$/;"	f	class:JSON_sender
JSON_sender::close_all_sockets	src/http_stream.cpp	/^    int close_all_sockets;$/;"	m	class:JSON_sender	file:
JSON_sender::isOpened	src/http_stream.cpp	/^    bool isOpened()$/;"	f	class:JSON_sender
JSON_sender::master	src/http_stream.cpp	/^    fd_set master;$/;"	m	class:JSON_sender	file:
JSON_sender::maxfd	src/http_stream.cpp	/^    SOCKET maxfd;$/;"	m	class:JSON_sender	file:
JSON_sender::open	src/http_stream.cpp	/^    bool open(int port)$/;"	f	class:JSON_sender
JSON_sender::release	src/http_stream.cpp	/^    bool release()$/;"	f	class:JSON_sender
JSON_sender::sock	src/http_stream.cpp	/^    SOCKET sock;$/;"	m	class:JSON_sender	file:
JSON_sender::timeout	src/http_stream.cpp	/^    int timeout; \/\/ master sock timeout, shutdown after timeout usec.$/;"	m	class:JSON_sender	file:
JSON_sender::write	src/http_stream.cpp	/^    bool write(char const* outputbuf)$/;"	f	class:JSON_sender
JSON_sender::~JSON_sender	src/http_stream.cpp	/^    ~JSON_sender()$/;"	f	class:JSON_sender
L1	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon53
L2NORM	include/darknet.h	/^    L2NORM,$/;"	e	enum:__anon52
LAYER_TYPE	include/darknet.h	/^} LAYER_TYPE;$/;"	t	typeref:enum:__anon52
LDFLAGS	Makefile	/^LDFLAGS= -lm -pthread$/;"	m
LEAKY	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
LETTERBOX_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
LHTAN	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
LIBNAMESO	Makefile	/^LIBNAMESO=libdarknet.so$/;"	m
LIBSO	Makefile	/^LIBSO=0$/;"	m
LIB_API	include/darknet.h	22;"	d
LIB_API	include/darknet.h	24;"	d
LIB_API	include/darknet.h	28;"	d
LIB_API	include/darknet.h	30;"	d
LIB_API	include/yolo_v2_class.hpp	13;"	d
LIB_API	include/yolo_v2_class.hpp	15;"	d
LIB_API	include/yolo_v2_class.hpp	7;"	d
LIB_API	include/yolo_v2_class.hpp	9;"	d
LINEAR	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
LIST_H	src/list.h	2;"	d
LOCAL	include/darknet.h	/^    LOCAL,$/;"	e	enum:__anon52
LOCAL_AVGPOOL	include/darknet.h	/^    LOCAL_AVGPOOL,$/;"	e	enum:__anon52
LOCAL_LAYER_H	src/local_layer.h	2;"	d
LOGGY	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
LOGISTIC	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
LOGXENT	include/darknet.h	/^    LOGXENT,$/;"	e	enum:__anon52
LSTM	include/darknet.h	/^    LSTM,$/;"	e	enum:__anon52
LSTM_LAYER_H	src/lstm_layer.h	2;"	d
MAJOR_VERSION	src/version.h	1;"	d
MASKED	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon53
MATRIX_H	src/matrix.h	2;"	d
MAXPOOL	include/darknet.h	/^    MAXPOOL,$/;"	e	enum:__anon52
MAXPOOL_LAYER_H	src/maxpool_layer.h	2;"	d
METADATA	build/darknet/x64/darknet.py	/^class METADATA(Structure):$/;"	c
METADATA	darknet.py	/^class METADATA(Structure):$/;"	c
MINOR_VERSION	src/version.h	2;"	d
MISH	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
MJPG_sender	src/http_stream.cpp	/^    MJPG_sender(int port = 0, int _timeout = 400000, int _quality = 30)$/;"	f	class:MJPG_sender
MJPG_sender	src/http_stream.cpp	/^class MJPG_sender$/;"	c	file:
MJPG_sender::MJPG_sender	src/http_stream.cpp	/^    MJPG_sender(int port = 0, int _timeout = 400000, int _quality = 30)$/;"	f	class:MJPG_sender
MJPG_sender::_write	src/http_stream.cpp	/^    int _write(int sock, char const*const s, int len)$/;"	f	class:MJPG_sender	file:
MJPG_sender::close_all	src/http_stream.cpp	/^    void close_all()$/;"	f	class:MJPG_sender
MJPG_sender::close_all_sockets	src/http_stream.cpp	/^    int close_all_sockets;$/;"	m	class:MJPG_sender	file:
MJPG_sender::isOpened	src/http_stream.cpp	/^    bool isOpened()$/;"	f	class:MJPG_sender
MJPG_sender::master	src/http_stream.cpp	/^    fd_set master;$/;"	m	class:MJPG_sender	file:
MJPG_sender::maxfd	src/http_stream.cpp	/^    SOCKET maxfd;$/;"	m	class:MJPG_sender	file:
MJPG_sender::open	src/http_stream.cpp	/^    bool open(int port)$/;"	f	class:MJPG_sender
MJPG_sender::quality	src/http_stream.cpp	/^    int quality; \/\/ jpeg compression [1..100]$/;"	m	class:MJPG_sender	file:
MJPG_sender::release	src/http_stream.cpp	/^    bool release()$/;"	f	class:MJPG_sender
MJPG_sender::sock	src/http_stream.cpp	/^    SOCKET sock;$/;"	m	class:MJPG_sender	file:
MJPG_sender::timeout	src/http_stream.cpp	/^    int timeout; \/\/ master sock timeout, shutdown after timeout usec.$/;"	m	class:MJPG_sender	file:
MJPG_sender::write	src/http_stream.cpp	/^    bool write(const Mat & frame)$/;"	f	class:MJPG_sender
MJPG_sender::~MJPG_sender	src/http_stream.cpp	/^    ~MJPG_sender()$/;"	f	class:MJPG_sender
MSE	include/darknet.h	/^    IOU, GIOU, MSE, DIOU, CIOU$/;"	e	enum:__anon45
MULT	include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon51
M_PI	src/box.c	8;"	d	file:
M_PI	src/gaussian_yolo_layer.c	20;"	d	file:
M_PI	src/utils.h	11;"	d
Makefile	Makefile	1;"	F
MaxObjects	build/darknet/YoloWrapper.cs	/^        private const int MaxObjects = 1000;$/;"	f	class:Darknet.YoloWrapper	file:
MaxObjects	src/csharp/YoloCSharpWrapper.cs	/^        private const int MaxObjects = 1000;$/;"	f	class:Darknet.YoloWrapper	file:
MultipartFile	src/httplib.h	/^struct MultipartFile {$/;"	s	namespace:httplib
MultipartFormData	src/httplib.h	/^struct MultipartFormData {$/;"	s	namespace:httplib
NEED_ERRNO	3rdparty/pthreads/include/pthread.h	245;"	d
NEED_ERRNO	3rdparty/pthreads/include/sched.h	96;"	d
NEED_ERRNO	3rdparty/pthreads/include/semaphore.h	95;"	d
NEED_SEM	3rdparty/pthreads/include/pthread.h	246;"	d
NEED_SEM	3rdparty/pthreads/include/sched.h	97;"	d
NEED_SEM	3rdparty/pthreads/include/semaphore.h	96;"	d
NETWORK	include/darknet.h	/^    NETWORK,$/;"	e	enum:__anon52
NETWORK_H	src/network.h	3;"	d
NFRAMES	src/yolo_v2_class.cpp	25;"	d	file:
NI_MAXHOST	src/http_stream.cpp	576;"	d	file:
NI_NUMERICHOST	src/http_stream.cpp	580;"	d	file:
NMS_KIND	include/darknet.h	/^} NMS_KIND;$/;"	t	typeref:enum:__anon46
NOMINMAX	src/httplib.h	89;"	d
NORMALIZATION	include/darknet.h	/^    NORMALIZATION,$/;"	e	enum:__anon52
NORMALIZATION_LAYER_H	src/normalization_layer.h	2;"	d
NORM_CHAN	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
NORM_CHAN_SOFTMAX	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
NORM_CHAN_SOFTMAX_MAXVAL	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
NO_NORMALIZATION	include/darknet.h	/^    NO_NORMALIZATION, RELU_NORMALIZATION, SOFTMAX_NORMALIZATION$/;"	e	enum:__anon49
NO_WEIGHTS	include/darknet.h	/^    NO_WEIGHTS, PER_FEATURE, PER_CHANNEL$/;"	e	enum:__anon48
NUMCHARS	src/data.c	14;"	d	file:
NVCC	Makefile	/^NVCC=nvcc$/;"	m
NoThread	src/httplib.h	/^  NoThread() {}$/;"	f	class:httplib::NoThread
NoThread	src/httplib.h	/^class NoThread : public TaskQueue {$/;"	c	namespace:httplib
OBJ	Makefile	/^OBJ=image_opencv.o http_stream.o gemm.o utils.o dark_cuda.o convolutional_layer.o list.o image.o activations.o im2col.o col2im.o blas.o crop_layer.o dropout_layer.o maxpool_layer.o softmax_layer.o data.o matrix.o network.o connected_layer.o cost_layer.o parser.o option_list.o darknet.o detection_layer.o captcha.o route_layer.o writing.o box.o nightmare.o normalization_layer.o avgpool_layer.o coco.o dice.o yolo.o detector.o layer.o compare.o classifier.o local_layer.o swag.o shortcut_layer.o representation_layer.o activation_layer.o rnn_layer.o gru_layer.o rnn.o rnn_vid.o crnn_layer.o demo.o tag.o cifar.o go.o batchnorm_layer.o art.o region_layer.o reorg_layer.o reorg_old_layer.o super.o voxel.o tree.o yolo_layer.o gaussian_yolo_layer.o upsample_layer.o lstm_layer.o conv_lstm_layer.o scale_channels_layer.o sam_layer.o$/;"	m
OBJDIR	Makefile	/^OBJDIR=.\/obj\/$/;"	m
OBJS	Makefile	/^OBJS = $(addprefix $(OBJDIR), $(OBJ))$/;"	m
OCV_D	src/image_opencv.cpp	45;"	d	file:
OLD_CLASSIFICATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
OPENCV	Makefile	/^OPENCV=1$/;"	m
OPENCV_VERSION	src/image_opencv.cpp	53;"	d	file:
OPENCV_VERSION	src/yolo_console_dll.cpp	156;"	d	file:
OPENCV_VERSION	src/yolo_console_dll.cpp	170;"	d	file:
OPENMP	Makefile	/^OPENMP=0$/;"	m
OPTION_LIST_H	src/option_list.h	2;"	d
OPTS	Makefile	/^OPTS=-Ofast$/;"	m
OS	Makefile	/^OS := $(shell uname)$/;"	m
Options	src/httplib.h	/^inline Server &Server::Options(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Options	src/httplib.h	/^inline std::shared_ptr<Response> Client::Options(const char *path) {$/;"	f	class:httplib::Client
Options	src/httplib.h	/^inline std::shared_ptr<Response> Client::Options(const char *path,$/;"	f	class:httplib::Client
P	include/darknet.h	/^    float P;$/;"	m	struct:contrastive_params
PARSER_H	src/parser.h	2;"	d
PATCH_VERSION	src/version.h	3;"	d
PER_CHANNEL	include/darknet.h	/^    NO_WEIGHTS, PER_FEATURE, PER_CHANNEL$/;"	e	enum:__anon48
PER_FEATURE	include/darknet.h	/^    NO_WEIGHTS, PER_FEATURE, PER_CHANNEL$/;"	e	enum:__anon48
PLSE	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
PNG	include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon50
POLY	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM, SGDR$/;"	e	enum:__anon54
POPCNT	src/gemm.c	22;"	d	file:
POPCNT	src/gemm.c	27;"	d	file:
POPCNT	src/gemm.c	35;"	d	file:
POPCNT	src/gemm.c	40;"	d	file:
POPCNT64	src/gemm.c	23;"	d	file:
POPCNT64	src/gemm.c	28;"	d	file:
POPCNT64	src/gemm.c	36;"	d	file:
POPCNT64	src/gemm.c	41;"	d	file:
PORT	src/http_stream.cpp	35;"	d	file:
PRINT_ERROR	src/getopt.h	85;"	d
PTHREAD_BARRIER_SERIAL_THREAD	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_BARRIER_SERIAL_THREAD = -1$/;"	e	enum:__anon23
PTHREAD_CANCELED	3rdparty/pthreads/include/pthread.h	665;"	d
PTHREAD_CANCEL_ASYNCHRONOUS	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_CANCEL_ASYNCHRONOUS   = 0,$/;"	e	enum:__anon23
PTHREAD_CANCEL_DEFERRED	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_CANCEL_DEFERRED       = 1,  \/* Default *\/$/;"	e	enum:__anon23
PTHREAD_CANCEL_DISABLE	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_CANCEL_DISABLE        = 1,$/;"	e	enum:__anon23
PTHREAD_CANCEL_ENABLE	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_CANCEL_ENABLE         = 0,  \/* Default *\/$/;"	e	enum:__anon23
PTHREAD_COND_INITIALIZER	3rdparty/pthreads/include/pthread.h	703;"	d
PTHREAD_CREATE_DETACHED	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_CREATE_DETACHED       = 1,$/;"	e	enum:__anon23
PTHREAD_CREATE_JOINABLE	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_CREATE_JOINABLE       = 0,  \/* Default *\/$/;"	e	enum:__anon23
PTHREAD_DESTRUCTOR_ITERATIONS	3rdparty/pthreads/include/pthread.h	507;"	d
PTHREAD_DESTRUCTOR_ITERATIONS	3rdparty/pthreads/include/pthread.h	508;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER	3rdparty/pthreads/include/pthread.h	695;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP	3rdparty/pthreads/include/pthread.h	701;"	d
PTHREAD_EXPLICIT_SCHED	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_EXPLICIT_SCHED        = 1,  \/* Default *\/$/;"	e	enum:__anon23
PTHREAD_H	3rdparty/pthreads/include/pthread.h	34;"	d
PTHREAD_INHERIT_SCHED	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_INHERIT_SCHED         = 0,$/;"	e	enum:__anon23
PTHREAD_KEYS_MAX	3rdparty/pthreads/include/pthread.h	513;"	d
PTHREAD_KEYS_MAX	3rdparty/pthreads/include/pthread.h	514;"	d
PTHREAD_MUTEX_ADAPTIVE_NP	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_ADAPTIVE_NP = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon24
PTHREAD_MUTEX_DEFAULT	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL$/;"	e	enum:__anon24
PTHREAD_MUTEX_ERRORCHECK	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon24
PTHREAD_MUTEX_ERRORCHECK_NP	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon24
PTHREAD_MUTEX_FAST_NP	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon24
PTHREAD_MUTEX_INITIALIZER	3rdparty/pthreads/include/pthread.h	693;"	d
PTHREAD_MUTEX_NORMAL	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon24
PTHREAD_MUTEX_RECURSIVE	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon24
PTHREAD_MUTEX_RECURSIVE_NP	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon24
PTHREAD_MUTEX_ROBUST	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_ROBUST          = 1,$/;"	e	enum:__anon23
PTHREAD_MUTEX_STALLED	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_STALLED         = 0,  \/* Default *\/$/;"	e	enum:__anon23
PTHREAD_MUTEX_TIMED_NP	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_MUTEX_TIMED_NP = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon24
PTHREAD_ONCE_INIT	3rdparty/pthreads/include/pthread.h	675;"	d
PTHREAD_PROCESS_PRIVATE	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_PROCESS_PRIVATE       = 0,$/;"	e	enum:__anon23
PTHREAD_PROCESS_SHARED	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_PROCESS_SHARED        = 1,$/;"	e	enum:__anon23
PTHREAD_RECURSIVE_MUTEX_INITIALIZER	3rdparty/pthreads/include/pthread.h	694;"	d
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP	3rdparty/pthreads/include/pthread.h	700;"	d
PTHREAD_RWLOCK_INITIALIZER	3rdparty/pthreads/include/pthread.h	705;"	d
PTHREAD_SCOPE_PROCESS	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_SCOPE_PROCESS         = 0,$/;"	e	enum:__anon23
PTHREAD_SCOPE_SYSTEM	3rdparty/pthreads/include/pthread.h	/^  PTHREAD_SCOPE_SYSTEM          = 1,  \/* Default *\/$/;"	e	enum:__anon23
PTHREAD_SPINLOCK_INITIALIZER	3rdparty/pthreads/include/pthread.h	707;"	d
PTHREAD_STACK_MIN	3rdparty/pthreads/include/pthread.h	516;"	d
PTHREAD_STACK_MIN	3rdparty/pthreads/include/pthread.h	517;"	d
PTHREAD_THREADS_MAX	3rdparty/pthreads/include/pthread.h	523;"	d
PTHREAD_THREADS_MAX	3rdparty/pthreads/include/pthread.h	524;"	d
PTW32_ALERTABLE_ASYNC_CANCEL	3rdparty/pthreads/include/pthread.h	/^  PTW32_ALERTABLE_ASYNC_CANCEL              = 0x0002  \/* Can cancel blocked threads. *\/$/;"	e	enum:ptw32_features
PTW32_CDECL	3rdparty/pthreads/include/pthread.h	570;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/pthread.h	552;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/pthread.h	554;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/pthread.h	557;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/sched.h	81;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/sched.h	83;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/sched.h	86;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/semaphore.h	80;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/semaphore.h	82;"	d
PTW32_DLLPORT	3rdparty/pthreads/include/semaphore.h	85;"	d
PTW32_FALSE	3rdparty/pthreads/include/pthread.h	/^  PTW32_FALSE = 0,$/;"	e	enum:__anon21
PTW32_INCLUDE_WINDOWS_H	3rdparty/pthreads/include/pthread.h	194;"	d
PTW32_LEVEL	3rdparty/pthreads/include/pthread.h	100;"	d
PTW32_LEVEL	3rdparty/pthreads/include/pthread.h	101;"	d
PTW32_LEVEL	3rdparty/pthreads/include/pthread.h	108;"	d
PTW32_LEVEL	3rdparty/pthreads/include/pthread.h	1363;"	d
PTW32_LEVEL	3rdparty/pthreads/include/pthread.h	86;"	d
PTW32_LEVEL	3rdparty/pthreads/include/pthread.h	89;"	d
PTW32_LEVEL	3rdparty/pthreads/include/pthread.h	94;"	d
PTW32_LEVEL	3rdparty/pthreads/include/pthread.h	95;"	d
PTW32_LEVEL_MAX	3rdparty/pthreads/include/pthread.h	105;"	d
PTW32_LEVEL_MAX	3rdparty/pthreads/include/pthread.h	1364;"	d
PTW32_SCHED_LEVEL	3rdparty/pthreads/include/sched.h	179;"	d
PTW32_SCHED_LEVEL	3rdparty/pthreads/include/sched.h	42;"	d
PTW32_SCHED_LEVEL	3rdparty/pthreads/include/sched.h	45;"	d
PTW32_SCHED_LEVEL	3rdparty/pthreads/include/sched.h	50;"	d
PTW32_SCHED_LEVEL	3rdparty/pthreads/include/sched.h	51;"	d
PTW32_SCHED_LEVEL	3rdparty/pthreads/include/sched.h	56;"	d
PTW32_SCHED_LEVEL	3rdparty/pthreads/include/sched.h	57;"	d
PTW32_SCHED_LEVEL	3rdparty/pthreads/include/sched.h	64;"	d
PTW32_SCHED_LEVEL_MAX	3rdparty/pthreads/include/sched.h	180;"	d
PTW32_SCHED_LEVEL_MAX	3rdparty/pthreads/include/sched.h	61;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/pthreads/include/semaphore.h	166;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/pthreads/include/semaphore.h	42;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/pthreads/include/semaphore.h	45;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/pthreads/include/semaphore.h	50;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/pthreads/include/semaphore.h	51;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/pthreads/include/semaphore.h	56;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/pthreads/include/semaphore.h	57;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/pthreads/include/semaphore.h	64;"	d
PTW32_SEMAPHORE_LEVEL_MAX	3rdparty/pthreads/include/semaphore.h	167;"	d
PTW32_SEMAPHORE_LEVEL_MAX	3rdparty/pthreads/include/semaphore.h	61;"	d
PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE	3rdparty/pthreads/include/pthread.h	/^  PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE = 0x0001, \/* System provides it. *\/$/;"	e	enum:ptw32_features
PTW32_TRUE	3rdparty/pthreads/include/pthread.h	/^  PTW32_TRUE = (! PTW32_FALSE)$/;"	e	enum:__anon21
PTW32_VERSION	3rdparty/pthreads/include/pthread.h	40;"	d
PTW32_VERSION_STRING	3rdparty/pthreads/include/pthread.h	41;"	d
PTW32__DWORD_DEF	3rdparty/pthreads/include/pthread.h	311;"	d
PTW32__HANDLE_DEF	3rdparty/pthreads/include/pthread.h	307;"	d
PThreadCleanup	3rdparty/pthreads/include/pthread.h	/^          PThreadCleanup($/;"	f	class:PThreadCleanup
PThreadCleanup	3rdparty/pthreads/include/pthread.h	/^          PThreadCleanup() :$/;"	f	class:PThreadCleanup
PThreadCleanup	3rdparty/pthreads/include/pthread.h	/^        class PThreadCleanup {$/;"	c
PThreadCleanup::PThreadCleanup	3rdparty/pthreads/include/pthread.h	/^          PThreadCleanup($/;"	f	class:PThreadCleanup
PThreadCleanup::PThreadCleanup	3rdparty/pthreads/include/pthread.h	/^          PThreadCleanup() :$/;"	f	class:PThreadCleanup
PThreadCleanup::cleanUpRout	3rdparty/pthreads/include/pthread.h	/^      ptw32_cleanup_callback_t cleanUpRout;$/;"	m	class:PThreadCleanup
PThreadCleanup::execute	3rdparty/pthreads/include/pthread.h	/^          void execute( int exec )$/;"	f	class:PThreadCleanup
PThreadCleanup::executeIt	3rdparty/pthreads/include/pthread.h	/^          int             executeIt;$/;"	m	class:PThreadCleanup
PThreadCleanup::obj	3rdparty/pthreads/include/pthread.h	/^          void    *       obj;$/;"	m	class:PThreadCleanup
PThreadCleanup::~PThreadCleanup	3rdparty/pthreads/include/pthread.h	/^          ~PThreadCleanup()$/;"	f	class:PThreadCleanup
PUT_IN_REGISTER	src/convolutional_layer.c	17;"	d	file:
PUT_IN_REGISTER	src/convolutional_layer.c	19;"	d	file:
PUT_IN_REGISTER	src/cpu_gemm.c	3;"	d	file:
PUT_IN_REGISTER	src/cpu_gemm.c	5;"	d	file:
PUT_IN_REGISTER	src/gemm.c	48;"	d	file:
PUT_IN_REGISTER	src/gemm.c	50;"	d	file:
P_constrastive	src/blas.c	/^float P_constrastive(size_t i, size_t l, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *cos_sim, float *exp_cos_sim)$/;"	f
P_constrastive_f	src/blas.c	/^float P_constrastive_f(size_t i, size_t l, int *labels, float **z, unsigned int feature_size, float temperature, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
P_constrastive_f_det	src/blas.c	/^float P_constrastive_f_det(size_t il, int *labels, float **z, unsigned int feature_size, float temperature, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
P_constrastive_f_det_gpu	src/blas_kernels.cu	/^extern "C" void P_constrastive_f_det_gpu(int *labels, unsigned int feature_size, float temperature, contrastive_params *contrast_p, const int contrast_p_size)$/;"	f
P_constrastive_f_det_kernel	src/blas_kernels.cu	/^__global__ void P_constrastive_f_det_kernel(int *labels, unsigned int feature_size, float temperature, contrastive_params *contrast_p, const int contrast_p_size)$/;"	f
Patch	src/httplib.h	/^Client::Patch(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
Patch	src/httplib.h	/^Client::Patch(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Patch	src/httplib.h	/^inline Server &Server::Patch(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Patch	src/httplib.h	/^inline Server &Server::Patch(const char *pattern,$/;"	f	class:httplib::Server
Patch	src/httplib.h	/^inline std::shared_ptr<Response> Client::Patch(const char *path,$/;"	f	class:httplib::Client
Post	src/httplib.h	/^Client::Post(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
Post	src/httplib.h	/^Client::Post(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Post	src/httplib.h	/^Client::Post(const char *path, const Headers &headers,$/;"	f	class:httplib::Client
Post	src/httplib.h	/^Client::Post(const char *path, const MultipartFormDataItems &items,$/;"	f	class:httplib::Client
Post	src/httplib.h	/^Client::Post(const char *path, const Params &params, bool compress) {$/;"	f	class:httplib::Client
Post	src/httplib.h	/^inline Server &Server::Post(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Post	src/httplib.h	/^inline Server &Server::Post(const char *pattern,$/;"	f	class:httplib::Server
Post	src/httplib.h	/^inline std::shared_ptr<Response> Client::Post(const char *path,$/;"	f	class:httplib::Client
Post	src/httplib.h	/^inline void Post(std::vector<Request> &requests, const char *path,$/;"	f	namespace:httplib
PtW32CatchAll	3rdparty/pthreads/include/pthread.h	1336;"	d
Put	src/httplib.h	/^Client::Put(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
Put	src/httplib.h	/^Client::Put(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Put	src/httplib.h	/^inline Server &Server::Put(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Put	src/httplib.h	/^inline Server &Server::Put(const char *pattern,$/;"	f	class:httplib::Server
Put	src/httplib.h	/^inline std::shared_ptr<Response> Client::Put(const char *path,$/;"	f	class:httplib::Client
RAMP	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
RANDOM	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM, SGDR$/;"	e	enum:__anon54
REGION	include/darknet.h	/^    REGION,$/;"	e	enum:__anon52
REGION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
REGION_LAYER_H	src/region_layer.h	2;"	d
REGRESSION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
RELIE	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
RELU	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
RELU6	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
RELU_NORMALIZATION	include/darknet.h	/^    NO_NORMALIZATION, RELU_NORMALIZATION, SOFTMAX_NORMALIZATION$/;"	e	enum:__anon49
REORG	include/darknet.h	/^    REORG,$/;"	e	enum:__anon52
REORG_LAYER_H	src/reorg_layer.h	2;"	d
REORG_OLD	include/darknet.h	/^    REORG_OLD,$/;"	e	enum:__anon52
REORG_OLD_LAYER_H	src/reorg_old_layer.h	2;"	d
REPLACE_GETOPT	src/getopt.h	76;"	d
REPRESENTATION_LAYER_H	src/representation_layer.h	2;"	d
REVLEAKY	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
RNN	include/darknet.h	/^    RNN,$/;"	e	enum:__anon52
RNN_LAYER_H	src/rnn_layer.h	3;"	d
ROUTE	include/darknet.h	/^    ROUTE,$/;"	e	enum:__anon52
ROUTE_LAYER_H	src/route_layer.h	2;"	d
RS_SCALE	src/utils.c	963;"	d	file:
R_OK	src/darkunistd.h	22;"	d
Request	src/httplib.h	/^struct Request {$/;"	s	namespace:httplib
Response	src/httplib.h	/^  Response() : status(-1), content_length(0) {}$/;"	f	struct:httplib::Response
Response	src/httplib.h	/^struct Response {$/;"	s	namespace:httplib
SAM	include/darknet.h	/^    SAM,$/;"	e	enum:__anon52
SAM_CHANNELS_LAYER_H	src/sam_layer.h	2;"	d
SCALE_CHANNELS	include/darknet.h	/^    SCALE_CHANNELS,$/;"	e	enum:__anon52
SCALE_CHANNELS_LAYER_H	src/scale_channels_layer.h	2;"	d
SCHED_FIFO	3rdparty/pthreads/include/sched.h	/^  SCHED_FIFO,$/;"	e	enum:__anon25
SCHED_MAX	3rdparty/pthreads/include/sched.h	/^  SCHED_MAX   = SCHED_RR$/;"	e	enum:__anon25
SCHED_MIN	3rdparty/pthreads/include/sched.h	/^  SCHED_MIN   = SCHED_OTHER,$/;"	e	enum:__anon25
SCHED_OTHER	3rdparty/pthreads/include/sched.h	/^  SCHED_OTHER = 0,$/;"	e	enum:__anon25
SCHED_RR	3rdparty/pthreads/include/sched.h	/^  SCHED_RR,$/;"	e	enum:__anon25
SECRET_NUM	include/darknet.h	35;"	d
SECRET_NUM	src/softmax_layer.c	13;"	d	file:
SEG	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon53
SEGMENTATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
SELU	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
SEMAPHORE_H	3rdparty/pthreads/include/semaphore.h	40;"	d
SEM_NSEMS_MAX	3rdparty/pthreads/include/pthread.h	530;"	d
SEM_NSEMS_MAX	3rdparty/pthreads/include/pthread.h	531;"	d
SEM_VALUE_MAX	3rdparty/pthreads/include/pthread.h	536;"	d
SEM_VALUE_MAX	3rdparty/pthreads/include/pthread.h	537;"	d
SGDR	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM, SGDR$/;"	e	enum:__anon54
SHORTCUT	include/darknet.h	/^    SHORTCUT,$/;"	e	enum:__anon52
SHORTCUT_LAYER_H	src/shortcut_layer.h	2;"	d
SIG	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM, SGDR$/;"	e	enum:__anon54
SIG_BLOCK	3rdparty/pthreads/include/pthread.h	328;"	d
SIG_SETMASK	3rdparty/pthreads/include/pthread.h	336;"	d
SIG_UNBLOCK	3rdparty/pthreads/include/pthread.h	332;"	d
SMOOTH	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon53
SOFTMAX	include/darknet.h	/^    SOFTMAX,$/;"	e	enum:__anon52
SOFTMAX_LAYER_H	src/softmax_layer.h	2;"	d
SOFTMAX_NORMALIZATION	include/darknet.h	/^    NO_NORMALIZATION, RELU_NORMALIZATION, SOFTMAX_NORMALIZATION$/;"	e	enum:__anon49
SO_OPENTYPE	src/httplib.h	1251;"	d
SO_SYNCHRONOUS_NONALERT	src/httplib.h	1250;"	d
SSE	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon53
SSLClient	src/httplib.h	/^class SSLClient : public Client {$/;"	c	namespace:httplib
SSLClient	src/httplib.h	/^inline SSLClient::SSLClient(const char *host, int port, time_t timeout_sec,$/;"	f	class:httplib::SSLClient
SSLInit	src/httplib.h	/^  SSLInit() {$/;"	f	class:httplib::detail::SSLInit
SSLInit	src/httplib.h	/^class SSLInit {$/;"	c	namespace:httplib::detail
SSLServer	src/httplib.h	/^class SSLServer : public Server {$/;"	c	namespace:httplib
SSLServer	src/httplib.h	/^inline SSLServer::SSLServer(const char *cert_path, const char *private_key_path,$/;"	f	class:httplib::SSLServer
SSLSocketStream	src/httplib.h	/^class SSLSocketStream : public Stream {$/;"	c	namespace:httplib
SSLSocketStream	src/httplib.h	/^inline SSLSocketStream::SSLSocketStream(socket_t sock, SSL *ssl,$/;"	f	class:httplib::SSLSocketStream
SSLThreadLocks	src/httplib.h	/^  SSLThreadLocks() {$/;"	f	class:httplib::detail::SSLThreadLocks
SSLThreadLocks	src/httplib.h	/^class SSLThreadLocks {$/;"	c	namespace:httplib::detail
STAIR	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
STBIDEF	3rdparty/stb/include/stb_image.h	328;"	d
STBIDEF	3rdparty/stb/include/stb_image.h	330;"	d
STBIWDEF	3rdparty/stb/include/stb_image_write.h	132;"	d
STBIWDEF	3rdparty/stb/include/stb_image_write.h	134;"	d
STBIW_ASSERT	3rdparty/stb/include/stb_image_write.h	206;"	d
STBIW_FREE	3rdparty/stb/include/stb_image_write.h	191;"	d
STBIW_MALLOC	3rdparty/stb/include/stb_image_write.h	189;"	d
STBIW_MEMMOVE	3rdparty/stb/include/stb_image_write.h	200;"	d
STBIW_REALLOC	3rdparty/stb/include/stb_image_write.h	190;"	d
STBIW_REALLOC_SIZED	3rdparty/stb/include/stb_image_write.h	195;"	d
STBIW_UCHAR	3rdparty/stb/include/stb_image_write.h	209;"	d
STBI_ASSERT	3rdparty/stb/include/stb_image.h	516;"	d
STBI_FREE	3rdparty/stb/include/stb_image.h	574;"	d
STBI_HAS_LROTL	3rdparty/stb/include/stb_image.h	554;"	d
STBI_INCLUDE_STB_IMAGE_H	3rdparty/stb/include/stb_image.h	103;"	d
STBI_MALLOC	3rdparty/stb/include/stb_image.h	572;"	d
STBI_NEON	3rdparty/stb/include/stb_image.h	663;"	d
STBI_NOTUSED	3rdparty/stb/include/stb_image.h	548;"	d
STBI_NOTUSED	3rdparty/stb/include/stb_image.h	550;"	d
STBI_NO_BMP	3rdparty/stb/include/stb_image.h	473;"	d
STBI_NO_GIF	3rdparty/stb/include/stb_image.h	482;"	d
STBI_NO_HDR	3rdparty/stb/include/stb_image.h	485;"	d
STBI_NO_JPEG	3rdparty/stb/include/stb_image.h	467;"	d
STBI_NO_PIC	3rdparty/stb/include/stb_image.h	488;"	d
STBI_NO_PNG	3rdparty/stb/include/stb_image.h	470;"	d
STBI_NO_PNM	3rdparty/stb/include/stb_image.h	491;"	d
STBI_NO_PSD	3rdparty/stb/include/stb_image.h	476;"	d
STBI_NO_SIMD	3rdparty/stb/include/stb_image.h	596;"	d
STBI_NO_SIMD	3rdparty/stb/include/stb_image.h	611;"	d
STBI_NO_TGA	3rdparty/stb/include/stb_image.h	479;"	d
STBI_NO_ZLIB	3rdparty/stb/include/stb_image.h	496;"	d
STBI_ORDER_BGR	3rdparty/stb/include/stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anon5
STBI_ORDER_RGB	3rdparty/stb/include/stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anon5
STBI_REALLOC	3rdparty/stb/include/stb_image.h	573;"	d
STBI_REALLOC_SIZED	3rdparty/stb/include/stb_image.h	578;"	d
STBI_SIMD_ALIGN	3rdparty/stb/include/stb_image.h	641;"	d
STBI_SIMD_ALIGN	3rdparty/stb/include/stb_image.h	649;"	d
STBI_SIMD_ALIGN	3rdparty/stb/include/stb_image.h	669;"	d
STBI_SIMD_ALIGN	3rdparty/stb/include/stb_image.h	673;"	d
STBI_SSE2	3rdparty/stb/include/stb_image.h	615;"	d
STBI_VERSION	3rdparty/stb/include/stb_image.h	308;"	d
STBI__BYTECAST	3rdparty/stb/include/stb_image.h	1452;"	d
STBI__CASE	3rdparty/stb/include/stb_image.h	1490;"	d
STBI__CASE	3rdparty/stb/include/stb_image.h	1508;"	d
STBI__CASE	3rdparty/stb/include/stb_image.h	1539;"	d
STBI__CASE	3rdparty/stb/include/stb_image.h	1557;"	d
STBI__CASE	3rdparty/stb/include/stb_image.h	4360;"	d
STBI__CASE	3rdparty/stb/include/stb_image.h	4373;"	d
STBI__CASE	3rdparty/stb/include/stb_image.h	4377;"	d
STBI__CASE	3rdparty/stb/include/stb_image.h	4390;"	d
STBI__COMBO	3rdparty/stb/include/stb_image.h	1489;"	d
STBI__COMBO	3rdparty/stb/include/stb_image.h	1538;"	d
STBI__F_avg	3rdparty/stb/include/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon16
STBI__F_avg_first	3rdparty/stb/include/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon16
STBI__F_none	3rdparty/stb/include/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon16
STBI__F_paeth	3rdparty/stb/include/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon16
STBI__F_paeth_first	3rdparty/stb/include/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon16
STBI__F_sub	3rdparty/stb/include/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon16
STBI__F_up	3rdparty/stb/include/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon16
STBI__HDR_BUFLEN	3rdparty/stb/include/stb_image.h	6426;"	d
STBI__IDCT_1D	3rdparty/stb/include/stb_image.h	2118;"	d
STBI__MARKER_none	3rdparty/stb/include/stb_image.h	2603;"	d
STBI__PNG_TYPE	3rdparty/stb/include/stb_image.h	4678;"	d
STBI__RESTART	3rdparty/stb/include/stb_image.h	2620;"	d
STBI__SCAN_header	3rdparty/stb/include/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon7
STBI__SCAN_load	3rdparty/stb/include/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon7
STBI__SCAN_type	3rdparty/stb/include/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon7
STBI__X64_TARGET	3rdparty/stb/include/stb_image.h	583;"	d
STBI__X86_TARGET	3rdparty/stb/include/stb_image.h	585;"	d
STBI__ZFAST_BITS	3rdparty/stb/include/stb_image.h	3740;"	d
STBI__ZFAST_MASK	3rdparty/stb/include/stb_image.h	3741;"	d
STBI_default	3rdparty/stb/include/stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon2
STBI_grey	3rdparty/stb/include/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon2
STBI_grey_alpha	3rdparty/stb/include/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon2
STBI_rgb	3rdparty/stb/include/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon2
STBI_rgb_alpha	3rdparty/stb/include/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon2
STB_IMAGE_IMPLEMENTATION	src/image.c	15;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	src/image.c	19;"	d	file:
STDERR_FILENO	src/darkunistd.h	43;"	d
STDIN_FILENO	src/darkunistd.h	41;"	d
STDOUT_FILENO	src/darkunistd.h	42;"	d
STEP	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM, SGDR$/;"	e	enum:__anon54
STEPS	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM, SGDR$/;"	e	enum:__anon54
STUDY_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
SUB	include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon51
SUPER_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
SWAG_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
SWISH	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
S_ISDIR	src/httplib.h	85;"	d
S_ISREG	src/httplib.h	81;"	d
Server	src/httplib.h	/^class Server {$/;"	c	namespace:httplib
Server	src/httplib.h	/^inline Server::Server()$/;"	f	class:httplib::Server
SocketStream	src/httplib.h	/^class SocketStream : public Stream {$/;"	c	namespace:httplib
SocketStream	src/httplib.h	/^inline SocketStream::SocketStream(socket_t sock, time_t read_timeout_sec,$/;"	f	class:httplib::SocketStream
SortMaster3000	src/compare.c	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f
Stream	src/httplib.h	/^class Stream {$/;"	c	namespace:httplib
T1	src/im2col_kernels.cu	/^template<typename T1, typename T2>$/;"	v
TAG_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
TANH	include/darknet.h	/^    LOGISTIC, RELU, RELU6, RELIE, LINEAR, RAMP, TANH, PLSE, REVLEAKY, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU, GELU, SWISH, MISH, HARD_MISH, NORM_CHAN, NORM_CHAN_SOFTMAX, NORM_CHAN_SOFTMAX_MAXVAL$/;"	e	enum:__anon44
TGA	include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon50
TILE_K	src/gemm.c	46;"	d	file:
TILE_M	src/gemm.c	44;"	d	file:
TILE_N	src/gemm.c	45;"	d	file:
TRANS_BLOCK	src/im2col_kernels.cu	737;"	d	file:
TREE_H	src/tree.h	2;"	d
TaskQueue	src/httplib.h	/^class TaskQueue {$/;"	c	namespace:httplib
ThreadPool	src/httplib.h	/^  explicit ThreadPool(size_t n) : shutdown_(false) {$/;"	f	class:httplib::ThreadPool
ThreadPool	src/httplib.h	/^class ThreadPool : public TaskQueue {$/;"	c	namespace:httplib
Threads	src/httplib.h	/^  Threads() : running_threads_(0) {}$/;"	f	class:httplib::Threads
Threads	src/httplib.h	/^class Threads : public TaskQueue {$/;"	c	namespace:httplib
Tracker_optflow	include/yolo_v2_class.hpp	/^    Tracker_optflow(int _gpu_id = 0, int win_size = 15, int max_level = 3, int iterations = 8000, int _flow_error = -1) :$/;"	f	class:Tracker_optflow
Tracker_optflow	include/yolo_v2_class.hpp	/^    Tracker_optflow(int win_size = 15, int max_level = 3, int iterations = 8000, int _flow_error = -1) :$/;"	f	class:Tracker_optflow
Tracker_optflow	include/yolo_v2_class.hpp	/^class Tracker_optflow {$/;"	c
Tracker_optflow	include/yolo_v2_class.hpp	/^class Tracker_optflow {};$/;"	c
Tracker_optflow::Tracker_optflow	include/yolo_v2_class.hpp	/^    Tracker_optflow(int _gpu_id = 0, int win_size = 15, int max_level = 3, int iterations = 8000, int _flow_error = -1) :$/;"	f	class:Tracker_optflow
Tracker_optflow::Tracker_optflow	include/yolo_v2_class.hpp	/^    Tracker_optflow(int win_size = 15, int max_level = 3, int iterations = 8000, int _flow_error = -1) :$/;"	f	class:Tracker_optflow
Tracker_optflow::cur_bbox_vec	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> cur_bbox_vec;$/;"	m	class:Tracker_optflow
Tracker_optflow::cur_pts_flow	include/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow, cur_pts_flow;$/;"	m	class:Tracker_optflow
Tracker_optflow::cur_pts_flow_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat prev_pts_flow_gpu, cur_pts_flow_gpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::dst_grey	include/yolo_v2_class.hpp	/^    cv::Mat dst_grey;$/;"	m	class:Tracker_optflow
Tracker_optflow::dst_grey_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat dst_mat_gpu, dst_grey_gpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::dst_mat_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat dst_mat_gpu, dst_grey_gpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::err	include/yolo_v2_class.hpp	/^    cv::Mat status, err;$/;"	m	class:Tracker_optflow
Tracker_optflow::err_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat status_gpu, err_gpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::flow_error	include/yolo_v2_class.hpp	/^    const int flow_error;$/;"	m	class:Tracker_optflow
Tracker_optflow::good_bbox_vec_flags	include/yolo_v2_class.hpp	/^    std::vector<bool> good_bbox_vec_flags;$/;"	m	class:Tracker_optflow
Tracker_optflow::gpu_count	include/yolo_v2_class.hpp	/^    const int gpu_count;$/;"	m	class:Tracker_optflow
Tracker_optflow::gpu_id	include/yolo_v2_class.hpp	/^    const int gpu_id;$/;"	m	class:Tracker_optflow
Tracker_optflow::prev_pts_flow	include/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow, cur_pts_flow;$/;"	m	class:Tracker_optflow
Tracker_optflow::prev_pts_flow_cpu	include/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow_cpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::prev_pts_flow_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat prev_pts_flow_gpu, cur_pts_flow_gpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::src_grey	include/yolo_v2_class.hpp	/^    cv::Mat src_grey;    \/\/ used in both functions$/;"	m	class:Tracker_optflow
Tracker_optflow::src_grey_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat src_grey_gpu;    \/\/ used in both functions$/;"	m	class:Tracker_optflow
Tracker_optflow::src_mat_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat src_mat_gpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::status	include/yolo_v2_class.hpp	/^    cv::Mat status, err;$/;"	m	class:Tracker_optflow
Tracker_optflow::status_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat status_gpu, err_gpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::stream	include/yolo_v2_class.hpp	/^    cv::cuda::Stream stream;$/;"	m	class:Tracker_optflow
Tracker_optflow::sync_PyrLKOpticalFlow	include/yolo_v2_class.hpp	/^    cv::Ptr<cv::SparsePyrLKOpticalFlow> sync_PyrLKOpticalFlow;$/;"	m	class:Tracker_optflow
Tracker_optflow::sync_PyrLKOpticalFlow_gpu	include/yolo_v2_class.hpp	/^    cv::Ptr<cv::cuda::SparsePyrLKOpticalFlow> sync_PyrLKOpticalFlow_gpu;$/;"	m	class:Tracker_optflow
Tracker_optflow::tracking_flow	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> tracking_flow(cv::Mat dst_mat, bool check_error = true)$/;"	f	class:Tracker_optflow
Tracker_optflow::tracking_flow	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> tracking_flow(cv::Mat new_dst_mat, bool check_error = true)$/;"	f	class:Tracker_optflow
Tracker_optflow::update_cur_bbox_vec	include/yolo_v2_class.hpp	/^    void update_cur_bbox_vec(std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
Tracker_optflow::update_tracking_flow	include/yolo_v2_class.hpp	/^    void update_tracking_flow(cv::Mat new_src_mat, std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
Tracker_optflow::update_tracking_flow	include/yolo_v2_class.hpp	/^    void update_tracking_flow(cv::Mat src_mat, std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
ULONG_PTR	3rdparty/pthreads/include/pthread.h	/^typedef unsigned long ULONG_PTR;$/;"	t
UNUSED_DEF_VAL	include/darknet.h	/^typedef enum { UNUSED_DEF_VAL } UNUSED_ENUM_TYPE;$/;"	e	enum:__anon43
UNUSED_ENUM_TYPE	include/darknet.h	/^typedef enum { UNUSED_DEF_VAL } UNUSED_ENUM_TYPE;$/;"	t	typeref:enum:__anon43
UPSAMPLE	include/darknet.h	/^    UPSAMPLE,$/;"	e	enum:__anon52
UPSAMPLE_LAYER_H	src/upsample_layer.h	2;"	d
USET	src/conv_lstm_layer.h	7;"	d
USET	src/lstm_layer.h	7;"	d
USET	src/rnn_layer.h	8;"	d
USE_CPP	Makefile	/^USE_CPP=0$/;"	m
UTILS_H	src/utils.h	2;"	d
VPATH	Makefile	/^VPATH=.\/src\/$/;"	m
WARP_SIZE	src/dark_cuda.h	20;"	d
WCSS	scripts/kmeansiou.c	/^double WCSS(matrix data, int *assignments, matrix centers)$/;"	f
WEIGHTS_NORMALIZATION_T	include/darknet.h	/^} WEIGHTS_NORMALIZATION_T;$/;"	t	typeref:enum:__anon49
WEIGHTS_TYPE_T	include/darknet.h	/^} WEIGHTS_TYPE_T;$/;"	t	typeref:enum:__anon48
WGAN	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon53
WIN32_LEAN_AND_MEAN	src/getopt.h	69;"	d
WIN32_LEAN_AND_MEAN	src/gettimeofday.h	2;"	d
WIN32_LEAN_AND_MEAN	src/http_stream.cpp	29;"	d	file:
WMMA_K	src/im2col_kernels.cu	1230;"	d	file:
WMMA_K32	src/im2col_kernels.cu	1231;"	d	file:
WMMA_M	src/im2col_kernels.cu	1228;"	d	file:
WMMA_N	src/im2col_kernels.cu	1229;"	d	file:
WMMA_Nx2	src/im2col_kernels.cu	1233;"	d	file:
WRITING_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon55
WSA_FLAG_NO_HANDLE_INHERIT	src/httplib.h	97;"	d
WSInit	src/httplib.h	/^  WSInit() {$/;"	f	class:httplib::detail::WSInit
WSInit	src/httplib.h	/^class WSInit {$/;"	c	namespace:httplib::detail
W_OK	src/darkunistd.h	23;"	d
X	include/darknet.h	/^    matrix X;$/;"	m	struct:data
XNOR	include/darknet.h	/^    XNOR,$/;"	e	enum:__anon52
X_OK	src/darkunistd.h	24;"	d
YCbCr_to_RGB_kernel	3rdparty/stb/include/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon9
YOLO	include/darknet.h	/^    YOLO,$/;"	e	enum:__anon52
YOLO_CENTER	include/darknet.h	/^    YOLO_CENTER = 1 << 0, YOLO_LEFT_TOP = 1 << 1, YOLO_RIGHT_BOTTOM = 1 << 2$/;"	e	enum:__anon47
YOLO_LAYER_H	src/yolo_layer.h	2;"	d
YOLO_LEFT_TOP	include/darknet.h	/^    YOLO_CENTER = 1 << 0, YOLO_LEFT_TOP = 1 << 1, YOLO_RIGHT_BOTTOM = 1 << 2$/;"	e	enum:__anon47
YOLO_POINT	include/darknet.h	/^} YOLO_POINT;$/;"	t	typeref:enum:__anon47
YOLO_RIGHT_BOTTOM	include/darknet.h	/^    YOLO_CENTER = 1 << 0, YOLO_LEFT_TOP = 1 << 1, YOLO_RIGHT_BOTTOM = 1 << 2$/;"	e	enum:__anon47
YOLO_V2_CLASS_HPP	include/yolo_v2_class.hpp	2;"	d
YoloCSharpWrapper.cs	src/csharp/YoloCSharpWrapper.cs	1;"	F
YoloLibraryName	build/darknet/YoloWrapper.cs	/^        private const string YoloLibraryName = "yolo_cpp_dll.dll";$/;"	f	class:Darknet.YoloWrapper	file:
YoloLibraryName	src/csharp/YoloCSharpWrapper.cs	/^        private const string YoloLibraryName = "darknet.dll";$/;"	f	class:Darknet.YoloWrapper	file:
YoloWrapper	build/darknet/YoloWrapper.cs	/^        public YoloWrapper(string configurationFilename, string weightsFilename, int gpu)$/;"	m	class:Darknet.YoloWrapper
YoloWrapper	build/darknet/YoloWrapper.cs	/^    public class YoloWrapper : IDisposable$/;"	c	namespace:Darknet
YoloWrapper	src/csharp/YoloCSharpWrapper.cs	/^        public YoloWrapper(string configurationFilename, string weightsFilename, int gpu, int batch_size = 1)$/;"	m	class:Darknet.YoloWrapper
YoloWrapper	src/csharp/YoloCSharpWrapper.cs	/^    public class YoloWrapper : IDisposable$/;"	c	namespace:Darknet
YoloWrapper.cs	build/darknet/YoloWrapper.cs	1;"	F
ZED_CAMERA	Makefile	/^ZED_CAMERA=0$/;"	m
ZED_CAMERA_v2_8	Makefile	/^ZED_CAMERA_v2_8=0$/;"	m
ZED_STEREO_2_COMPAT_MODE	src/yolo_console_dll.cpp	29;"	d	file:
_CRTDBG_MAP_ALLOC	include/darknet.h	9;"	d
_CRT_NONSTDC_NO_DEPRECATE	3rdparty/stb/include/stb_image_write.h	167;"	d
_CRT_NONSTDC_NO_DEPRECATE	src/httplib.h	65;"	d
_CRT_SECURE_NO_WARNINGS	3rdparty/stb/include/stb_image_write.h	164;"	d
_CRT_SECURE_NO_WARNINGS	src/httplib.h	61;"	d
_GNU_SOURCE	src/image.c	2;"	d	file:
_GNU_SOURCE	src/utils.c	2;"	d	file:
_INIT_W32DATA	src/http_stream.cpp	/^    _INIT_W32DATA() { WSAStartup(MAKEWORD(2, 1), &w); }$/;"	f	struct:_INIT_W32DATA
_INIT_W32DATA	src/http_stream.cpp	/^struct _INIT_W32DATA$/;"	s	file:
_INIT_W32DATA::_INIT_W32DATA	src/http_stream.cpp	/^    _INIT_W32DATA() { WSAStartup(MAKEWORD(2, 1), &w); }$/;"	f	struct:_INIT_W32DATA
_INIT_W32DATA::w	src/http_stream.cpp	/^    WSADATA w;$/;"	m	struct:_INIT_W32DATA	file:
_POSIX_BARRIERS	3rdparty/pthreads/include/pthread.h	443;"	d
_POSIX_BARRIERS	3rdparty/pthreads/include/pthread.h	444;"	d
_POSIX_READER_WRITER_LOCKS	3rdparty/pthreads/include/pthread.h	437;"	d
_POSIX_READER_WRITER_LOCKS	3rdparty/pthreads/include/pthread.h	438;"	d
_POSIX_SEMAPHORES	3rdparty/pthreads/include/semaphore.h	118;"	d
_POSIX_SEM_NSEMS_MAX	3rdparty/pthreads/include/pthread.h	526;"	d
_POSIX_SEM_NSEMS_MAX	3rdparty/pthreads/include/pthread.h	527;"	d
_POSIX_SEM_VALUE_MAX	3rdparty/pthreads/include/pthread.h	533;"	d
_POSIX_SEM_VALUE_MAX	3rdparty/pthreads/include/pthread.h	534;"	d
_POSIX_SPIN_LOCKS	3rdparty/pthreads/include/pthread.h	440;"	d
_POSIX_SPIN_LOCKS	3rdparty/pthreads/include/pthread.h	441;"	d
_POSIX_THREADS	3rdparty/pthreads/include/pthread.h	434;"	d
_POSIX_THREADS	3rdparty/pthreads/include/pthread.h	435;"	d
_POSIX_THREAD_ATTR_STACKADDR	3rdparty/pthreads/include/pthread.h	455;"	d
_POSIX_THREAD_ATTR_STACKADDR	3rdparty/pthreads/include/pthread.h	456;"	d
_POSIX_THREAD_ATTR_STACKSIZE	3rdparty/pthreads/include/pthread.h	449;"	d
_POSIX_THREAD_ATTR_STACKSIZE	3rdparty/pthreads/include/pthread.h	450;"	d
_POSIX_THREAD_DESTRUCTOR_ITERATIONS	3rdparty/pthreads/include/pthread.h	504;"	d
_POSIX_THREAD_DESTRUCTOR_ITERATIONS	3rdparty/pthreads/include/pthread.h	505;"	d
_POSIX_THREAD_KEYS_MAX	3rdparty/pthreads/include/pthread.h	510;"	d
_POSIX_THREAD_KEYS_MAX	3rdparty/pthreads/include/pthread.h	511;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	3rdparty/pthreads/include/pthread.h	465;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	3rdparty/pthreads/include/pthread.h	466;"	d
_POSIX_THREAD_PRIO_INHERIT	3rdparty/pthreads/include/pthread.h	458;"	d
_POSIX_THREAD_PRIO_INHERIT	3rdparty/pthreads/include/pthread.h	459;"	d
_POSIX_THREAD_PRIO_PROTECT	3rdparty/pthreads/include/pthread.h	461;"	d
_POSIX_THREAD_PRIO_PROTECT	3rdparty/pthreads/include/pthread.h	462;"	d
_POSIX_THREAD_PROCESS_SHARED	3rdparty/pthreads/include/pthread.h	468;"	d
_POSIX_THREAD_PROCESS_SHARED	3rdparty/pthreads/include/pthread.h	469;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	3rdparty/pthreads/include/pthread.h	446;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	3rdparty/pthreads/include/pthread.h	447;"	d
_POSIX_THREAD_THREADS_MAX	3rdparty/pthreads/include/pthread.h	519;"	d
_POSIX_THREAD_THREADS_MAX	3rdparty/pthreads/include/pthread.h	520;"	d
_SCHED_H	3rdparty/pthreads/include/sched.h	40;"	d
_TIMESPEC_DEFINED	3rdparty/pthreads/include/pthread.h	319;"	d
_UNISTD_H	src/darkunistd.h	3;"	d
_USE_MATH_DEFINES	src/image.c	10;"	d	file:
_USE_MATH_DEFINES	src/utils.c	9;"	d	file:
_WINSOCK_DEPRECATED_NO_WARNINGS	src/http_stream.cpp	30;"	d	file:
_XOPEN_SOURCE	src/http_stream.cpp	1;"	d	file:
__CLEANUP_C	3rdparty/pthreads/include/pthread.h	74;"	d
__COMPAR_FN_T	src/detector.c	13;"	d	file:
__DATE__	src/dark_cuda.h	35;"	d
__FILE__	src/dark_cuda.h	51;"	d
__FUNCTION__	src/dark_cuda.h	43;"	d
__GETOPT_H__	src/getopt.h	60;"	d
__GETOPT_LONG_H__	src/getopt.h	182;"	d
__LINE__	src/dark_cuda.h	47;"	d
__TIME__	src/dark_cuda.h	39;"	d
__anon11::hs	3rdparty/stb/include/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon11
__anon11::line0	3rdparty/stb/include/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon11
__anon11::line1	3rdparty/stb/include/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon11
__anon11::resample	3rdparty/stb/include/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon11
__anon11::vs	3rdparty/stb/include/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon11
__anon11::w_lores	3rdparty/stb/include/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon11
__anon11::ypos	3rdparty/stb/include/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon11
__anon11::ystep	3rdparty/stb/include/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon11
__anon12::fast	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon12
__anon12::firstcode	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon12
__anon12::firstsymbol	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon12
__anon12::maxcode	3rdparty/stb/include/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon12
__anon12::size	3rdparty/stb/include/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon12
__anon12::value	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon12
__anon13::code_buffer	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon13
__anon13::num_bits	3rdparty/stb/include/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon13
__anon13::z_distance	3rdparty/stb/include/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon13
__anon13::z_expandable	3rdparty/stb/include/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon13
__anon13::z_length	3rdparty/stb/include/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon13
__anon13::zbuffer	3rdparty/stb/include/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13
__anon13::zbuffer_end	3rdparty/stb/include/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13
__anon13::zout	3rdparty/stb/include/stb_image.h	/^   char *zout;$/;"	m	struct:__anon13
__anon13::zout_end	3rdparty/stb/include/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon13
__anon13::zout_start	3rdparty/stb/include/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon13
__anon14::length	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon14
__anon14::type	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon14
__anon15::depth	3rdparty/stb/include/stb_image.h	/^   int depth;$/;"	m	struct:__anon15
__anon15::expanded	3rdparty/stb/include/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
__anon15::idata	3rdparty/stb/include/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
__anon15::out	3rdparty/stb/include/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
__anon15::s	3rdparty/stb/include/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon15
__anon17::all_a	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
__anon17::bpp	3rdparty/stb/include/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
__anon17::hsz	3rdparty/stb/include/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
__anon17::ma	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
__anon17::mb	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
__anon17::mg	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
__anon17::mr	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
__anon17::offset	3rdparty/stb/include/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
__anon18::channel	3rdparty/stb/include/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
__anon18::size	3rdparty/stb/include/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
__anon18::type	3rdparty/stb/include/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
__anon19::first	3rdparty/stb/include/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon19
__anon19::prefix	3rdparty/stb/include/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon19
__anon19::suffix	3rdparty/stb/include/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon19
__anon1::context	3rdparty/stb/include/stb_image_write.h	/^   void *context;$/;"	m	struct:__anon1
__anon1::func	3rdparty/stb/include/stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon1
__anon20::bgindex	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
__anon20::codes	3rdparty/stb/include/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon20
__anon20::color_table	3rdparty/stb/include/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon20
__anon20::cur_x	3rdparty/stb/include/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon20
__anon20::cur_y	3rdparty/stb/include/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon20
__anon20::delay	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
__anon20::eflags	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
__anon20::flags	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
__anon20::h	3rdparty/stb/include/stb_image.h	/^   int w,h;$/;"	m	struct:__anon20
__anon20::lflags	3rdparty/stb/include/stb_image.h	/^   int lflags;$/;"	m	struct:__anon20
__anon20::line_size	3rdparty/stb/include/stb_image.h	/^   int line_size;$/;"	m	struct:__anon20
__anon20::lpal	3rdparty/stb/include/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon20
__anon20::max_x	3rdparty/stb/include/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon20
__anon20::max_y	3rdparty/stb/include/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon20
__anon20::old_out	3rdparty/stb/include/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon20
__anon20::out	3rdparty/stb/include/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon20
__anon20::pal	3rdparty/stb/include/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon20
__anon20::parse	3rdparty/stb/include/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon20
__anon20::ratio	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
__anon20::start_x	3rdparty/stb/include/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon20
__anon20::start_y	3rdparty/stb/include/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon20
__anon20::step	3rdparty/stb/include/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon20
__anon20::transparent	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
__anon20::w	3rdparty/stb/include/stb_image.h	/^   int w,h;$/;"	m	struct:__anon20
__anon22::p	3rdparty/pthreads/include/pthread.h	/^    void * p;                   \/* Pointer to actual object *\/$/;"	m	struct:__anon22
__anon22::x	3rdparty/pthreads/include/pthread.h	/^    unsigned int x;             \/* Extra information - reuse count etc *\/$/;"	m	struct:__anon22
__anon26::x	src/rnn_vid.c	/^    float *x;$/;"	m	struct:__anon26	file:
__anon26::y	src/rnn_vid.c	/^    float *y;$/;"	m	struct:__anon26	file:
__anon27::class_id	src/compare.c	/^    int class_id;$/;"	m	struct:__anon27	file:
__anon27::classes	src/compare.c	/^    int classes;$/;"	m	struct:__anon27	file:
__anon27::elo	src/compare.c	/^    float elo;$/;"	m	struct:__anon27	file:
__anon27::elos	src/compare.c	/^    float *elos;$/;"	m	struct:__anon27	file:
__anon27::filename	src/compare.c	/^    char *filename;$/;"	m	struct:__anon27	file:
__anon27::net	src/compare.c	/^    network net;$/;"	m	struct:__anon27	file:
__anon28::class_id	src/box.c	/^    int class_id;$/;"	m	struct:__anon28	file:
__anon28::index	src/box.c	/^    int index;$/;"	m	struct:__anon28	file:
__anon28::probs	src/box.c	/^    float **probs;$/;"	m	struct:__anon28	file:
__anon29::data	src/go.c	/^    char **data;$/;"	m	struct:__anon29	file:
__anon29::n	src/go.c	/^    int n;$/;"	m	struct:__anon29	file:
__anon30::options	src/parser.c	/^    list *options;$/;"	m	struct:__anon30	file:
__anon30::type	src/parser.c	/^    char *type;$/;"	m	struct:__anon30	file:
__anon31::key	src/option_list.h	/^    char *key;$/;"	m	struct:__anon31
__anon31::used	src/option_list.h	/^    int used;$/;"	m	struct:__anon31
__anon31::val	src/option_list.h	/^    char *val;$/;"	m	struct:__anon31
__anon32::assignments	src/matrix.h	/^    int *assignments;$/;"	m	struct:__anon32
__anon32::centers	src/matrix.h	/^    matrix centers;$/;"	m	struct:__anon32
__anon33::x	src/rnn.c	/^    float *x;$/;"	m	struct:__anon33	file:
__anon33::y	src/rnn.c	/^    float *y;$/;"	m	struct:__anon33	file:
__anon35::b	src/detector.c	/^    box b;$/;"	m	struct:__anon35	file:
__anon35::class_id	src/detector.c	/^    int class_id;$/;"	m	struct:__anon35	file:
__anon35::image_index	src/detector.c	/^    int image_index;$/;"	m	struct:__anon35	file:
__anon35::p	src/detector.c	/^    float p;$/;"	m	struct:__anon35	file:
__anon35::truth_flag	src/detector.c	/^    int truth_flag;$/;"	m	struct:__anon35	file:
__anon35::unique_truth_index	src/detector.c	/^    int unique_truth_index;$/;"	m	struct:__anon35	file:
__anon36::h	src/detector.c	/^    float w, h;$/;"	m	struct:__anon36	file:
__anon36::w	src/detector.c	/^    float w, h;$/;"	m	struct:__anon36	file:
__anon37::dh	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon37
__anon37::dw	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon37
__anon37::dx	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon37
__anon37::dy	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon37
__anon38::d	src/network_kernels.cu	/^    data d;$/;"	m	struct:__anon38	file:
__anon38::err	src/network_kernels.cu	/^    float *err;$/;"	m	struct:__anon38	file:
__anon38::net	src/network_kernels.cu	/^    network net;$/;"	m	struct:__anon38	file:
__anon39::j	src/network_kernels.cu	/^    int j;$/;"	m	struct:__anon39	file:
__anon39::n	src/network_kernels.cu	/^    int n;$/;"	m	struct:__anon39	file:
__anon39::nets	src/network_kernels.cu	/^    network *nets;$/;"	m	struct:__anon39	file:
__anon3::eof	3rdparty/stb/include/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon3
__anon3::read	3rdparty/stb/include/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon3
__anon3::skip	3rdparty/stb/include/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon3
__anon41::assignments	scripts/kmeansiou.c	/^    int *assignments;$/;"	m	struct:__anon41	file:
__anon41::centers	scripts/kmeansiou.c	/^    matrix centers;$/;"	m	struct:__anon41	file:
__anon4::buffer_start	3rdparty/stb/include/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon4
__anon4::buflen	3rdparty/stb/include/stb_image.h	/^   int buflen;$/;"	m	struct:__anon4
__anon4::img_buffer	3rdparty/stb/include/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon4
__anon4::img_buffer_end	3rdparty/stb/include/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon4
__anon4::img_buffer_original	3rdparty/stb/include/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon4
__anon4::img_buffer_original_end	3rdparty/stb/include/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon4
__anon4::img_n	3rdparty/stb/include/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon4
__anon4::img_out_n	3rdparty/stb/include/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon4
__anon4::img_x	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon4
__anon4::img_y	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon4
__anon4::io	3rdparty/stb/include/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon4
__anon4::io_user_data	3rdparty/stb/include/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon4
__anon4::read_from_callbacks	3rdparty/stb/include/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon4
__anon6::bits_per_channel	3rdparty/stb/include/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon6
__anon6::channel_order	3rdparty/stb/include/stb_image.h	/^   int channel_order;$/;"	m	struct:__anon6
__anon6::num_channels	3rdparty/stb/include/stb_image.h	/^   int num_channels;$/;"	m	struct:__anon6
__anon8::code	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon8
__anon8::delta	3rdparty/stb/include/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon8
__anon8::fast	3rdparty/stb/include/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon8
__anon8::maxcode	3rdparty/stb/include/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon8
__anon8::size	3rdparty/stb/include/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon8
__anon8::values	3rdparty/stb/include/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon8
__anon9::YCbCr_to_RGB_kernel	3rdparty/stb/include/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon9
__anon9::__anon10::coeff	3rdparty/stb/include/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::coeff_h	3rdparty/stb/include/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::coeff_w	3rdparty/stb/include/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::data	3rdparty/stb/include/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::dc_pred	3rdparty/stb/include/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::h	3rdparty/stb/include/stb_image.h	/^      int h,v;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::h2	3rdparty/stb/include/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::ha	3rdparty/stb/include/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::hd	3rdparty/stb/include/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::id	3rdparty/stb/include/stb_image.h	/^      int id;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::linebuf	3rdparty/stb/include/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::raw_coeff	3rdparty/stb/include/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::raw_data	3rdparty/stb/include/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::tq	3rdparty/stb/include/stb_image.h	/^      int tq;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::v	3rdparty/stb/include/stb_image.h	/^      int h,v;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::w2	3rdparty/stb/include/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::x	3rdparty/stb/include/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10
__anon9::__anon10::y	3rdparty/stb/include/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10
__anon9::app14_color_transform	3rdparty/stb/include/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon9
__anon9::code_bits	3rdparty/stb/include/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon9
__anon9::code_buffer	3rdparty/stb/include/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon9
__anon9::dequant	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon9
__anon9::eob_run	3rdparty/stb/include/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon9
__anon9::fast_ac	3rdparty/stb/include/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon9
__anon9::huff_ac	3rdparty/stb/include/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon9
__anon9::huff_dc	3rdparty/stb/include/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon9
__anon9::idct_block_kernel	3rdparty/stb/include/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon9
__anon9::img_comp	3rdparty/stb/include/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon9	typeref:struct:__anon9::__anon10
__anon9::img_h_max	3rdparty/stb/include/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9
__anon9::img_mcu_h	3rdparty/stb/include/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9
__anon9::img_mcu_w	3rdparty/stb/include/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9
__anon9::img_mcu_x	3rdparty/stb/include/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9
__anon9::img_mcu_y	3rdparty/stb/include/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9
__anon9::img_v_max	3rdparty/stb/include/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9
__anon9::jfif	3rdparty/stb/include/stb_image.h	/^   int            jfif;$/;"	m	struct:__anon9
__anon9::marker	3rdparty/stb/include/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon9
__anon9::nomore	3rdparty/stb/include/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon9
__anon9::order	3rdparty/stb/include/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon9
__anon9::progressive	3rdparty/stb/include/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon9
__anon9::resample_row_hv_2_kernel	3rdparty/stb/include/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon9
__anon9::restart_interval	3rdparty/stb/include/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon9
__anon9::rgb	3rdparty/stb/include/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon9
__anon9::s	3rdparty/stb/include/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon9
__anon9::scan_n	3rdparty/stb/include/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon9
__anon9::spec_end	3rdparty/stb/include/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon9
__anon9::spec_start	3rdparty/stb/include/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon9
__anon9::succ_high	3rdparty/stb/include/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon9
__anon9::succ_low	3rdparty/stb/include/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon9
__anon9::todo	3rdparty/stb/include/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon9
__ballot_custom	src/im2col_kernels.cu	/^__device__ inline uint32_t __ballot_custom(T val) {$/;"	f
__compar_fn_t	src/detector.c	/^typedef int (*__compar_fn_t)(const void*, const void*);$/;"	t	file:
__except	3rdparty/pthreads/include/pthread.h	1297;"	d
__progname	src/getopt.h	97;"	d
__shfl_custom	src/im2col_kernels.cu	/^__device__ inline T1 __shfl_custom(T1 val, T2 lane) {$/;"	f
_cfg_filename	include/yolo_v2_class.hpp	/^    std::string _cfg_filename, _weight_filename;$/;"	m	class:Detector
_dn_castu32_f32	src/gemm.c	/^static inline float _dn_castu32_f32(uint32_t a) {$/;"	f	file:
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("bbox", BOX),$/;"	v	class:DETECTION
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("classes", c_int),$/;"	v	class:METADATA
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("num", c_int),$/;"	v	class:DETNUMPAIR
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("w", c_int),$/;"	v	class:IMAGE
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("x", c_float),$/;"	v	class:BOX
_fields_	darknet.py	/^    _fields_ = [("bbox", BOX),$/;"	v	class:DETECTION
_fields_	darknet.py	/^    _fields_ = [("classes", c_int),$/;"	v	class:METADATA
_fields_	darknet.py	/^    _fields_ = [("num", c_int),$/;"	v	class:DETNUMPAIR
_fields_	darknet.py	/^    _fields_ = [("w", c_int),$/;"	v	class:IMAGE
_fields_	darknet.py	/^    _fields_ = [("x", c_float),$/;"	v	class:BOX
_ftime	3rdparty/pthreads/include/pthread.h	1264;"	d
_init_once	src/http_stream.cpp	/^} _init_once;$/;"	v	typeref:struct:_INIT_W32DATA
_mm256_extract_epi32	src/gemm.c	/^static inline __int32 _mm256_extract_epi32(__m256i a, const int index) {$/;"	f	file:
_mm256_extract_epi64	src/gemm.c	/^static inline __int32 _mm256_extract_epi64(__m256i a, const int index) {$/;"	f	file:
_mm256_extract_float32	src/gemm.c	/^static inline float _mm256_extract_float32(__m256 a, const int index) {$/;"	f	file:
_timeb	3rdparty/pthreads/include/pthread.h	1265;"	d
_vwarnx	src/getopt.c	/^_vwarnx(const char* fmt, va_list ap)$/;"	f	file:
_weight_filename	include/yolo_v2_class.hpp	/^    std::string _cfg_filename, _weight_filename;$/;"	m	class:Detector
_write	src/http_stream.cpp	/^    int _write(int sock, char const*const s, int len)$/;"	f	class:JSON_sender	file:
_write	src/http_stream.cpp	/^    int _write(int sock, char const*const s, int len)$/;"	f	class:MJPG_sender	file:
a_avg_gpu	include/darknet.h	/^    float *a_avg_gpu;$/;"	m	struct:layer
a_ptr	src/yolo_console_dll.cpp	/^    std::atomic<T *> a_ptr;$/;"	m	class:send_one_replaceable_object_t	file:
abs_mean	src/nightmare.c	/^float abs_mean(float *x, int n)$/;"	f
absolute	include/darknet.h	/^    int absolute;$/;"	m	struct:layer
access	src/darkunistd.h	27;"	d
accumulate_kernel	src/blas_kernels.cu	/^__global__ void accumulate_kernel(float *x, int n, int groups, float *sum)$/;"	f
activate	src/activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_and_mult	src/blas_kernels.cu	/^extern "C" void activate_and_mult(float *a1, float *a2, size_t size, ACTIVATION a, float *dst)$/;"	f
activate_and_mult_kernel	src/blas_kernels.cu	/^__global__ void activate_and_mult_kernel(float *a1, float *a2, size_t size, ACTIVATION a, float *dst)$/;"	f
activate_array	src/activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activate_array_cpu_custom	src/gemm.c	/^void activate_array_cpu_custom(float *x, const int n, const ACTIVATION a)$/;"	f
activate_array_gelu_kernel	src/activation_kernels.cu	/^__global__ void activate_array_gelu_kernel(float *x, int n)$/;"	f
activate_array_hard_mish	src/activations.c	/^void activate_array_hard_mish(float *x, const int n, float * activation_input, float * output)$/;"	f
activate_array_hard_mish_kernel	src/activation_kernels.cu	/^__global__ void activate_array_hard_mish_kernel(float *x, int n, float *activation_input, float *output_gpu)$/;"	f
activate_array_hard_mish_ongpu	src/activation_kernels.cu	/^extern "C" void activate_array_hard_mish_ongpu(float *x, int n, float *activation_input_gpu, float *output_gpu)$/;"	f
activate_array_hardtan_kernel	src/activation_kernels.cu	/^__global__ void activate_array_hardtan_kernel(float *x, int n)$/;"	f
activate_array_kernel	src/activation_kernels.cu	/^__global__ void activate_array_kernel(float *x, int n, ACTIVATION a)$/;"	f
activate_array_leaky_kernel	src/activation_kernels.cu	/^__global__ void activate_array_leaky_kernel(float *x, int n)$/;"	f
activate_array_logistic_kernel	src/activation_kernels.cu	/^__global__ void activate_array_logistic_kernel(float *x, int n)$/;"	f
activate_array_mish	src/activations.c	/^void activate_array_mish(float *x, const int n, float * activation_input, float * output)$/;"	f
activate_array_mish_kernel	src/activation_kernels.cu	/^__global__ void activate_array_mish_kernel(float *x, int n, float *activation_input, float *output_gpu)$/;"	f
activate_array_mish_ongpu	src/activation_kernels.cu	/^extern "C" void activate_array_mish_ongpu(float *x, int n, float *activation_input_gpu, float *output_gpu)$/;"	f
activate_array_normalize_channels	src/activations.c	/^void activate_array_normalize_channels(float *x, const int n, int batch, int channels, int wh_step, float *output)$/;"	f
activate_array_normalize_channels_kernel	src/activation_kernels.cu	/^__global__ void activate_array_normalize_channels_kernel(float *x, int size, int batch, int channels, int wh_step, float *output_gpu)$/;"	f
activate_array_normalize_channels_ongpu	src/activation_kernels.cu	/^extern "C" void activate_array_normalize_channels_ongpu(float *x, int n, int batch, int channels, int wh_step, float *output_gpu)$/;"	f
activate_array_normalize_channels_softmax	src/activations.c	/^void activate_array_normalize_channels_softmax(float *x, const int n, int batch, int channels, int wh_step, float *output, int use_max_val)$/;"	f
activate_array_normalize_channels_softmax_kernel	src/activation_kernels.cu	/^__global__ void activate_array_normalize_channels_softmax_kernel(float *x, int size, int batch, int channels, int wh_step, float *output_gpu, int use_max_val)$/;"	f
activate_array_normalize_channels_softmax_ongpu	src/activation_kernels.cu	/^extern "C" void activate_array_normalize_channels_softmax_ongpu(float *x, int n, int batch, int channels, int wh_step, float *output_gpu, int use_max_val)$/;"	f
activate_array_ongpu	src/activation_kernels.cu	/^extern "C" void activate_array_ongpu(float *x, int n, ACTIVATION a)$/;"	f
activate_array_relu6_kernel	src/activation_kernels.cu	/^__global__ void activate_array_relu6_kernel(float *x, int n)$/;"	f
activate_array_relu_kernel	src/activation_kernels.cu	/^__global__ void activate_array_relu_kernel(float *x, int n)$/;"	f
activate_array_selu_kernel	src/activation_kernels.cu	/^__global__ void activate_array_selu_kernel(float *x, int n)$/;"	f
activate_array_swish	src/activations.c	/^void activate_array_swish(float *x, const int n, float * output_sigmoid, float * output)$/;"	f
activate_array_swish_kernel	src/activation_kernels.cu	/^__global__ void activate_array_swish_kernel(float *x, int n, float *output_sigmoid_gpu, float *output_gpu)$/;"	f
activate_array_swish_ongpu	src/activation_kernels.cu	/^extern "C" void activate_array_swish_ongpu(float *x, int n, float *output_sigmoid_gpu, float *output_gpu)$/;"	f
activate_array_tanh_kernel	src/activation_kernels.cu	/^__global__ void activate_array_tanh_kernel(float *x, int n)$/;"	f
activate_kernel	src/activation_kernels.cu	/^__device__ float activate_kernel(float x, ACTIVATION a)$/;"	f
activation	include/darknet.h	/^    ACTIVATION activation;$/;"	m	struct:layer
activation_input	include/darknet.h	/^    float * activation_input;$/;"	m	struct:layer
activation_input_gpu	include/darknet.h	/^    float * activation_input_gpu;$/;"	m	struct:layer
activation_kernels.cu	src/activation_kernels.cu	1;"	F
activation_layer.c	src/activation_layer.c	1;"	F
activation_layer.h	src/activation_layer.h	1;"	F
activations.c	src/activations.c	1;"	F
activations.h	src/activations.h	1;"	F
adam	include/darknet.h	/^    int adam;$/;"	m	struct:layer
adam	include/darknet.h	/^    int adam;$/;"	m	struct:network
adam	include/darknet.h	/^    int adam;$/;"	m	struct:update_args
adam_gpu	src/blas_kernels.cu	/^extern "C" void adam_gpu(int n, float *x, float *m, float *v, float B1, float B2, float rate, float eps, int t)$/;"	f
adam_kernel	src/blas_kernels.cu	/^__global__ void adam_kernel(int N, float *x, float *m, float *v, float B1, float B2, float rate, float eps, int t)$/;"	f
adam_update_gpu	src/blas_kernels.cu	/^extern "C" void adam_update_gpu(float *w, float *d, float *m, float *v, float B1, float B2, float eps, float decay, float rate, int n, int batch, int t)$/;"	f
add_3_arrays_activate	src/blas_kernels.cu	/^extern "C" void add_3_arrays_activate(float *a1, float *a2, float *a3, size_t size, ACTIVATION a, float *dst)$/;"	f
add_3_arrays_activate_kernel	src/blas_kernels.cu	/^__global__ void add_3_arrays_activate_kernel(float *a1, float *a2, float *a3, size_t size, ACTIVATION a, float *dst)$/;"	f
add_bias	src/convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_bias_gpu	src/blas_kernels.cu	/^void add_bias_gpu(float *output, float *biases, int batch, int filters, int spatial)$/;"	f
add_bias_kernel	src/blas_kernels.cu	/^__global__ void add_bias_kernel(float *output, float *biases, int batch, int filters, int spatial, int current_size)$/;"	f
add_pixel	src/image.c	/^static void add_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
adversarial	include/darknet.h	/^    int adversarial;$/;"	m	struct:network
adversarial_lr	include/darknet.h	/^    float adversarial_lr;$/;"	m	struct:network
align_bit_weights	include/darknet.h	/^    char *align_bit_weights;$/;"	m	struct:layer
align_bit_weights_gpu	include/darknet.h	/^    char *align_bit_weights_gpu;$/;"	m	struct:layer
align_bit_weights_size	include/darknet.h	/^    int align_bit_weights_size;$/;"	m	struct:layer
align_workspace_gpu	include/darknet.h	/^    float *align_workspace_gpu;$/;"	m	struct:layer
align_workspace_size	include/darknet.h	/^    int align_workspace_size;$/;"	m	struct:layer
all_a	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
alpha	include/darknet.h	/^    float alpha;$/;"	m	struct:layer
alphanum_to_int	src/utils.c	/^int alphanum_to_int(char c)$/;"	f
ambig	src/getopt.h	/^static const char ambig[] = "ambiguous option -- %.*s";$/;"	v
anchors_comparator	src/detector.c	/^int anchors_comparator(const void *pa, const void *pb)$/;"	f
anchors_data_comparator	src/detector.c	/^int anchors_data_comparator(const float **pa, const float **pb)$/;"	f
anchors_t	src/detector.c	/^} anchors_t;$/;"	t	typeref:struct:__anon36	file:
angle	include/darknet.h	/^    float angle;$/;"	m	struct:layer
angle	include/darknet.h	/^    float angle;$/;"	m	struct:load_args
angle	include/darknet.h	/^    float angle;$/;"	m	struct:network
antialiasing	include/darknet.h	/^    int antialiasing;$/;"	m	struct:layer
app14_color_transform	3rdparty/stb/include/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon9
append	src/httplib.h	/^  void append(char c) {$/;"	f	class:httplib::detail::stream_line_reader
arg	3rdparty/pthreads/include/pthread.h	/^  void *arg;$/;"	m	struct:ptw32_cleanup_t
args	build/darknet/x64/darknet_video.py	/^    args = parser()$/;"	v
args	build/darknet/x64/reval_voc_py3.py	/^    args = parse_args()$/;"	v
args	darknet_video.py	/^    args = parser()$/;"	v
args	scripts/log_parser/log_parser.py	/^    args = parse_args()$/;"	v
args	scripts/reval_voc.py	/^    args = parse_args()$/;"	v
args	scripts/reval_voc_py3.py	/^    args = parse_args()$/;"	v
args_swap	src/data.c	/^static load_args * args_swap = NULL;$/;"	v	file:
art.c	src/art.c	1;"	F
asm_cpuid	src/gemm.c	/^void asm_cpuid(uint32_t* abcd, uint32_t eax)$/;"	f
aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:load_args
aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:network
assignments	scripts/kmeansiou.c	/^    int *assignments;$/;"	m	struct:__anon41	file:
assignments	src/matrix.h	/^    int *assignments;$/;"	m	struct:__anon32
assisted_activation2_gpu	src/convolutional_kernels.cu	/^void assisted_activation2_gpu(float alpha, float *output, float *gt_gpu, float *a_avg_gpu, int size, int channels, int batches)$/;"	f
assisted_activation2_kernel	src/convolutional_kernels.cu	/^__global__ void assisted_activation2_kernel(float alpha, float *output, float *gt_gpu, float *a_avg_gpu, int size, int channels, int batches)$/;"	f
assisted_activation_gpu	src/convolutional_kernels.cu	/^void assisted_activation_gpu(float alpha, float *output, float *gt_gpu, float *a_avg_gpu, int size, int channels, int batches)$/;"	f
assisted_activation_kernel	src/convolutional_kernels.cu	/^__global__ void assisted_activation_kernel(float alpha, float *output, float *gt_gpu, float *a_avg_gpu, int size, int channels, int batches)$/;"	f
assisted_excitation	include/darknet.h	/^    int assisted_excitation;$/;"	m	struct:layer
assisted_excitation_forward	src/convolutional_layer.c	/^void assisted_excitation_forward(convolutional_layer l, network_state state)$/;"	f
assisted_excitation_forward_gpu	src/convolutional_kernels.cu	/^void assisted_excitation_forward_gpu(convolutional_layer l, network_state state)$/;"	f
attention	include/darknet.h	/^    int attention;$/;"	m	struct:network
augment_speed	include/darknet.h	/^    int augment_speed;$/;"	m	struct:load_args
augment_speed	include/darknet.h	/^    int augment_speed;$/;"	m	struct:network
average	src/darknet.c	/^void average(int argc, char *argv[])$/;"	f
averages_gaussian_yolo_deltas	src/gaussian_yolo_layer.c	/^void averages_gaussian_yolo_deltas(int class_index, int box_index, int stride, int classes, float *delta)$/;"	f
averages_yolo_deltas	src/yolo_layer.c	/^void averages_yolo_deltas(int class_index, int box_index, int stride, int classes, float *delta)$/;"	f
avg	src/yolo_v2_class.cpp	/^    float *avg;$/;"	m	struct:detector_gpu_t	file:
avg_IOU	build/darknet/x64/gen_anchors.py	/^def avg_IOU(X,centroids):$/;"	f
avg_IOU	scripts/gen_anchors.py	/^def avg_IOU(X,centroids):$/;"	f
avg_flipped_yolo	src/yolo_layer.c	/^void avg_flipped_yolo(layer l)$/;"	f
avg_frames	src/demo.c	/^static int avg_frames;$/;"	v	file:
avgpool	include/darknet.h	/^    int avgpool;$/;"	m	struct:layer
avgpool_layer	src/avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
avgpool_layer.c	src/avgpool_layer.c	1;"	F
avgpool_layer.h	src/avgpool_layer.h	1;"	F
avgpool_layer_kernels.cu	src/avgpool_layer_kernels.cu	1;"	F
axpy_cpu	src/blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
axpy_kernel	src/blas_kernels.cu	/^__global__ void axpy_kernel(int N, float ALPHA, float *X, int OFFX, int INCX,  float *Y, int OFFY, int INCY)$/;"	f
axpy_ongpu	src/blas_kernels.cu	/^extern "C" void axpy_ongpu(int N, float ALPHA, float * X, int INCX, float * Y, int INCY)$/;"	f
axpy_ongpu_offset	src/blas_kernels.cu	/^extern "C" void axpy_ongpu_offset(int N, float ALPHA, float * X, int OFFX, int INCX, float * Y, int OFFY, int INCY)$/;"	f
b	src/detector.c	/^    box b;$/;"	m	struct:__anon35	file:
b	src/yolo_layer.c	/^    int b;$/;"	m	struct:train_yolo_args	file:
back	src/list.h	/^    node *back;$/;"	m	struct:list
background	include/darknet.h	/^    int background;$/;"	m	struct:layer
background	include/darknet.h	/^    int background;$/;"	m	struct:load_args
backward	include/darknet.h	/^    void(*backward)  (struct layer, struct network_state);$/;"	m	struct:layer
backward_activation_layer	src/activation_layer.c	/^void backward_activation_layer(layer l, network_state state)$/;"	f
backward_activation_layer_gpu	src/activation_layer.c	/^void backward_activation_layer_gpu(layer l, network_state state)$/;"	f
backward_avgpool_layer	src/avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
backward_avgpool_layer_gpu	src/avgpool_layer_kernels.cu	/^extern "C" void backward_avgpool_layer_gpu(avgpool_layer layer, network_state state)$/;"	f
backward_avgpool_layer_kernel	src/avgpool_layer_kernels.cu	/^__global__ void backward_avgpool_layer_kernel(int n, int w, int h, int c, float *in_delta, float *out_delta)$/;"	f
backward_batchnorm_layer	src/batchnorm_layer.c	/^void backward_batchnorm_layer(const layer l, network_state state)$/;"	f
backward_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
backward_bias	src/convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_bias_gpu	src/blas_kernels.cu	/^void backward_bias_gpu(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_bias_kernel	src/blas_kernels.cu	/^__global__ void backward_bias_kernel(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	src/connected_layer.c	/^void backward_connected_layer(connected_layer l, network_state state)$/;"	f
backward_connected_layer_gpu	src/connected_layer.c	/^void backward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
backward_contrastive_layer	src/softmax_layer.c	/^void backward_contrastive_layer(contrastive_layer l, network_state state)$/;"	f
backward_contrastive_layer_gpu	src/softmax_layer.c	/^void backward_contrastive_layer_gpu(contrastive_layer layer, network_state state)$/;"	f
backward_conv_lstm_layer	src/conv_lstm_layer.c	/^void backward_conv_lstm_layer(layer l, network_state state)$/;"	f
backward_conv_lstm_layer_gpu	src/conv_lstm_layer.c	/^void backward_conv_lstm_layer_gpu(layer l, network_state state)$/;"	f
backward_convolutional_layer	src/convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
backward_convolutional_layer_gpu	src/convolutional_kernels.cu	/^void backward_convolutional_layer_gpu(convolutional_layer l, network_state state)$/;"	f
backward_cost_layer	src/cost_layer.c	/^void backward_cost_layer(const cost_layer l, network_state state)$/;"	f
backward_cost_layer_gpu	src/cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network_state state)$/;"	f
backward_crnn_layer	src/crnn_layer.c	/^void backward_crnn_layer(layer l, network_state state)$/;"	f
backward_crnn_layer_gpu	src/crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network_state state)$/;"	f
backward_crop_layer	src/crop_layer.c	/^void backward_crop_layer(const crop_layer l, network_state state){}$/;"	f
backward_crop_layer_gpu	src/crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network_state state){}$/;"	f
backward_deconvolutional_layer	src/deconvolutional_layer.c	/^void backward_deconvolutional_layer(deconvolutional_layer l, network_state state)$/;"	f
backward_deconvolutional_layer_gpu	src/deconvolutional_kernels.cu	/^extern "C" void backward_deconvolutional_layer_gpu(deconvolutional_layer layer, network_state state)$/;"	f
backward_detection_layer	src/detection_layer.c	/^void backward_detection_layer(const detection_layer l, network_state state)$/;"	f
backward_detection_layer_gpu	src/detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network_state state)$/;"	f
backward_dropblock_kernel	src/dropout_layer_kernels.cu	/^__global__ void backward_dropblock_kernel(float *pass, float *delta, int size)$/;"	f
backward_dropout_layer	src/dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network_state state)$/;"	f
backward_dropout_layer_gpu	src/dropout_layer_kernels.cu	/^void backward_dropout_layer_gpu(dropout_layer l, network_state state)$/;"	f
backward_gaussian_yolo_layer	src/gaussian_yolo_layer.c	/^void backward_gaussian_yolo_layer(const layer l, network_state state)$/;"	f
backward_gaussian_yolo_layer_gpu	src/gaussian_yolo_layer.c	/^void backward_gaussian_yolo_layer_gpu(const layer l, network_state state)$/;"	f
backward_gpu	include/darknet.h	/^    void(*backward_gpu)  (struct layer, struct network_state);$/;"	m	struct:layer
backward_gru_layer	src/gru_layer.c	/^void backward_gru_layer(layer l, network_state state)$/;"	f
backward_gru_layer_gpu	src/gru_layer.c	/^void backward_gru_layer_gpu(layer l, network_state state)$/;"	f
backward_history_layer	src/conv_lstm_layer.c	/^void backward_history_layer(layer l, network_state state)$/;"	f
backward_history_layer_gpu	src/conv_lstm_layer.c	/^void backward_history_layer_gpu(const layer l, network_state state)$/;"	f
backward_implicit_gpu	src/blas_kernels.cu	/^extern "C" void backward_implicit_gpu(int batch, int nweights, float *weight_updates_gpu, float *delta_gpu)$/;"	f
backward_implicit_kernel	src/blas_kernels.cu	/^__global__ void backward_implicit_kernel(int size, int batch, int nweights, float *weight_updates_gpu, float *delta_gpu)$/;"	f
backward_implicit_layer	src/representation_layer.c	/^void backward_implicit_layer(const layer l, network_state state)$/;"	f
backward_implicit_layer_gpu	src/representation_layer.c	/^void backward_implicit_layer_gpu(const layer l, network_state state)$/;"	f
backward_local_avgpool_layer	src/maxpool_layer.c	/^void backward_local_avgpool_layer(const maxpool_layer l, network_state state)$/;"	f
backward_local_avgpool_layer_gpu	src/maxpool_layer_kernels.cu	/^extern "C" void backward_local_avgpool_layer_gpu(maxpool_layer layer, network_state state)$/;"	f
backward_local_avgpool_layer_kernel	src/maxpool_layer_kernels.cu	/^__global__ void backward_local_avgpool_layer_kernel(int n, int in_h, int in_w, int in_c, int stride_x, int stride_y, int size, int pad, float *delta, float *prev_delta)$/;"	f
backward_local_layer	src/local_layer.c	/^void backward_local_layer(local_layer l, network_state state)$/;"	f
backward_local_layer_gpu	src/local_layer.c	/^void backward_local_layer_gpu(local_layer l, network_state state)$/;"	f
backward_lstm_layer	src/lstm_layer.c	/^void backward_lstm_layer(layer l, network_state state)$/;"	f
backward_lstm_layer_gpu	src/lstm_layer.c	/^void backward_lstm_layer_gpu(layer l, network_state state)$/;"	f
backward_maxpool_depth_layer_kernel	src/maxpool_layer_kernels.cu	/^__global__ void backward_maxpool_depth_layer_kernel(int n, int w, int h, int c, int batch, float *delta, float *prev_delta, int *indexes)$/;"	f
backward_maxpool_layer	src/maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
backward_maxpool_layer_gpu	src/maxpool_layer_kernels.cu	/^extern "C" void backward_maxpool_layer_gpu(maxpool_layer layer, network_state state)$/;"	f
backward_maxpool_layer_kernel	src/maxpool_layer_kernels.cu	/^__global__ void backward_maxpool_layer_kernel(int n, int in_h, int in_w, int in_c, int stride_x, int stride_y, int size, int pad, float *delta, float *prev_delta, int *indexes)$/;"	f
backward_network	src/network.c	/^void backward_network(network net, network_state state)$/;"	f
backward_network_gpu	src/network_kernels.cu	/^void backward_network_gpu(network net, network_state state)$/;"	f
backward_normalization_layer	src/normalization_layer.c	/^void backward_normalization_layer(const layer layer, network_state state)$/;"	f
backward_normalization_layer_gpu	src/normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
backward_region_layer	src/region_layer.c	/^void backward_region_layer(const region_layer l, network_state state)$/;"	f
backward_region_layer_gpu	src/region_layer.c	/^void backward_region_layer_gpu(region_layer l, network_state state)$/;"	f
backward_reorg_layer	src/reorg_layer.c	/^void backward_reorg_layer(const layer l, network_state state)$/;"	f
backward_reorg_layer_gpu	src/reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network_state state)$/;"	f
backward_reorg_old_layer	src/reorg_old_layer.c	/^void backward_reorg_old_layer(const layer l, network_state state)$/;"	f
backward_reorg_old_layer_gpu	src/reorg_old_layer.c	/^void backward_reorg_old_layer_gpu(layer l, network_state state)$/;"	f
backward_rnn_layer	src/rnn_layer.c	/^void backward_rnn_layer(layer l, network_state state)$/;"	f
backward_rnn_layer_gpu	src/rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network_state state)$/;"	f
backward_route_layer	src/route_layer.c	/^void backward_route_layer(const route_layer l, network_state state)$/;"	f
backward_route_layer_gpu	src/route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
backward_sam_gpu	src/blas_kernels.cu	/^extern "C" void backward_sam_gpu(float *in_w_h_c_delta, int size, int channel_size,$/;"	f
backward_sam_kernel	src/blas_kernels.cu	/^__global__ void backward_sam_kernel(float *in_w_h_c_delta, int size, int channel_size,$/;"	f
backward_sam_layer	src/sam_layer.c	/^void backward_sam_layer(const layer l, network_state state)$/;"	f
backward_sam_layer_gpu	src/sam_layer.c	/^void backward_sam_layer_gpu(const layer l, network_state state)$/;"	f
backward_scale_channels_gpu	src/blas_kernels.cu	/^extern "C" void backward_scale_channels_gpu(float *in_w_h_c_delta, int size, int channel_size, int batch_size, int scale_wh,$/;"	f
backward_scale_channels_kernel	src/blas_kernels.cu	/^__global__ void backward_scale_channels_kernel(float *in_w_h_c_delta, int size, int channel_size, int batch_size, int scale_wh,$/;"	f
backward_scale_channels_layer	src/scale_channels_layer.c	/^void backward_scale_channels_layer(const layer l, network_state state)$/;"	f
backward_scale_channels_layer_gpu	src/scale_channels_layer.c	/^void backward_scale_channels_layer_gpu(const layer l, network_state state)$/;"	f
backward_scale_cpu	src/batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_scale_gpu	src/blas_kernels.cu	/^void backward_scale_gpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_scale_kernel	src/blas_kernels.cu	/^__global__ void backward_scale_kernel(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	src/shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network_state state)$/;"	f
backward_shortcut_layer_gpu	src/shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
backward_shortcut_multilayer_cpu	src/blas.c	/^void backward_shortcut_multilayer_cpu(int size, int src_outputs, int batch, int n, int *outputs_of_layers,$/;"	f
backward_shortcut_multilayer_gpu	src/blas_kernels.cu	/^extern "C" void backward_shortcut_multilayer_gpu(int src_outputs, int batch, int n, int *outputs_of_layers_gpu,$/;"	f
backward_shortcut_multilayer_kernel	src/blas_kernels.cu	/^__global__ void backward_shortcut_multilayer_kernel(int size, int src_outputs, int batch, int n, int *outputs_of_layers_gpu,$/;"	f
backward_softmax_layer	src/softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network_state net)$/;"	f
backward_softmax_layer_gpu	src/softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network_state state)$/;"	f
backward_upsample_layer	src/upsample_layer.c	/^void backward_upsample_layer(const layer l, network_state state)$/;"	f
backward_upsample_layer_gpu	src/upsample_layer.c	/^void backward_upsample_layer_gpu(const layer l, network_state state)$/;"	f
backward_yolo_layer	src/yolo_layer.c	/^void backward_yolo_layer(const layer l, network_state state)$/;"	f
backward_yolo_layer_gpu	src/yolo_layer.c	/^void backward_yolo_layer_gpu(const layer l, network_state state)$/;"	f
backward_zero_nonmax_kernel	src/maxpool_layer_kernels.cu	/^__global__ void backward_zero_nonmax_kernel(int n, int *indexes, float *prev_delta)$/;"	f
badlabels_reject_threshold	include/darknet.h	/^    float *badlabels_reject_threshold;$/;"	m	struct:network
badlabels_rejection_percentage	include/darknet.h	/^    float badlabels_rejection_percentage;$/;"	m	struct:network
base64_encode	src/httplib.h	/^inline std::string base64_encode(const std::string &in) {$/;"	f	namespace:httplib::detail
base_dirs_	src/httplib.h	/^  std::vector<std::pair<std::string, std::string>> base_dirs_;$/;"	m	class:httplib::Server
basecfg	src/utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	include/darknet.h	/^    int batch;$/;"	m	struct:layer
batch	include/darknet.h	/^    int batch;$/;"	m	struct:network
batch	include/darknet.h	/^    int batch;$/;"	m	struct:update_args
batch	src/parser.c	/^    int batch;$/;"	m	struct:size_params	file:
batch_detection	darknet_images.py	/^def batch_detection(network, images, class_names, class_colors,$/;"	f
batch_detection_example	darknet_images.py	/^def batch_detection_example():$/;"	f
batch_normalize	include/darknet.h	/^    int batch_normalize;$/;"	m	struct:layer
batch_size	build/darknet/x64/darknet_video.py	/^            batch_size=1$/;"	v
batch_size	darknet_video.py	/^            batch_size=1$/;"	v
batches_cycle_mult	include/darknet.h	/^    int batches_cycle_mult;$/;"	m	struct:network
batches_per_cycle	include/darknet.h	/^    int batches_per_cycle;$/;"	m	struct:network
batchnorm_layer.c	src/batchnorm_layer.c	1;"	F
batchnorm_layer.h	src/batchnorm_layer.h	1;"	F
bbox	include/darknet.h	/^    box bbox;$/;"	m	struct:detection
bbox	include/yolo_v2_class.hpp	/^        bbox_t bbox;$/;"	m	struct:preview_boxes_t::preview_box_track_t
bbox2points	build/darknet/x64/darknet.py	/^def bbox2points(bbox):$/;"	f
bbox2points	darknet.py	/^def bbox2points(bbox):$/;"	f
bbox_comparator	src/compare.c	/^int bbox_comparator(const void *a, const void *b)$/;"	f
bbox_fight	src/compare.c	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class_id)$/;"	f
bbox_t	build/darknet/YoloWrapper.cs	/^        public struct bbox_t$/;"	s	class:Darknet.YoloWrapper
bbox_t	include/yolo_v2_class.hpp	/^struct bbox_t {$/;"	s
bbox_t	src/csharp/YoloCSharpWrapper.cs	/^        public struct bbox_t$/;"	s	class:Darknet.YoloWrapper
bbox_t::frames_counter	include/yolo_v2_class.hpp	/^    unsigned int frames_counter;   \/\/ counter of frames on which the object was detected$/;"	m	struct:bbox_t
bbox_t::h	include/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;       \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
bbox_t::obj_id	include/yolo_v2_class.hpp	/^    unsigned int obj_id;           \/\/ class of object - from range [0, classes-1]$/;"	m	struct:bbox_t
bbox_t::prob	include/yolo_v2_class.hpp	/^    float prob;                    \/\/ confidence - probability that the object was found correctly$/;"	m	struct:bbox_t
bbox_t::track_id	include/yolo_v2_class.hpp	/^    unsigned int track_id;         \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	m	struct:bbox_t
bbox_t::w	include/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;       \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
bbox_t::x	include/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;       \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
bbox_t::x_3d	include/yolo_v2_class.hpp	/^    float x_3d, y_3d, z_3d;        \/\/ center of object (in Meters) if ZED 3D Camera is used$/;"	m	struct:bbox_t
bbox_t::y	include/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;       \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
bbox_t::y_3d	include/yolo_v2_class.hpp	/^    float x_3d, y_3d, z_3d;        \/\/ center of object (in Meters) if ZED 3D Camera is used$/;"	m	struct:bbox_t
bbox_t::z_3d	include/yolo_v2_class.hpp	/^    float x_3d, y_3d, z_3d;        \/\/ center of object (in Meters) if ZED 3D Camera is used$/;"	m	struct:bbox_t
bbox_t_container	include/yolo_v2_class.hpp	/^struct bbox_t_container {$/;"	s
bbox_t_container::candidates	include/yolo_v2_class.hpp	/^    bbox_t candidates[C_SHARP_MAX_OBJECTS];$/;"	m	struct:bbox_t_container
bbox_update	src/compare.c	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class_id, int result)$/;"	f
bboxs	scripts/get_openimages_dataset.py	/^    bboxs = csv.reader(csvfile, delimiter=',', quotechar='|')$/;"	v
bd_algo	include/darknet.h	/^    UNUSED_ENUM_TYPE bd_algo, bd_algo16;$/;"	m	struct:layer
bd_algo	include/darknet.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo, bd_algo16;$/;"	m	struct:layer
bd_algo16	include/darknet.h	/^    UNUSED_ENUM_TYPE bd_algo, bd_algo16;$/;"	m	struct:layer
bd_algo16	include/darknet.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo, bd_algo16;$/;"	m	struct:layer
benchmark_layers	include/darknet.h	/^    int benchmark_layers;$/;"	m	struct:network
best_3d_shift	src/image.c	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	src/image.c	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
best_class	src/box.h	/^	int best_class;$/;"	m	struct:detection_with_class
best_class_idx	include/darknet.h	/^    int best_class_idx;$/;"	m	struct:detection
beta	include/darknet.h	/^    float beta;$/;"	m	struct:layer
beta_nms	include/darknet.h	/^    float beta_nms;$/;"	m	struct:layer
bf_algo	include/darknet.h	/^    UNUSED_ENUM_TYPE bf_algo, bf_algo16;$/;"	m	struct:layer
bf_algo	include/darknet.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo, bf_algo16;$/;"	m	struct:layer
bf_algo16	include/darknet.h	/^    UNUSED_ENUM_TYPE bf_algo, bf_algo16;$/;"	m	struct:layer
bf_algo16	include/darknet.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo, bf_algo16;$/;"	m	struct:layer
bflops	include/darknet.h	/^    float bflops;$/;"	m	struct:layer
bgindex	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
bias_change_gpu	include/darknet.h	/^    float * bias_change_gpu;$/;"	m	struct:layer
bias_m	include/darknet.h	/^    float * bias_m;$/;"	m	struct:layer
bias_m_gpu	include/darknet.h	/^    float *bias_m_gpu;$/;"	m	struct:layer
bias_match	include/darknet.h	/^    int bias_match;$/;"	m	struct:layer
bias_updates	include/darknet.h	/^    float *bias_updates;$/;"	m	struct:layer
bias_updates_gpu	include/darknet.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer
bias_v	include/darknet.h	/^    float * bias_v;$/;"	m	struct:layer
bias_v_gpu	include/darknet.h	/^    float *bias_v_gpu;$/;"	m	struct:layer
biases	include/darknet.h	/^    float *biases;$/;"	m	struct:layer
biases_ema	include/darknet.h	/^    float *biases_ema;$/;"	m	struct:layer
biases_gpu	include/darknet.h	/^    float * biases_gpu;$/;"	m	struct:layer
bilinear_interpolate	src/image.c	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f
bilinear_interpolate_kernel	src/crop_layer_kernels.cu	/^__device__ float bilinear_interpolate_kernel(float *image, int w, int h, float x, float y, int c)$/;"	f
bin_conv_shortcut_in_gpu	include/darknet.h	/^    float *bin_conv_shortcut_in_gpu;$/;"	m	struct:layer
bin_conv_shortcut_out_gpu	include/darknet.h	/^    float *bin_conv_shortcut_out_gpu;$/;"	m	struct:layer
bin_re_packed_input	include/darknet.h	/^    uint32_t *bin_re_packed_input;$/;"	m	struct:layer
binarize_cpu	src/convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_gpu	src/convolutional_kernels.cu	/^void binarize_gpu(float *x, int n, float *binary)$/;"	f
binarize_image	src/image.c	/^image binarize_image(image im)$/;"	f
binarize_input	src/convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_input_gpu	src/convolutional_kernels.cu	/^void binarize_input_gpu(float *input, int n, int size, float *binary)$/;"	f
binarize_input_kernel	src/convolutional_kernels.cu	/^__global__ void binarize_input_kernel(float *input, int n, int size, float *binary)$/;"	f
binarize_kernel	src/convolutional_kernels.cu	/^__global__ void binarize_kernel(float *x, int n, float *binary)$/;"	f
binarize_weights	src/convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
binarize_weights_gpu	src/convolutional_kernels.cu	/^void binarize_weights_gpu(float *weights, int n, int size, float *binary)$/;"	f
binarize_weights_kernel	src/convolutional_kernels.cu	/^__global__ void binarize_weights_kernel(float *weights, int n, int size, float *binary)$/;"	f
binarize_weights_mean_kernel	src/convolutional_kernels.cu	/^__global__ void binarize_weights_mean_kernel(float *weights, int n, int size, float *binary, float *mean_arr_gpu)$/;"	f
binary	include/darknet.h	/^    int binary;$/;"	m	struct:layer
binary_activate_array_gpu	src/activation_kernels.cu	/^extern "C" void binary_activate_array_gpu(float *x, int n, int size, BINARY_ACTIVATION a, float *y)$/;"	f
binary_activate_array_kernel	src/activation_kernels.cu	/^__global__ void binary_activate_array_kernel(float *x, int n, int s, BINARY_ACTIVATION a, float *y)$/;"	f
binary_align_weights	src/convolutional_layer.c	/^void binary_align_weights(convolutional_layer *l)$/;"	f
binary_gradient_array_gpu	src/activation_kernels.cu	/^extern "C" void binary_gradient_array_gpu(float *x, float *dx, int n, int size, BINARY_ACTIVATION a, float *y)$/;"	f
binary_gradient_array_kernel	src/activation_kernels.cu	/^__global__ void binary_gradient_array_kernel(float *x, float *dy, int n, int s, BINARY_ACTIVATION a, float *dx)$/;"	f
binary_input	include/darknet.h	/^    float *binary_input;$/;"	m	struct:layer
binary_input_gpu	include/darknet.h	/^    float *binary_input_gpu;$/;"	m	struct:layer
binary_int32_printf	src/gemm.c	/^void binary_int32_printf(uint32_t src) {$/;"	f
binary_int64_printf	src/gemm.c	/^void binary_int64_printf(uint64_t src) {$/;"	f
binary_transpose_align_input	src/convolutional_layer.c	/^size_t binary_transpose_align_input(int k, int n, float *b, char **t_bit_input, size_t ldb_align, int bit_align)$/;"	f
binary_weights	include/darknet.h	/^    float *binary_weights;$/;"	m	struct:layer
binary_weights_gpu	include/darknet.h	/^    float *binary_weights_gpu;$/;"	m	struct:layer
bind_internal	src/httplib.h	/^inline int Server::bind_internal(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
bind_to_any_port	src/httplib.h	/^inline int Server::bind_to_any_port(const char *host, int socket_flags) {$/;"	f	class:httplib::Server
bind_to_port	src/httplib.h	/^inline bool Server::bind_to_port(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
bit_align	include/darknet.h	/^    int bit_align;$/;"	m	struct:layer
bit_to_float	src/convolutional_layer.c	/^void bit_to_float(unsigned char *src, float *dst, size_t size, size_t filters, float *mean_arr) {$/;"	f
bits_per_channel	3rdparty/stb/include/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon6
blas.c	src/blas.c	1;"	F
blas.h	src/blas.h	1;"	F
blasHandle	src/dark_cuda.c	/^static cublasHandle_t blasHandle[16];$/;"	v	file:
blasInit	src/dark_cuda.c	/^static int blasInit[16] = { 0 };$/;"	v	file:
blas_handle	src/dark_cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blas_kernels.cu	src/blas_kernels.cu	1;"	F
blend_image	src/image.c	/^image blend_image(image fore, image back, float alpha)$/;"	f
blend_images	src/data.c	/^void blend_images(image new_img, float alpha, image old_img, float beta)$/;"	f
blend_images_cv	src/image_opencv.cpp	/^extern "C" void blend_images_cv(image new_img, float alpha, image old_img, float beta)$/;"	f
blend_truth	src/data.c	/^void blend_truth(float *new_truth, int boxes, int truth_size, float *old_truth)$/;"	f
blend_truth_mosaic	src/data.c	/^void blend_truth_mosaic(float *new_truth, int boxes, int truth_size, float *old_truth, int w, int h, float cut_x, float cut_y, int i_mixup,$/;"	f
blur	include/darknet.h	/^    int blur;$/;"	m	struct:load_args
blur	include/darknet.h	/^    int blur;$/;"	m	struct:network
blur_image	src/image_opencv.cpp	/^extern "C" image blur_image(image src_img, int ksize)$/;"	f
board_to_string	src/go.c	/^void board_to_string(char *s, float *board)$/;"	f
body	src/httplib.h	/^  std::string body;$/;"	m	struct:httplib::Request
body	src/httplib.h	/^  std::string body;$/;"	m	struct:httplib::Response
border_image	src/image.c	/^image border_image(image a, int border)$/;"	f
bot	include/darknet.h	/^    float left, right, top, bot;$/;"	m	struct:boxabs
bottelneck_delta_gpu	include/darknet.h	/^    float *bottelneck_delta_gpu;$/;"	m	struct:layer
bottelneck_hi_gpu	include/darknet.h	/^    float *bottelneck_hi_gpu;$/;"	m	struct:layer
bottleneck	include/darknet.h	/^    int bottleneck;$/;"	m	struct:layer
bottom	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:box_label
bottom_offset	include/yolo_v2_class.hpp	/^    size_t const preview_box_size, bottom_offset;$/;"	m	class:preview_boxes_t
box	include/darknet.h	/^typedef struct box {$/;"	s
box	include/darknet.h	/^} box;$/;"	t	typeref:struct:box
box.c	src/box.c	1;"	F
box.h	src/box.h	1;"	F
box::h	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box
box::w	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box
box::x	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box
box::y	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box
box_c	src/box.c	/^boxabs box_c(box a, box b) {$/;"	f
box_ciou	src/box.c	/^float box_ciou(box a, box b)$/;"	f
box_diou	src/box.c	/^float box_diou(box a, box b)$/;"	f
box_diounms	src/box.c	/^float box_diounms(box a, box b, float beta1)$/;"	f
box_giou	src/box.c	/^float box_giou(box a, box b)$/;"	f
box_intersection	src/box.c	/^float box_intersection(box a, box b)$/;"	f
box_iou	src/box.c	/^float box_iou(box a, box b)$/;"	f
box_iou_kind	src/box.c	/^float box_iou_kind(box a, box b, IOU_LOSS iou_kind)$/;"	f
box_label	include/darknet.h	/^typedef struct box_label {$/;"	s
box_label	include/darknet.h	/^} box_label;$/;"	t	typeref:struct:box_label
box_label::bottom	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:box_label
box_label::h	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box_label
box_label::id	include/darknet.h	/^    int id;$/;"	m	struct:box_label
box_label::left	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:box_label
box_label::right	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:box_label
box_label::top	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:box_label
box_label::track_id	include/darknet.h	/^    int track_id;$/;"	m	struct:box_label
box_label::w	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box_label
box_label::x	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box_label
box_label::y	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box_label
box_prob	src/detector.c	/^} box_prob;$/;"	t	typeref:struct:__anon35	file:
box_rmse	src/box.c	/^float box_rmse(box a, box b)$/;"	f
box_to_boxabs	src/utils.c	/^boxabs box_to_boxabs(const box* b, const int img_w, const int img_h, const int bounds_check)$/;"	f
box_union	src/box.c	/^float box_union(box a, box b)$/;"	f
boxabs	include/darknet.h	/^typedef struct boxabs {$/;"	s
boxabs	include/darknet.h	/^} boxabs;$/;"	t	typeref:struct:boxabs
boxabs::bot	include/darknet.h	/^    float left, right, top, bot;$/;"	m	struct:boxabs
boxabs::left	include/darknet.h	/^    float left, right, top, bot;$/;"	m	struct:boxabs
boxabs::right	include/darknet.h	/^    float left, right, top, bot;$/;"	m	struct:boxabs
boxabs::top	include/darknet.h	/^    float left, right, top, bot;$/;"	m	struct:boxabs
boxes	include/darknet.h	/^    box **boxes;$/;"	m	struct:data
bpp	3rdparty/stb/include/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
buffer	src/httplib.h	/^  std::string buffer;$/;"	m	class:httplib::BufferStream
buffer_start	3rdparty/stb/include/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon4
buflen	3rdparty/stb/include/stb_image.h	/^   int buflen;$/;"	m	struct:__anon4
built_with_cuda	src/yolo_v2_class.cpp	/^bool built_with_cuda(){$/;"	f
built_with_cudnn	src/yolo_v2_class.cpp	/^bool built_with_cudnn(){$/;"	f
built_with_opencv	src/yolo_v2_class.cpp	/^bool built_with_opencv(){$/;"	f
burn_in	include/darknet.h	/^    int burn_in;$/;"	m	struct:network
burnin_update	include/darknet.h	/^    int burnin_update;$/;"	m	struct:layer
c	include/darknet.h	/^    int c; \/\/ color depth$/;"	m	struct:load_args
c	include/darknet.h	/^    int c;$/;"	m	struct:image
c	include/darknet.h	/^    int h, w, c;$/;"	m	struct:layer
c	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
c	include/yolo_v2_class.hpp	/^    int c;                        \/\/ number of chanels (3 - for RGB)$/;"	m	struct:image_t
c	src/parser.c	/^    int c;$/;"	m	struct:size_params	file:
c_cpu	include/darknet.h	/^    float *c_cpu;$/;"	m	struct:layer
c_gpu	include/darknet.h	/^    float *c_gpu;$/;"	m	struct:layer
ca_cert_dir_path_	src/httplib.h	/^  std::string ca_cert_dir_path_;$/;"	m	class:httplib::SSLClient
ca_cert_file_path_	src/httplib.h	/^  std::string ca_cert_file_path_;$/;"	m	class:httplib::SSLClient
caffe_set	src/col2im.c	/^void caffe_set(const int N, const float alpha, float* Y) {$/;"	f
calc_anchors	src/detector.c	/^void calc_anchors(char *datacfg, int num_of_clusters, int width, int height, int show)$/;"	f
calc_anchors.cmd	build/darknet/x64/calc_anchors.cmd	1;"	F
calc_avg_activation_gpu	src/convolutional_kernels.cu	/^void calc_avg_activation_gpu(float *src, float *dst, int size, int channels, int batches)$/;"	f
calc_avg_activation_kernel	src/convolutional_kernels.cu	/^__global__ void calc_avg_activation_kernel(float *src, float *dst, int size, int channels, int batches)$/;"	f
calc_dt	include/yolo_v2_class.hpp	/^    float calc_dt() {$/;"	f	class:track_kalman_t
calc_mAP.cmd	build/darknet/x64/calc_mAP.cmd	1;"	F
calc_mAP_coco.cmd	build/darknet/x64/calc_mAP_coco.cmd	1;"	F
calc_mAP_voc_py.cmd	build/darknet/x64/calc_mAP_voc_py.cmd	1;"	F
calculate_binary_weights	src/network.c	/^void calculate_binary_weights(network net)$/;"	f
calculate_liberties	src/go.c	/^int *calculate_liberties(float *board)$/;"	f
calculate_loss	src/nightmare.c	/^void calculate_loss(float *output, float *delta, int n, float thresh)$/;"	f
callback_mouse_click	src/image_opencv.cpp	/^void callback_mouse_click(int event, int x, int y, int flags, void* user_data)$/;"	f
calloc_error	src/utils.c	/^void calloc_error(const size_t size, const char * const filename, const char * const funcname, const int line)$/;"	f
can_compress	src/httplib.h	/^inline bool can_compress(const std::string &content_type) {$/;"	f	namespace:httplib::detail
candidates	build/darknet/YoloWrapper.cs	/^            public bbox_t[] candidates;$/;"	f	struct:Darknet.YoloWrapper.BboxContainer
candidates	include/yolo_v2_class.hpp	/^    bbox_t candidates[C_SHARP_MAX_OBJECTS];$/;"	m	struct:bbox_t_container
candidates	src/csharp/YoloCSharpWrapper.cs	/^            public bbox_t[] candidates;$/;"	f	struct:Darknet.YoloWrapper.BboxContainer
cap	build/darknet/x64/darknet_video.py	/^    cap = cv2.VideoCapture(input_path)$/;"	v
cap	darknet_video.py	/^    cap = cv2.VideoCapture(input_path)$/;"	v
cap	src/demo.c	/^static cap_cv *cap;$/;"	v	file:
cap_cv	src/image_opencv.h	/^typedef void* cap_cv;$/;"	t
captcha.c	src/captcha.c	1;"	F
catch	3rdparty/pthreads/include/pthread.h	1342;"	d
cell_cpu	include/darknet.h	/^    float *cell_cpu;$/;"	m	struct:layer
cell_gpu	include/darknet.h	/^    float *cell_gpu;$/;"	m	struct:layer
center	include/darknet.h	/^    int center;$/;"	m	struct:load_args
center	include/darknet.h	/^    int center;$/;"	m	struct:network
centers	scripts/kmeansiou.c	/^    matrix centers;$/;"	m	struct:__anon41	file:
centers	src/matrix.h	/^    matrix centers;$/;"	m	struct:__anon32
change_leaves	src/tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
channel	3rdparty/stb/include/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
channel_order	3rdparty/stb/include/stb_image.h	/^   int channel_order;$/;"	m	struct:__anon6
chdir	src/darkunistd.h	34;"	d
check_arguments_errors	build/darknet/x64/darknet_video.py	/^def check_arguments_errors(args):$/;"	f
check_arguments_errors	darknet_images.py	/^def check_arguments_errors(args):$/;"	f
check_arguments_errors	darknet_video.py	/^def check_arguments_errors(args):$/;"	f
check_array_is_inf	src/utils.c	/^int check_array_is_inf(float *arr, int size)$/;"	f
check_array_is_nan	src/utils.c	/^int check_array_is_nan(float *arr, int size)$/;"	f
check_batch_shape	darknet_images.py	/^def check_batch_shape(images, batch_size):$/;"	f
check_classes_id	src/http_stream.cpp	/^int check_classes_id(detection det1, detection det2, float thresh)$/;"	f
check_cpu_features	src/gemm.c	/^void check_cpu_features(void) {$/;"	f
check_cuda	src/yolo_v2_class.cpp	/^void check_cuda(cudaError_t status) {$/;"	f
check_error	src/dark_cuda.c	/^void check_error(cudaError_t status)$/;"	f
check_error_extended	src/dark_cuda.c	/^void check_error_extended(cudaError_t status, const char *file, int line, const char *date_time)$/;"	f
check_host_name	src/httplib.h	/^inline bool SSLClient::check_host_name(const char *pattern,$/;"	f	class:httplib::SSLClient
check_mistakes	src/detector.c	/^int check_mistakes = 0;$/;"	v
check_prob	src/http_stream.cpp	/^int check_prob(detection det, float thresh)$/;"	f
check_sim	src/blas.c	/^int check_sim(size_t i, size_t j, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
child	include/darknet.h	/^    int *child;$/;"	m	struct:tree
ci	src/httplib.h	/^struct ci {$/;"	s	namespace:httplib::detail
cifar.c	src/cifar.c	1;"	F
ciou	include/darknet.h	/^    float iou, giou, diou, ciou;$/;"	m	struct:ious
class_colors	build/darknet/x64/darknet.py	/^def class_colors(names):$/;"	f
class_colors	darknet.py	/^def class_colors(names):$/;"	f
class_count	src/yolo_layer.c	/^    int class_count;$/;"	m	struct:train_yolo_args	file:
class_id	src/box.c	/^    int class_id;$/;"	m	struct:__anon28	file:
class_id	src/compare.c	/^    int class_id;$/;"	m	struct:__anon27	file:
class_id	src/detector.c	/^    int class_id;$/;"	m	struct:__anon35	file:
class_ids	include/darknet.h	/^    int *class_ids;$/;"	m	struct:layer
class_scale	include/darknet.h	/^    float class_scale;$/;"	m	struct:layer
classes	build/darknet/x64/data/voc/voc_label.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	build/darknet/x64/reval_voc_py3.py	/^    classes = [t.strip('\\n') for t in lines]$/;"	v
classes	include/darknet.h	/^    int classes;$/;"	m	struct:detection
classes	include/darknet.h	/^    int classes;$/;"	m	struct:layer
classes	include/darknet.h	/^    int classes;$/;"	m	struct:load_args
classes	include/darknet.h	/^    int classes;$/;"	m	struct:metadata
classes	scripts/reval_voc.py	/^    classes = [t.strip('\\n') for t in lines]$/;"	v
classes	scripts/reval_voc_py3.py	/^    classes = [t.strip('\\n') for t in lines]$/;"	v
classes	scripts/voc_label.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	scripts/voc_label_difficult.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	src/compare.c	/^    int classes;$/;"	m	struct:__anon27	file:
classes_multipliers	include/darknet.h	/^    float *classes_multipliers;$/;"	m	struct:layer
classfix	include/darknet.h	/^    int classfix;$/;"	m	struct:layer
classifier.c	src/classifier.c	1;"	F
classifier.h	src/classifier.h	1;"	F
classifier_densenet201.cmd	build/darknet/x64/classifier_densenet201.cmd	1;"	F
classifier_resnet50.cmd	build/darknet/x64/classifier_resnet50.cmd	1;"	F
cleanUpRout	3rdparty/pthreads/include/pthread.h	/^      ptw32_cleanup_callback_t cleanUpRout;$/;"	m	class:PThreadCleanup
clear_old_states	include/yolo_v2_class.hpp	/^    void clear_old_states() {$/;"	f	class:track_kalman_t
clip	include/darknet.h	/^    float clip;$/;"	m	struct:layer
clip	include/darknet.h	/^    float clip;$/;"	m	struct:network
clip_value	src/gaussian_yolo_layer.c	/^static inline float clip_value(float val, const float max_val)$/;"	f	file:
clip_value	src/softmax_layer.c	/^static inline float clip_value(float val, const float max_val)$/;"	f	file:
clip_value	src/yolo_layer.c	/^static inline float clip_value(float val, const float max_val)$/;"	f	file:
clock_gettime	src/gettimeofday.c	/^int clock_gettime(int dummy, struct timespec* ct)$/;"	f
close_all	src/http_stream.cpp	/^    void close_all()$/;"	f	class:JSON_sender
close_all	src/http_stream.cpp	/^    void close_all()$/;"	f	class:MJPG_sender
close_all_sockets	src/http_stream.cpp	/^    int close_all_sockets;$/;"	m	class:JSON_sender	file:
close_all_sockets	src/http_stream.cpp	/^    int close_all_sockets;$/;"	m	class:MJPG_sender	file:
close_socket	src/http_stream.cpp	/^static int close_socket(SOCKET s) {$/;"	f	file:
close_socket	src/httplib.h	/^inline int close_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
closest_center	scripts/kmeansiou.c	/^int closest_center(double *datum, matrix centers)$/;"	f
closest_center	src/matrix.c	/^int closest_center(float *datum, matrix centers)$/;"	f
cls_normalizer	include/darknet.h	/^    float cls_normalizer;$/;"	m	struct:layer
coco.c	src/coco.c	1;"	F
coco_classes	src/coco.c	/^char *coco_classes[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};$/;"	v
coco_ids	src/coco.c	/^int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v
coco_ids	src/detector.c	/^static int coco_ids[] = { 1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90 };$/;"	v	file:
code	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon8
code_bits	3rdparty/stb/include/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon9
code_buffer	3rdparty/stb/include/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon9
code_buffer	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon13
codes	3rdparty/stb/include/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon20
coeff	3rdparty/stb/include/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon9::__anon10
coeff_h	3rdparty/stb/include/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon9::__anon10
coeff_w	3rdparty/stb/include/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon9::__anon10
col2im.c	src/col2im.c	1;"	F
col2im.h	src/col2im.h	1;"	F
col2im_add_pixel	src/col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	src/col2im.c	/^void col2im_cpu(float* data_col,$/;"	f
col2im_cpu_ext	src/col2im.c	/^void col2im_cpu_ext(const float* data_col, const int channels,$/;"	f
col2im_gpu_ext	src/col2im_kernels.cu	/^void col2im_gpu_ext(const float* data_col, const int channels,$/;"	f
col2im_gpu_kernel	src/col2im_kernels.cu	/^__global__ void col2im_gpu_kernel(const int n, const float* data_col,$/;"	f
col2im_gpu_kernel_ext	src/col2im_kernels.cu	/^__global__ void col2im_gpu_kernel_ext(const int n, const float* data_col,$/;"	f
col2im_kernels.cu	src/col2im_kernels.cu	1;"	F
col2im_ongpu	src/col2im_kernels.cu	/^void col2im_ongpu(float *data_col,$/;"	f
col_image	include/darknet.h	/^    float *col_image;$/;"	m	struct:layer
col_image_gpu	include/darknet.h	/^    float * col_image_gpu;$/;"	m	struct:layer
collapse_image_layers	src/image.c	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	src/image.c	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	src/image.c	/^image collapse_images_vert(image *ims, int n)$/;"	f
color_table	3rdparty/stb/include/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon20
colors	src/image.c	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
cols	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
cols	scripts/kmeansiou.c	/^    int rows, cols;$/;"	m	struct:matrix	file:
combine_cpu	include/darknet.h	/^    float * combine_cpu;$/;"	m	struct:layer
combine_delta_cpu	include/darknet.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer
combine_delta_gpu	include/darknet.h	/^    float * combine_delta_gpu;$/;"	m	struct:layer
combine_gpu	include/darknet.h	/^    float * combine_gpu;$/;"	m	struct:layer
combine_train_valid_networks	src/network.c	/^network combine_train_valid_networks(network net_train, network net_map)$/;"	f
compare.c	src/compare.c	1;"	F
compare_2_arrays_gpu	src/blas_kernels.cu	/^void compare_2_arrays_gpu(float *one, float *two, int size)$/;"	f
compare_2_arrays_kernel	src/blas_kernels.cu	/^__global__ void compare_2_arrays_kernel(float *one, float *two, int size)$/;"	f
compare_by_lefts	src/image.c	/^int compare_by_lefts(const void *a_ptr, const void *b_ptr) {$/;"	f
compare_by_probs	src/image.c	/^int compare_by_probs(const void *a_ptr, const void *b_ptr) {$/;"	f
compare_gaussian_yolo_class	src/gaussian_yolo_layer.c	/^int compare_gaussian_yolo_class(float *output, int classes, int class_index, int stride, float objectness, int class_id, float conf_thresh)$/;"	f
compare_networks	src/network.c	/^void compare_networks(network n1, network n2, data test)$/;"	f
compare_yolo_class	src/yolo_layer.c	/^int compare_yolo_class(float *output, int classes, int class_index, int stride, float objectness, int class_id, float conf_thresh)$/;"	f
comparison_fn_t	src/detector.c	/^typedef __compar_fn_t comparison_fn_t;$/;"	t	file:
composite_3d	src/image.c	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	src/image.c	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
compress	src/httplib.h	/^inline bool compress(std::string &content) {$/;"	f	namespace:httplib::detail
concat	include/darknet.h	/^    float *concat;$/;"	m	struct:layer
concat_data	src/data.c	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	src/data.c	/^data concat_datas(data *d, int n)$/;"	f
concat_delta	include/darknet.h	/^    float *concat_delta;$/;"	m	struct:layer
concat_delta_gpu	include/darknet.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer
concat_gpu	include/darknet.h	/^    float * concat_gpu;$/;"	m	struct:layer
concat_matrix	src/data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
cond_	src/httplib.h	/^  std::condition_variable cond_;$/;"	m	class:httplib::ThreadPool
connected_layer	src/connected_layer.h	/^typedef layer connected_layer;$/;"	t
connected_layer.c	src/connected_layer.c	1;"	F
connected_layer.h	src/connected_layer.h	1;"	F
const_cpu	src/blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
const_kernel	src/blas_kernels.cu	/^__global__ void const_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f
const_ongpu	src/blas_kernels.cu	/^extern "C" void const_ongpu(int N, float ALPHA, float * X, int INCX)$/;"	f
constrain	src/utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_cpu	src/blas.c	/^void constrain_cpu(int size, float ALPHA, float *X)$/;"	f
constrain_image	src/image.c	/^void constrain_image(image im)$/;"	f
constrain_int	src/utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
constrain_kernel	src/blas_kernels.cu	/^__global__ void constrain_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain_min_max_kernel	src/blas_kernels.cu	/^__global__ void constrain_min_max_kernel(int N, float MIN, float MAX, float *X, int INCX)$/;"	f
constrain_min_max_ongpu	src/blas_kernels.cu	/^extern "C" void constrain_min_max_ongpu(int N, float MIN, float MAX, float * X, int INCX)$/;"	f
constrain_ongpu	src/blas_kernels.cu	/^extern "C" void constrain_ongpu(int N, float ALPHA, float * X, int INCX)$/;"	f
constrain_weight_updates_kernel	src/blas_kernels.cu	/^__global__ void constrain_weight_updates_kernel(int N, float coef, float *weights_gpu, float *weight_updates_gpu)$/;"	f
constrain_weight_updates_ongpu	src/blas_kernels.cu	/^extern "C" void constrain_weight_updates_ongpu(int N, float coef, float *weights_gpu, float *weight_updates_gpu)$/;"	f
consume_frame	src/image_opencv.cpp	/^extern "C" void consume_frame(cap_cv *cap){$/;"	f
content	src/httplib.h	/^  std::string content;$/;"	m	struct:httplib::MultipartFormData
content_length	src/httplib.h	/^  size_t content_length;$/;"	m	struct:httplib::Request
content_length	src/httplib.h	/^  size_t content_length;$/;"	m	struct:httplib::Response
content_provider	src/httplib.h	/^  ContentProvider content_provider;$/;"	m	struct:httplib::Request
content_provider	src/httplib.h	/^  ContentProviderWithCloser content_provider;$/;"	m	struct:httplib::Response
content_provider_resource_releaser	src/httplib.h	/^  std::function<void()> content_provider_resource_releaser;$/;"	m	struct:httplib::Response
content_receiver	src/httplib.h	/^  ContentReceiver content_receiver;$/;"	m	struct:httplib::Request
content_type	src/httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFile
content_type	src/httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFormData
context	3rdparty/stb/include/stb_image_write.h	/^   void *context;$/;"	m	struct:__anon1
contrSize	include/yolo_v2_class.hpp	/^        int measSize, stateSize, contrSize;$/;"	m	struct:track_kalman_t::one_kalman_t
contrast_p_gpu	include/darknet.h	/^    contrastive_params *contrast_p_gpu;$/;"	m	struct:layer
contrastive	include/darknet.h	/^    int contrastive;$/;"	m	struct:load_args
contrastive	include/darknet.h	/^    int contrastive;$/;"	m	struct:network
contrastive_color	include/darknet.h	/^    int contrastive_color;$/;"	m	struct:load_args
contrastive_color	include/darknet.h	/^    int contrastive_color;$/;"	m	struct:network
contrastive_jit_flip	include/darknet.h	/^    int contrastive_jit_flip;$/;"	m	struct:load_args
contrastive_jit_flip	include/darknet.h	/^    int contrastive_jit_flip;$/;"	m	struct:network
contrastive_layer	src/softmax_layer.h	/^typedef layer contrastive_layer;$/;"	t
contrastive_neg_max	include/darknet.h	/^    int contrastive_neg_max;$/;"	m	struct:layer
contrastive_params	include/darknet.h	/^typedef struct contrastive_params {$/;"	s
contrastive_params	include/darknet.h	/^} contrastive_params;$/;"	t	typeref:struct:contrastive_params
contrastive_params::P	include/darknet.h	/^    float P;$/;"	m	struct:contrastive_params
contrastive_params::exp_sim	include/darknet.h	/^    float exp_sim;$/;"	m	struct:contrastive_params
contrastive_params::i	include/darknet.h	/^    int i, j;$/;"	m	struct:contrastive_params
contrastive_params::j	include/darknet.h	/^    int i, j;$/;"	m	struct:contrastive_params
contrastive_params::sim	include/darknet.h	/^    float sim;$/;"	m	struct:contrastive_params
contrastive_params::time_step_i	include/darknet.h	/^    int time_step_i, time_step_j;$/;"	m	struct:contrastive_params
contrastive_params::time_step_j	include/darknet.h	/^    int time_step_i, time_step_j;$/;"	m	struct:contrastive_params
convDesc	include/darknet.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer
convDesc	include/darknet.h	/^    void* convDesc;$/;"	m	struct:layer
conv_lstm_layer.c	src/conv_lstm_layer.c	1;"	F
conv_lstm_layer.h	src/conv_lstm_layer.h	1;"	F
convert	build/darknet/x64/data/voc/voc_label.py	/^def convert(size, box):$/;"	f
convert	scripts/voc_label.py	/^def convert(size, box):$/;"	f
convert	scripts/voc_label_difficult.py	/^def convert(size, box):$/;"	f
convert2original	build/darknet/x64/darknet_video.py	/^def convert2original(image, bbox):$/;"	f
convert2original	darknet_video.py	/^def convert2original(image, bbox):$/;"	f
convert2relative	build/darknet/x64/darknet_video.py	/^def convert2relative(bbox):$/;"	f
convert2relative	darknet_images.py	/^def convert2relative(image, bbox):$/;"	f
convert2relative	darknet_video.py	/^def convert2relative(bbox):$/;"	f
convert4cropping	build/darknet/x64/darknet_video.py	/^def convert4cropping(image, bbox):$/;"	f
convert4cropping	darknet_video.py	/^def convert4cropping(image, bbox):$/;"	f
convert_annotation	build/darknet/x64/data/voc/voc_label.py	/^def convert_annotation(year, image_id):$/;"	f
convert_annotation	scripts/voc_label.py	/^def convert_annotation(year, image_id):$/;"	f
convert_annotation	scripts/voc_label_difficult.py	/^def convert_annotation(year, image_id):$/;"	f
convolution_2d	src/gemm.c	/^void convolution_2d(int w, int h, int ksize, int n, int c, int pad, int stride,$/;"	f
convolution_2d_old	src/gemm.c	/^void convolution_2d_old(int w, int h, int ksize, int n, int c, int pad, int stride,$/;"	f
convolution_repacked	src/gemm.c	/^void convolution_repacked(uint32_t *packed_input, uint32_t *packed_weights, float *output,$/;"	f
convolutional_kernels.cu	src/convolutional_kernels.cu	1;"	F
convolutional_layer	src/convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_layer.c	src/convolutional_layer.c	1;"	F
convolutional_layer.h	src/convolutional_layer.h	1;"	F
convolutional_out_height	src/convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	src/convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f
convolve_bin_gpu	src/im2col_kernels.cu	/^void convolve_bin_gpu(float *input, float *weights, float *output, int in_w, int in_h, int in_c, int n,$/;"	f
convolve_bin_gpu_kernel	src/im2col_kernels.cu	/^__global__ void convolve_bin_gpu_kernel(float *input, float *weights, float *output, int in_w, int in_h, int in_c, int n,$/;"	f
convolve_gpu	src/im2col_kernels.cu	/^void convolve_gpu(float *input, float *weights, float *output, int in_w, int in_h, int in_c, int n, int size, int pad)$/;"	f
convolve_gpu_kernel	src/im2col_kernels.cu	/^__global__ void convolve_gpu_kernel(float *input, float *weights, float *output, int in_w, int in_h, int in_c, int n, int size, int pad)$/;"	f
coord_conv_gpu	src/blas_kernels.cu	/^extern "C" void coord_conv_gpu(float *dst, int size, int w, int h, int chan, int b, int type)$/;"	f
coord_conv_kernel	src/blas_kernels.cu	/^__global__ void coord_conv_kernel(float *dst, int w, int h, int chan, int batch, int type)$/;"	f
coord_scale	include/darknet.h	/^    float coord_scale;$/;"	m	struct:layer
coordconv	include/darknet.h	/^    int coordconv;$/;"	m	struct:layer
coords	include/darknet.h	/^    int coords;$/;"	m	struct:layer
coords	include/darknet.h	/^    int coords;$/;"	m	struct:load_args
copy	scripts/kmeansiou.c	/^void copy(double *x, double *y, int n)$/;"	f
copy	src/matrix.c	/^void copy(float *x, float *y, int n)$/;"	f
copy_cpu	src/blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_cudnn_descriptors	src/network.c	/^void copy_cudnn_descriptors(layer src, layer *dst)$/;"	f
copy_image	src/image.c	/^image copy_image(image p)$/;"	f
copy_image_from_bytes	build/darknet/x64/darknet.py	/^copy_image_from_bytes = lib.copy_image_from_bytes$/;"	v
copy_image_from_bytes	darknet.py	/^copy_image_from_bytes = lib.copy_image_from_bytes$/;"	v
copy_image_from_bytes	src/image.c	/^LIB_API void copy_image_from_bytes(image im, char *pdata)$/;"	f
copy_image_inplace	src/image.c	/^void copy_image_inplace(image src, image dst)$/;"	f
copy_kernel	src/blas_kernels.cu	/^__global__ void copy_kernel(int N,  float *X, int OFFX, int INCX, float *Y, int OFFY, int INCY)$/;"	f
copy_ongpu	src/blas_kernels.cu	/^extern "C" void copy_ongpu(int N, float * X, int INCX, float * Y, int INCY)$/;"	f
copy_ongpu_offset	src/blas_kernels.cu	/^extern "C" void copy_ongpu_offset(int N, float * X, int OFFX, int INCX, float * Y, int OFFY, int INCY)$/;"	f
copy_string	src/utils.c	/^char *copy_string(char *s)$/;"	f
copy_weights_net	src/network.c	/^void copy_weights_net(network net_train, network *net_map)$/;"	f
correct	include/yolo_v2_class.hpp	/^        void correct(bbox_t box) {$/;"	f	struct:track_kalman_t::one_kalman_t
correct	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> correct(std::vector<bbox_t> result_vec)$/;"	f	class:track_kalman_t
correct_boxes	src/data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
correct_gaussian_yolo_boxes	src/gaussian_yolo_layer.c	/^void correct_gaussian_yolo_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative, int letter)$/;"	f
correct_region_boxes	src/region_layer.c	/^void correct_region_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative)$/;"	f
correct_yolo_boxes	src/yolo_layer.c	/^void correct_yolo_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative, int letter)$/;"	f
cos_sim	include/darknet.h	/^    float *cos_sim;$/;"	m	struct:layer
cos_sim_gpu	include/darknet.h	/^    float * cos_sim_gpu;$/;"	m	struct:layer
cosine_similarity	src/blas.c	/^float cosine_similarity(float *A, float *B, unsigned int feature_size)$/;"	f
cost	include/darknet.h	/^    float * cost;$/;"	m	struct:layer
cost	include/darknet.h	/^    float *cost;$/;"	m	struct:network
cost_layer	src/cost_layer.h	/^typedef layer cost_layer;$/;"	t
cost_layer.c	src/cost_layer.c	1;"	F
cost_layer.h	src/cost_layer.h	1;"	F
cost_type	include/darknet.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer
count	src/yolo_layer.c	/^    int count;$/;"	m	struct:train_yolo_args	file:
count256	src/gemm.c	/^static inline __m256i count256(__m256i v) {$/;"	f	file:
count_fields	scripts/kmeansiou.c	/^int count_fields(char *line)$/;"	f
count_fields	src/utils.c	/^int count_fields(char *line)$/;"	f
counts	include/darknet.h	/^    int   * counts;$/;"	m	struct:layer
cpu_gemm	src/cpu_gemm.c	/^void cpu_gemm(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpu_gemm.c	src/cpu_gemm.c	1;"	F
cpu_gemm_nn	src/cpu_gemm.c	/^void cpu_gemm_nn(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpu_gemm_nt	src/cpu_gemm.c	/^void cpu_gemm_nt(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpu_gemm_tn	src/cpu_gemm.c	/^void cpu_gemm_tn(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpu_gemm_tt	src/cpu_gemm.c	/^void cpu_gemm_tt(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpuid	src/gemm.c	/^void cpuid(int info[4], int InfoType) {$/;"	f
cpuid	src/gemm.c	610;"	d	file:
create_client_socket	src/httplib.h	/^inline socket_t Client::create_client_socket() const {$/;"	f	class:httplib::Client
create_convolutional_cudnn_tensors	src/convolutional_layer.c	/^void create_convolutional_cudnn_tensors(layer *l)$/;"	f
create_maxpool_cudnn_tensors	src/maxpool_layer.c	/^void create_maxpool_cudnn_tensors(layer *l)$/;"	f
create_server_socket	src/httplib.h	/^inline socket_t Server::create_server_socket(const char *host, int port,$/;"	f	class:httplib::Server
create_socket	src/httplib.h	/^socket_t create_socket(const char *host, int port, Fn fn,$/;"	f	namespace:httplib::detail
create_video_writer	src/image_opencv.cpp	/^extern "C" write_cv *create_video_writer(char *out_filename, char c1, char c2, char c3, char c4, int fps, int width, int height, int is_color)$/;"	f
create_window_cv	src/image_opencv.cpp	/^extern "C" void create_window_cv(char const* window_name, int full_screen, int width, int height)$/;"	f
crnn_layer.c	src/crnn_layer.c	1;"	F
crnn_layer.h	src/crnn_layer.h	1;"	F
crop_image	src/image.c	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
crop_layer	src/crop_layer.h	/^typedef layer crop_layer;$/;"	t
crop_layer.c	src/crop_layer.c	1;"	F
crop_layer.h	src/crop_layer.h	1;"	F
crop_layer_kernels.cu	src/crop_layer_kernels.cu	1;"	F
csv_to_matrix	scripts/kmeansiou.c	/^matrix csv_to_matrix(char *filename, int header)$/;"	f
csv_to_matrix	src/matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f
ctx_	src/httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLClient
ctx_	src/httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLServer
ctx_mutex_	src/httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLClient
ctx_mutex_	src/httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLServer
cublas_check_error	src/dark_cuda.c	/^void cublas_check_error(cublasStatus_t status)$/;"	f
cublas_check_error_extended	src/dark_cuda.c	/^void cublas_check_error_extended(cublasStatus_t status, const char *file, int line, const char *date_time)$/;"	f
cudaEventWaitDefault	src/dark_cuda.c	334;"	d	file:
cuda_compare	src/dark_cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_convert_f16_to_f32	src/convolutional_kernels.cu	/^void cuda_convert_f16_to_f32(float* input_f16, size_t size, float *output_f32) {$/;"	f
cuda_convert_f32_to_f16	src/convolutional_kernels.cu	/^void cuda_convert_f32_to_f16(float* input_f32, size_t size, float *output_f16) {$/;"	f
cuda_debug_sync	src/dark_cuda.c	/^int cuda_debug_sync = 0;$/;"	v
cuda_f16_to_f32	src/convolutional_kernels.cu	/^__global__ void cuda_f16_to_f32(half* input_f16, size_t size, float *output_f32)$/;"	f
cuda_f32_to_f16	src/convolutional_kernels.cu	/^__global__ void cuda_f32_to_f16(float* input_f32, size_t size, half *output_f16)$/;"	f
cuda_free	src/dark_cuda.c	/^void cuda_free(float *x_gpu)$/;"	f
cuda_free_host	src/dark_cuda.c	/^void cuda_free_host(float *x_cpu)$/;"	f
cuda_get_context	src/dark_cuda.c	/^void *cuda_get_context()$/;"	f
cuda_get_device	src/dark_cuda.c	/^int cuda_get_device()$/;"	f
cuda_graph	include/darknet.h	/^    void *cuda_graph;$/;"	m	struct:network
cuda_graph_exec	include/darknet.h	/^    void *cuda_graph_exec;$/;"	m	struct:network
cuda_graph_ready	include/darknet.h	/^    int *cuda_graph_ready;$/;"	m	struct:network
cuda_gridsize	src/dark_cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_make_array	src/dark_cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_array_pinned	src/dark_cuda.c	/^float *cuda_make_array_pinned(float *x, size_t n)$/;"	f
cuda_make_array_pinned_preallocated	src/dark_cuda.c	/^float *cuda_make_array_pinned_preallocated(float *x, size_t n)$/;"	f
cuda_make_array_pointers	src/dark_cuda.c	/^void **cuda_make_array_pointers(void **x, size_t n)$/;"	f
cuda_make_f16_from_f32_array	src/convolutional_kernels.cu	/^half *cuda_make_f16_from_f32_array(float *src, size_t n)$/;"	f
cuda_make_int_array	src/dark_cuda.c	/^int *cuda_make_int_array(size_t n)$/;"	f
cuda_make_int_array_new_api	src/dark_cuda.c	/^int *cuda_make_int_array_new_api(int *x, size_t n)$/;"	f
cuda_pull_array	src/dark_cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_pull_array_async	src/dark_cuda.c	/^void cuda_pull_array_async(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_array	src/dark_cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_random	src/dark_cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	src/dark_cuda.c	/^void cuda_set_device(int n) {}$/;"	f
cuda_set_device	src/dark_cuda.c	/^void cuda_set_device(int n)$/;"	f
cudnnHandle	src/dark_cuda.c	/^static cudnnHandle_t cudnnHandle[16];$/;"	v	file:
cudnnInit	src/dark_cuda.c	/^static int cudnnInit[16] = { 0 };$/;"	v	file:
cudnn_check_error	src/dark_cuda.c	/^void cudnn_check_error(cudnnStatus_t status)$/;"	f
cudnn_check_error_extended	src/dark_cuda.c	/^void cudnn_check_error_extended(cudnnStatus_t status, const char *file, int line, const char *date_time)$/;"	f
cudnn_convolutional_setup	src/convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l, int cudnn_preference, size_t workspace_size_specify)$/;"	f
cudnn_fastest	src/dark_cuda.h	/^enum {cudnn_fastest, cudnn_smallest, cudnn_specify};$/;"	e	enum:__anon34
cudnn_half	include/darknet.h	/^    int cudnn_half;$/;"	m	struct:network
cudnn_handle	src/dark_cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
cudnn_local_avgpool_setup	src/maxpool_layer.c	/^void cudnn_local_avgpool_setup(layer *l)$/;"	f
cudnn_maxpool_setup	src/maxpool_layer.c	/^void cudnn_maxpool_setup(layer *l)$/;"	f
cudnn_smallest	src/dark_cuda.h	/^enum {cudnn_fastest, cudnn_smallest, cudnn_specify};$/;"	e	enum:__anon34
cudnn_specify	src/dark_cuda.h	/^enum {cudnn_fastest, cudnn_smallest, cudnn_specify};$/;"	e	enum:__anon34
cur_bbox_vec	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> cur_bbox_vec;$/;"	m	class:Tracker_optflow
cur_gpu_id	include/yolo_v2_class.hpp	/^    const int cur_gpu_id;$/;"	m	class:Detector
cur_iteration	include/darknet.h	/^    int *cur_iteration;$/;"	m	struct:network
cur_pts_flow	include/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow, cur_pts_flow;$/;"	m	class:Tracker_optflow
cur_pts_flow_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat prev_pts_flow_gpu, cur_pts_flow_gpu;$/;"	m	class:Tracker_optflow
cur_x	3rdparty/stb/include/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon20
cur_y	3rdparty/stb/include/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon20
current_class_id	src/compare.c	/^int current_class_id = 0;$/;"	v
current_detection	include/yolo_v2_class.hpp	/^        bool current_detection;$/;"	m	struct:preview_boxes_t::preview_box_track_t
current_subdivision	include/darknet.h	/^    int current_subdivision;$/;"	m	struct:network
custom_atomic_load_int	src/http_stream.cpp	/^int custom_atomic_load_int(volatile int* obj)$/;"	f
custom_atomic_store_int	src/http_stream.cpp	/^void custom_atomic_store_int(volatile int* obj, int desr)$/;"	f
custom_attr_t	src/http_stream.h	/^typedef void* custom_attr_t;$/;"	t
custom_create_thread	src/http_stream.cpp	/^int custom_create_thread(custom_thread_t * tid, const custom_attr_t * attr, void *(*func) (void *), void *arg)$/;"	f
custom_get_region_detections	src/network.c	/^void custom_get_region_detections(layer l, int w, int h, int net_w, int net_h, float thresh, int *map, float hier, int relative, detection *dets, int letter)$/;"	f
custom_hash	src/utils.c	/^unsigned long custom_hash(char *str)$/;"	f
custom_join	src/http_stream.cpp	/^int custom_join(custom_thread_t tid, void **value_ptr)$/;"	f
custom_thread_t	src/http_stream.h	/^typedef void* custom_thread_t;$/;"	t
cv_draw_object	src/image_opencv.cpp	/^extern "C" void cv_draw_object(image sized, float *truth_cpu, int max_boxes, int num_truth, int *it_num_set, float *lr_set, int *boxonly, int classes, char **names)$/;"	f
cv_images	src/demo.c	/^static mat_cv** cv_images;$/;"	v	file:
cwd	build/darknet/x64/darknet.py	/^    cwd = os.path.dirname(__file__)$/;"	v
cwd	darknet.py	/^    cwd = os.path.dirname(__file__)$/;"	v
cweights	include/darknet.h	/^    char  * cweights;$/;"	m	struct:layer
d	include/darknet.h	/^    data *d;$/;"	m	struct:load_args
d	src/network_kernels.cu	/^    data d;$/;"	m	struct:__anon38	file:
dT	include/yolo_v2_class.hpp	/^    float dT;$/;"	m	class:track_kalman_t
dark_cuda.c	src/dark_cuda.c	1;"	F
dark_cuda.h	src/dark_cuda.h	1;"	F
darknet.c	src/darknet.c	1;"	F
darknet.h	include/darknet.h	1;"	F
darknet.py	build/darknet/x64/darknet.py	1;"	F
darknet.py	darknet.py	1;"	F
darknet_coco.cmd	build/darknet/x64/darknet_coco.cmd	1;"	F
darknet_coco_9000.cmd	build/darknet/x64/darknet_coco_9000.cmd	1;"	F
darknet_coco_9000_demo.cmd	build/darknet/x64/darknet_coco_9000_demo.cmd	1;"	F
darknet_demo_coco.cmd	build/darknet/x64/darknet_demo_coco.cmd	1;"	F
darknet_demo_json_stream.cmd	build/darknet/x64/darknet_demo_json_stream.cmd	1;"	F
darknet_demo_mjpeg_stream.cmd	build/darknet/x64/darknet_demo_mjpeg_stream.cmd	1;"	F
darknet_demo_store.cmd	build/darknet/x64/darknet_demo_store.cmd	1;"	F
darknet_demo_voc.cmd	build/darknet/x64/darknet_demo_voc.cmd	1;"	F
darknet_demo_voc_param.cmd	build/darknet/x64/darknet_demo_voc_param.cmd	1;"	F
darknet_demo_voc_tiny.cmd	build/darknet/x64/darknet_demo_voc_tiny.cmd	1;"	F
darknet_height	build/darknet/x64/darknet_video.py	/^    darknet_height = darknet.network_height(network)$/;"	v
darknet_height	darknet_video.py	/^    darknet_height = darknet.network_height(network)$/;"	v
darknet_image_queue	build/darknet/x64/darknet_video.py	/^    darknet_image_queue = Queue(maxsize=1)$/;"	v
darknet_image_queue	darknet_video.py	/^    darknet_image_queue = Queue(maxsize=1)$/;"	v
darknet_images.py	darknet_images.py	1;"	F
darknet_json_reslut.cmd	build/darknet/x64/darknet_json_reslut.cmd	1;"	F
darknet_many_images.cmd	build/darknet/x64/darknet_many_images.cmd	1;"	F
darknet_net_cam_coco.cmd	build/darknet/x64/darknet_net_cam_coco.cmd	1;"	F
darknet_net_cam_voc.cmd	build/darknet/x64/darknet_net_cam_voc.cmd	1;"	F
darknet_python.cmd	build/darknet/x64/darknet_python.cmd	1;"	F
darknet_tiny_v2.cmd	build/darknet/x64/darknet_tiny_v2.cmd	1;"	F
darknet_video.cmd	build/darknet/x64/darknet_video.cmd	1;"	F
darknet_video.py	build/darknet/x64/darknet_video.py	1;"	F
darknet_video.py	darknet_video.py	1;"	F
darknet_voc.cmd	build/darknet/x64/darknet_voc.cmd	1;"	F
darknet_voc_tiny_v2.cmd	build/darknet/x64/darknet_voc_tiny_v2.cmd	1;"	F
darknet_web_cam_voc.cmd	build/darknet/x64/darknet_web_cam_voc.cmd	1;"	F
darknet_width	build/darknet/x64/darknet_video.py	/^    darknet_width = darknet.network_width(network)$/;"	v
darknet_width	darknet_video.py	/^    darknet_width = darknet.network_width(network)$/;"	v
darknet_yolo_v3.cmd	build/darknet/x64/darknet_yolo_v3.cmd	1;"	F
darknet_yolo_v3_openimages.cmd	build/darknet/x64/darknet_yolo_v3_openimages.cmd	1;"	F
darknet_yolo_v3_video.cmd	build/darknet/x64/darknet_yolo_v3_video.cmd	1;"	F
darknet_yolov3_pseudo_labeling.cmd	build/darknet/x64/darknet_yolov3_pseudo_labeling.cmd	1;"	F
darkunistd.h	src/darkunistd.h	1;"	F
data	3rdparty/stb/include/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon9::__anon10
data	include/darknet.h	/^    float *data;$/;"	m	struct:image
data	include/darknet.h	/^typedef struct data data;$/;"	t	typeref:struct:data
data	include/darknet.h	/^typedef struct data {$/;"	s
data	include/darknet.h	/^} data;$/;"	t	typeref:struct:data
data	include/yolo_v2_class.hpp	/^    float *data;                  \/\/ pointer to the image data$/;"	m	struct:image_t
data	src/go.c	/^    char **data;$/;"	m	struct:__anon29	file:
data.c	src/data.c	1;"	F
data.h	src/data.h	1;"	F
data::X	include/darknet.h	/^    matrix X;$/;"	m	struct:data
data::boxes	include/darknet.h	/^    box **boxes;$/;"	m	struct:data
data::h	include/darknet.h	/^    int w, h;$/;"	m	struct:data
data::num_boxes	include/darknet.h	/^    int *num_boxes;$/;"	m	struct:data
data::shallow	include/darknet.h	/^    int shallow;$/;"	m	struct:data
data::w	include/darknet.h	/^    int w, h;$/;"	m	struct:data
data::y	include/darknet.h	/^    matrix y;$/;"	m	struct:data
data_type	include/darknet.h	/^} data_type;$/;"	t	typeref:enum:__anon55
db	include/darknet.h	/^    float dt, db, dl, dr;$/;"	m	struct:dxrep
dbox	src/box.h	/^} dbox;$/;"	t	typeref:struct:__anon37
dc_cpu	include/darknet.h	/^    float *dc_cpu;$/;"	m	struct:layer
dc_gpu	include/darknet.h	/^    float *dc_gpu;$/;"	m	struct:layer
dc_pred	3rdparty/stb/include/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon9::__anon10
dct_bfly32o	3rdparty/stb/include/stb_image.h	2253;"	d
dct_bfly32o	3rdparty/stb/include/stb_image.h	2387;"	d
dct_bfly32o	3rdparty/stb/include/stb_image.h	2439;"	d
dct_bfly32o	3rdparty/stb/include/stb_image.h	2597;"	d
dct_const	3rdparty/stb/include/stb_image.h	2225;"	d
dct_const	3rdparty/stb/include/stb_image.h	2382;"	d
dct_interleave16	3rdparty/stb/include/stb_image.h	2270;"	d
dct_interleave16	3rdparty/stb/include/stb_image.h	2389;"	d
dct_interleave8	3rdparty/stb/include/stb_image.h	2264;"	d
dct_interleave8	3rdparty/stb/include/stb_image.h	2388;"	d
dct_long_mac	3rdparty/stb/include/stb_image.h	2420;"	d
dct_long_mac	3rdparty/stb/include/stb_image.h	2593;"	d
dct_long_mul	3rdparty/stb/include/stb_image.h	2416;"	d
dct_long_mul	3rdparty/stb/include/stb_image.h	2592;"	d
dct_pass	3rdparty/stb/include/stb_image.h	2275;"	d
dct_pass	3rdparty/stb/include/stb_image.h	2390;"	d
dct_pass	3rdparty/stb/include/stb_image.h	2447;"	d
dct_pass	3rdparty/stb/include/stb_image.h	2598;"	d
dct_rot	3rdparty/stb/include/stb_image.h	2229;"	d
dct_rot	3rdparty/stb/include/stb_image.h	2383;"	d
dct_trn16	3rdparty/stb/include/stb_image.h	2507;"	d
dct_trn16	3rdparty/stb/include/stb_image.h	2529;"	d
dct_trn32	3rdparty/stb/include/stb_image.h	2508;"	d
dct_trn32	3rdparty/stb/include/stb_image.h	2530;"	d
dct_trn64	3rdparty/stb/include/stb_image.h	2509;"	d
dct_trn64	3rdparty/stb/include/stb_image.h	2531;"	d
dct_trn8_16	3rdparty/stb/include/stb_image.h	2553;"	d
dct_trn8_16	3rdparty/stb/include/stb_image.h	2588;"	d
dct_trn8_32	3rdparty/stb/include/stb_image.h	2554;"	d
dct_trn8_32	3rdparty/stb/include/stb_image.h	2589;"	d
dct_trn8_8	3rdparty/stb/include/stb_image.h	2552;"	d
dct_trn8_8	3rdparty/stb/include/stb_image.h	2587;"	d
dct_wadd	3rdparty/stb/include/stb_image.h	2243;"	d
dct_wadd	3rdparty/stb/include/stb_image.h	2385;"	d
dct_wadd	3rdparty/stb/include/stb_image.h	2429;"	d
dct_wadd	3rdparty/stb/include/stb_image.h	2595;"	d
dct_widen	3rdparty/stb/include/stb_image.h	2238;"	d
dct_widen	3rdparty/stb/include/stb_image.h	2384;"	d
dct_widen	3rdparty/stb/include/stb_image.h	2424;"	d
dct_widen	3rdparty/stb/include/stb_image.h	2594;"	d
dct_wsub	3rdparty/stb/include/stb_image.h	2248;"	d
dct_wsub	3rdparty/stb/include/stb_image.h	2386;"	d
dct_wsub	3rdparty/stb/include/stb_image.h	2434;"	d
dct_wsub	3rdparty/stb/include/stb_image.h	2596;"	d
ddstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
ddstTensorDesc	include/darknet.h	/^    void* dsrcTensorDesc, *ddstTensorDesc;$/;"	m	struct:layer
ddstTensorDesc16	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc16, ddstTensorDesc16;$/;"	m	struct:layer
ddstTensorDesc16	include/darknet.h	/^    void* dsrcTensorDesc16, *ddstTensorDesc16;$/;"	m	struct:layer
decay	include/darknet.h	/^    float decay;$/;"	m	struct:network
decay	include/darknet.h	/^    float decay;$/;"	m	struct:update_args
decode_box	src/box.c	/^box decode_box(box b, box anchor)$/;"	f
decode_detection	build/darknet/x64/darknet.py	/^def decode_detection(detections):$/;"	f
decode_detection	darknet.py	/^def decode_detection(detections):$/;"	f
decode_url	src/httplib.h	/^inline std::string decode_url(const std::string &s) {$/;"	f	namespace:httplib::detail
decompress	src/httplib.h	/^  bool decompress(const char *data, size_t data_length, T callback) {$/;"	f	class:httplib::detail::decompressor
decompressor	src/httplib.h	/^  decompressor() {$/;"	f	class:httplib::detail::decompressor
decompressor	src/httplib.h	/^class decompressor {$/;"	c	namespace:httplib::detail
deconvolutional_kernels.cu	src/deconvolutional_kernels.cu	1;"	F
deconvolutional_layer	src/deconvolutional_layer.h	/^typedef layer deconvolutional_layer;$/;"	t
deconvolutional_layer.c	src/deconvolutional_layer.c	1;"	F
deconvolutional_layer.h	src/deconvolutional_layer.h	1;"	F
deconvolutional_out_height	src/deconvolutional_layer.c	/^int deconvolutional_out_height(deconvolutional_layer l)$/;"	f
deconvolutional_out_size	src/deconvolutional_layer.c	/^int deconvolutional_out_size(deconvolutional_layer l)$/;"	f
deconvolutional_out_width	src/deconvolutional_layer.c	/^int deconvolutional_out_width(deconvolutional_layer l)$/;"	f
deform	include/darknet.h	/^    int deform;$/;"	m	struct:layer
deinter_cpu	src/blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	scripts/kmeansiou.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
del_arg	src/utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delay	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
delete_handlers_	src/httplib.h	/^  Handlers delete_handlers_;$/;"	m	class:httplib::Server
delete_json_sender	src/http_stream.cpp	/^void delete_json_sender()$/;"	f
delta	3rdparty/stb/include/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon8
delta	include/darknet.h	/^    float * delta;$/;"	m	struct:layer
delta	include/darknet.h	/^    float *delta;$/;"	m	struct:network
delta	include/darknet.h	/^    float *delta;$/;"	m	struct:network_state
delta_gaussian_yolo_box	src/gaussian_yolo_layer.c	/^float delta_gaussian_yolo_box(box truth, float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, float *delta,$/;"	f
delta_gaussian_yolo_class	src/gaussian_yolo_layer.c	/^void delta_gaussian_yolo_class(float *output, float *delta, int index, int class_id, int classes, int stride, float *avg_cat, float label_smooth_eps, float *classes_multipliers, float cls_normalizer)$/;"	f
delta_gpu	include/darknet.h	/^    float * delta_gpu;$/;"	m	struct:layer
delta_gpu	include/darknet.h	/^    float *delta_gpu;$/;"	m	struct:network
delta_normalizer	include/darknet.h	/^    float delta_normalizer;$/;"	m	struct:layer
delta_pinned	include/darknet.h	/^    int delta_pinned;$/;"	m	struct:layer
delta_region_box	src/region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale)$/;"	f
delta_region_class	src/region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class_id, int classes, tree *hier, float scale, float *avg_cat, int focal_loss)$/;"	f
delta_rolling_avg	include/darknet.h	/^    float *delta_rolling_avg;$/;"	m	struct:network
delta_rolling_max	include/darknet.h	/^    float *delta_rolling_max;$/;"	m	struct:network
delta_rolling_std	include/darknet.h	/^    float *delta_rolling_std;$/;"	m	struct:network
delta_yolo_box	src/yolo_layer.c	/^ious delta_yolo_box(box truth, float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, float *delta, float scale, int stride, float iou_normalizer, IOU_LOSS iou_loss, int accumulate, float max_delta, int *rewritten_bbox, int new_coords)$/;"	f
delta_yolo_class	src/yolo_layer.c	/^void delta_yolo_class(float *output, float *delta, int index, int class_id, int classes, int stride, float *avg_cat, int focal_loss, float label_smooth_eps, float *classes_multipliers, float cls_normalizer)$/;"	f
demo	src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, float hier_thresh, int cam_index, const char *filename, char **names, int classes, int avgframes,$/;"	f
demo.c	src/demo.c	1;"	F
demo.h	src/demo.h	1;"	F
demo_alphabet	src/demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_art	src/art.c	/^void demo_art(char *cfgfile, char *weightfile, int cam_index)$/;"	f
demo_classes	src/demo.c	/^static int demo_classes;$/;"	v	file:
demo_classifier	src/classifier.c	/^void demo_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename, int benchmark, int benchmark_layers)$/;"	f
demo_ext_output	src/demo.c	/^static int demo_ext_output = 0;$/;"	v	file:
demo_index	src/demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_index	src/yolo_v2_class.cpp	/^    int demo_index;$/;"	m	struct:detector_gpu_t	file:
demo_json_port	src/demo.c	/^static int demo_json_port = -1;$/;"	v	file:
demo_names	src/demo.c	/^static char **demo_names;$/;"	v	file:
demo_skip_frame	src/demo.c	/^static bool demo_skip_frame = false;$/;"	v	file:
demo_thresh	src/demo.c	/^static float demo_thresh = 0;$/;"	v	file:
denormalize_connected_layer	src/connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	src/convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_net	src/darknet.c	/^void denormalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
deploy-cuda.sh	scripts/deploy-cuda.sh	1;"	F
depth	3rdparty/stb/include/stb_image.h	/^   int depth;$/;"	m	struct:__anon15
dequant	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon9
derivative	src/box.c	/^dbox derivative(box a, box b)$/;"	f
destroy_all_windows_cv	src/image_opencv.cpp	/^extern "C" void destroy_all_windows_cv() {}$/;"	f
destroy_all_windows_cv	src/image_opencv.cpp	/^extern "C" void destroy_all_windows_cv()$/;"	f
det	src/box.h	/^	detection det;$/;"	m	struct:detection_with_class
det_count	src/http_stream.cpp	/^    int det_count;$/;"	m	struct:detection_t	file:
det_img	src/demo.c	/^mat_cv* det_img;$/;"	v
det_num_pair	include/darknet.h	/^typedef struct det_num_pair {$/;"	s
det_num_pair	include/darknet.h	/^} det_num_pair, *pdet_num_pair;$/;"	t	typeref:struct:det_num_pair
det_num_pair::dets	include/darknet.h	/^    detection *dets;$/;"	m	struct:det_num_pair
det_num_pair::num	include/darknet.h	/^    int num;$/;"	m	struct:det_num_pair
det_s	src/demo.c	/^static image det_s;$/;"	v	file:
detail	src/httplib.h	/^namespace detail {$/;"	n	namespace:httplib
detect	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> detect(cv::Mat mat, float thresh = 0.2, bool use_mean = false)$/;"	f	class:Detector
detect	src/yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::detect(image_t img, float thresh, bool use_mean)$/;"	f	class:Detector
detect	src/yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::detect(std::string image_filename, float thresh, bool use_mean)$/;"	f	class:Detector
detectBatch	src/yolo_v2_class.cpp	/^LIB_API std::vector<std::vector<bbox_t>> Detector::detectBatch(image_t img, int batch_size, int width, int height, float thresh, bool make_nms)$/;"	f	class:Detector
detect_image	build/darknet/x64/darknet.py	/^def detect_image(network, class_names, image, thresh=.5, hier_thresh=.5, nms=.45):$/;"	f
detect_image	darknet.py	/^def detect_image(network, class_names, image, thresh=.5, hier_thresh=.5, nms=.45):$/;"	f
detect_image	src/yolo_v2_class.cpp	/^int detect_image(const char *filename, bbox_t_container &container)$/;"	f
detect_in_thread	src/demo.c	/^void *detect_in_thread(void *ptr)$/;"	f
detect_in_thread_sync	src/demo.c	/^void *detect_in_thread_sync(void *ptr)$/;"	f
detect_mat	src/yolo_v2_class.cpp	/^int detect_mat(const uint8_t* data, const size_t data_length, bbox_t_container &container) {$/;"	f
detect_resized	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> detect_resized(image_t img, int init_w, int init_h, float thresh = 0.2, bool use_mean = false)$/;"	f	class:Detector
detection	include/darknet.h	/^    int detection;$/;"	m	struct:layer
detection	include/darknet.h	/^typedef struct detection detection;$/;"	t	typeref:struct:detection
detection	include/darknet.h	/^typedef struct detection{$/;"	s
detection	include/darknet.h	/^} detection;$/;"	t	typeref:struct:detection
detection::bbox	include/darknet.h	/^    box bbox;$/;"	m	struct:detection
detection::best_class_idx	include/darknet.h	/^    int best_class_idx;$/;"	m	struct:detection
detection::classes	include/darknet.h	/^    int classes;$/;"	m	struct:detection
detection::embedding_size	include/darknet.h	/^    int embedding_size;$/;"	m	struct:detection
detection::embeddings	include/darknet.h	/^    float *embeddings;  \/\/ embeddings for tracking$/;"	m	struct:detection
detection::mask	include/darknet.h	/^    float *mask;$/;"	m	struct:detection
detection::objectness	include/darknet.h	/^    float objectness;$/;"	m	struct:detection
detection::points	include/darknet.h	/^    int points; \/\/ bit-0 - center, bit-1 - top-left-corner, bit-2 - bottom-right-corner$/;"	m	struct:detection
detection::prob	include/darknet.h	/^    float *prob;$/;"	m	struct:detection
detection::sim	include/darknet.h	/^    float sim;$/;"	m	struct:detection
detection::sort_class	include/darknet.h	/^    int sort_class;$/;"	m	struct:detection
detection::track_id	include/darknet.h	/^    int track_id;$/;"	m	struct:detection
detection::uc	include/darknet.h	/^    float *uc; \/\/ Gaussian_YOLOv3 - tx,ty,tw,th uncertainty$/;"	m	struct:detection
detection_count	include/yolo_v2_class.hpp	/^        int detection_count;$/;"	m	struct:track_kalman_t::tst_t
detection_layer	src/detection_layer.h	/^typedef layer detection_layer;$/;"	t
detection_layer.c	src/detection_layer.c	1;"	F
detection_layer.h	src/detection_layer.h	1;"	F
detection_t	src/http_stream.cpp	/^    detection_t(detection det) : detection(det), det_count(0)$/;"	f	struct:detection_t
detection_t	src/http_stream.cpp	/^    detection_t(detection_t const& det) : detection(det)$/;"	f	struct:detection_t
detection_t	src/http_stream.cpp	/^struct detection_t : detection {$/;"	s	file:
detection_t::det_count	src/http_stream.cpp	/^    int det_count;$/;"	m	struct:detection_t	file:
detection_t::detection_t	src/http_stream.cpp	/^    detection_t(detection det) : detection(det), det_count(0)$/;"	f	struct:detection_t
detection_t::detection_t	src/http_stream.cpp	/^    detection_t(detection_t const& det) : detection(det)$/;"	f	struct:detection_t
detection_t::~detection_t	src/http_stream.cpp	/^    ~detection_t() {$/;"	f	struct:detection_t
detection_to_json	src/network.c	/^char *detection_to_json(detection *dets, int nboxes, int classes, char **names, long long int frame_id, char *filename)$/;"	f
detection_with_class	src/box.h	/^typedef struct detection_with_class {$/;"	s
detection_with_class	src/box.h	/^} detection_with_class;$/;"	t	typeref:struct:detection_with_class
detection_with_class::best_class	src/box.h	/^	int best_class;$/;"	m	struct:detection_with_class
detection_with_class::det	src/box.h	/^	detection det;$/;"	m	struct:detection_with_class
detections_comparator	src/detector.c	/^int detections_comparator(const void *pa, const void *pb)$/;"	f
detections_queue	build/darknet/x64/darknet_video.py	/^    detections_queue = Queue(maxsize=1)$/;"	v
detections_queue	darknet_video.py	/^    detections_queue = Queue(maxsize=1)$/;"	v
detector	src/yolo_v2_class.cpp	/^static std::unique_ptr<Detector> detector;$/;"	v	file:
detector.c	src/detector.c	1;"	F
detector_gpu_ptr	include/yolo_v2_class.hpp	/^    std::shared_ptr<void> detector_gpu_ptr;$/;"	m	class:Detector
detector_gpu_t	src/yolo_v2_class.cpp	/^struct detector_gpu_t {$/;"	s	file:
detector_gpu_t::avg	src/yolo_v2_class.cpp	/^    float *avg;$/;"	m	struct:detector_gpu_t	file:
detector_gpu_t::demo_index	src/yolo_v2_class.cpp	/^    int demo_index;$/;"	m	struct:detector_gpu_t	file:
detector_gpu_t::images	src/yolo_v2_class.cpp	/^    image images[NFRAMES];$/;"	m	struct:detector_gpu_t	file:
detector_gpu_t::net	src/yolo_v2_class.cpp	/^    network net;$/;"	m	struct:detector_gpu_t	file:
detector_gpu_t::predictions	src/yolo_v2_class.cpp	/^    float* predictions[NFRAMES];$/;"	m	struct:detector_gpu_t	file:
detector_gpu_t::track_id	src/yolo_v2_class.cpp	/^    unsigned int *track_id;$/;"	m	struct:detector_gpu_t	file:
dets	include/darknet.h	/^    detection *dets;$/;"	m	struct:det_num_pair
dets	src/demo.c	/^static detection *dets = NULL;$/;"	v	file:
dets_for_show	include/darknet.h	/^    int dets_for_show;$/;"	m	struct:layer
dets_for_track	include/darknet.h	/^    int dets_for_track;$/;"	m	struct:layer
dh	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon37
dh_cpu	include/darknet.h	/^    float *dh_cpu;$/;"	m	struct:layer
dh_gpu	include/darknet.h	/^    float *dh_gpu;$/;"	m	struct:layer
dice.c	src/dice.c	1;"	F
dice_label.sh	scripts/dice_label.sh	1;"	F
dice_labels	src/dice.c	/^char *dice_labels[] = {"face1","face2","face3","face4","face5","face6"};$/;"	v
dilation	include/darknet.h	/^    int dilation;$/;"	m	struct:layer
dintersect	src/box.c	/^dbox dintersect(box a, box b)$/;"	f
diou	include/darknet.h	/^    float iou, giou, diou, ciou;$/;"	m	struct:ious
diou	src/box.c	/^dbox diou(box a, box b)$/;"	f
diounms_sort	src/box.c	/^void diounms_sort(detection *dets, int total, int classes, float thresh, NMS_KIND nms_kind, float beta1)$/;"	f
dispatch_request	src/httplib.h	/^inline bool Server::dispatch_request(Request &req, Response &res,$/;"	f	class:httplib::Server
dispatch_request_for_content_reader	src/httplib.h	/^Server::dispatch_request_for_content_reader(Request &req, Response &res,$/;"	f	class:httplib::Server
dispose	src/yolo_v2_class.cpp	/^int dispose() {$/;"	f
dist	scripts/kmeansiou.c	/^double dist(double *x, double *y, int n)$/;"	f
dist	src/matrix.c	/^float dist(float *x, float *y, int n)$/;"	f
dist_array	src/utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
dist_to_closest_center	scripts/kmeansiou.c	/^double dist_to_closest_center(double *datum, matrix centers)$/;"	f
dist_to_closest_center	src/matrix.c	/^float dist_to_closest_center(float *datum, matrix centers)$/;"	f
distance_from_edge	src/data.h	/^static inline float distance_from_edge(int x, int max)$/;"	f
distort_image	src/image.c	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
distribute_updates	src/network_kernels.cu	/^void distribute_updates(layer l, layer base)$/;"	f
distribute_weights	src/network_kernels.cu	/^void distribute_weights(layer l, layer base)$/;"	f
dl	include/darknet.h	/^    float dt, db, dl, dr;$/;"	m	struct:dxrep
do_kmeans	scripts/kmeansiou.c	/^model do_kmeans(matrix data, int k)$/;"	f
do_kmeans	src/matrix.c	/^model do_kmeans(matrix data, int k)$/;"	f
do_nms	src/box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	build/darknet/x64/darknet.py	/^do_nms_obj = lib.do_nms_obj$/;"	v
do_nms_obj	darknet.py	/^do_nms_obj = lib.do_nms_obj$/;"	v
do_nms_obj	src/box.c	/^void do_nms_obj(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort	build/darknet/x64/darknet.py	/^do_nms_sort = lib.do_nms_sort$/;"	v
do_nms_sort	darknet.py	/^do_nms_sort = lib.do_nms_sort$/;"	v
do_nms_sort	src/box.c	/^void do_nms_sort(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort_v2	src/box.c	/^void do_nms_sort_v2(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_python_eval	build/darknet/x64/reval_voc_py3.py	/^def do_python_eval(devkit_path, year, image_set, classes, output_dir = 'results'):$/;"	f
do_python_eval	scripts/reval_voc.py	/^def do_python_eval(devkit_path, year, image_set, classes, output_dir = 'results'):$/;"	f
do_python_eval	scripts/reval_voc_py3.py	/^def do_python_eval(devkit_path, year, image_set, classes, output_dir = 'results'):$/;"	f
does_cost	include/darknet.h	/^    int does_cost;$/;"	m	struct:layer
done	3rdparty/pthreads/include/pthread.h	/^  int          done;        \/* indicates if user function has been executed *\/$/;"	m	struct:pthread_once_t_
dont_update	include/darknet.h	/^    int dont_update;$/;"	m	struct:layer
dontload	include/darknet.h	/^    int dontload;$/;"	m	struct:layer
dontloadscales	include/darknet.h	/^    int dontloadscales;$/;"	m	struct:layer
dontsave	include/darknet.h	/^    int dontsave;$/;"	m	struct:layer
dontuse_opencv	include/darknet.h	/^    int dontuse_opencv;$/;"	m	struct:load_args
dot	include/darknet.h	/^    float dot;$/;"	m	struct:layer
dot_cpu	src/blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
double_rand	src/utils.c	/^double double_rand(void)$/;"	f
dr	include/darknet.h	/^    float dt, db, dl, dr;$/;"	m	struct:dxrep
draw	include/yolo_v2_class.hpp	/^    void draw(cv::Mat draw_mat, bool show_small_boxes = false)$/;"	f	class:preview_boxes_t
draw_bbox	src/image.c	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	src/image.c	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_bw	src/image.c	/^void draw_box_bw(image a, int x1, int y1, int x2, int y2, float brightness)$/;"	f
draw_box_width	src/image.c	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_box_width_bw	src/image.c	/^void draw_box_width_bw(image a, int x1, int y1, int x2, int y2, int w, float brightness)$/;"	f
draw_boxes	build/darknet/x64/darknet.py	/^def draw_boxes(detections, image, colors):$/;"	f
draw_boxes	darknet.py	/^def draw_boxes(detections, image, colors):$/;"	f
draw_boxes	src/yolo_console_dll.cpp	/^void draw_boxes(cv::Mat mat_img, std::vector<bbox_t> result_vec, std::vector<std::string> obj_names,$/;"	f
draw_detections	src/image.c	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
draw_detections_cv_v3	src/image_opencv.cpp	/^extern "C" void draw_detections_cv_v3(mat_cv* mat, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)$/;"	f
draw_detections_v3	src/image.c	/^void draw_detections_v3(image im, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)$/;"	f
draw_label	src/image.c	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
draw_object	src/detector.c	/^void draw_object(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, int dont_show, int it_num,$/;"	f
draw_select	src/image_opencv.cpp	/^std::atomic<bool> draw_select, selected;$/;"	v
draw_train_chart	src/image_opencv.cpp	/^extern "C" mat_cv* draw_train_chart(char *windows_name, float max_img_loss, int max_batches, int number_of_lines, int img_size, int dont_show, char* chart_path)$/;"	f
draw_train_loss	src/image_opencv.cpp	/^extern "C" void draw_train_loss(char *windows_name, mat_cv* img_src, int img_size, float avg_loss, float max_img_loss, int current_batch, int max_batches,$/;"	f
draw_weighted_label	src/image.c	/^void draw_weighted_label(image a, int r, int c, image label, const float *rgb, const float alpha)$/;"	f
drawing	build/darknet/x64/darknet_video.py	/^def drawing(frame_queue, detections_queue, fps_queue):$/;"	f
drawing	darknet_video.py	/^def drawing(frame_queue, detections_queue, fps_queue):$/;"	f
drop_blocks_scale	include/darknet.h	/^    float * drop_blocks_scale;$/;"	m	struct:layer
drop_blocks_scale_gpu	include/darknet.h	/^    float * drop_blocks_scale_gpu;$/;"	m	struct:layer
dropblock	include/darknet.h	/^    int dropblock;$/;"	m	struct:layer
dropblock_fast_kernel	src/dropout_layer_kernels.cu	/^__global__ void dropblock_fast_kernel(float *rand, float prob, int w, int h, int spatial, int filters, int batch, int block_size, float *drop_blocks_scale, float *output)$/;"	f
dropblock_size_abs	include/darknet.h	/^    int dropblock_size_abs;$/;"	m	struct:layer
dropblock_size_rel	include/darknet.h	/^    float dropblock_size_rel;$/;"	m	struct:layer
dropout_layer	src/dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dropout_layer.c	src/dropout_layer.c	1;"	F
dropout_layer.h	src/dropout_layer.h	1;"	F
dropout_layer_kernels.cu	src/dropout_layer_kernels.cu	1;"	F
dsrcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
dsrcTensorDesc	include/darknet.h	/^    void* dsrcTensorDesc, *ddstTensorDesc;$/;"	m	struct:layer
dsrcTensorDesc16	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc16, ddstTensorDesc16;$/;"	m	struct:layer
dsrcTensorDesc16	include/darknet.h	/^    void* dsrcTensorDesc16, *ddstTensorDesc16;$/;"	m	struct:layer
dstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
dstTensorDesc	include/darknet.h	/^    void* srcTensorDesc, *dstTensorDesc;$/;"	m	struct:layer
dstTensorDesc16	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc16, dstTensorDesc16;$/;"	m	struct:layer
dstTensorDesc16	include/darknet.h	/^    void* srcTensorDesc16, *dstTensorDesc16;$/;"	m	struct:layer
dst_grey	include/yolo_v2_class.hpp	/^    cv::Mat dst_grey;$/;"	m	class:Tracker_optflow
dst_grey_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat dst_mat_gpu, dst_grey_gpu;$/;"	m	class:Tracker_optflow
dst_mat_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat dst_mat_gpu, dst_grey_gpu;$/;"	m	class:Tracker_optflow
dt	include/darknet.h	/^    float dt, db, dl, dr;$/;"	m	struct:dxrep
dunion	src/box.c	/^dbox dunion(box a, box b)$/;"	f
dup2	src/darkunistd.h	28;"	d
dw	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon37
dweightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t dweightDesc, dweightDesc16;$/;"	m	struct:layer
dweightDesc	include/darknet.h	/^    void* dweightDesc, *dweightDesc16;$/;"	m	struct:layer
dweightDesc16	include/darknet.h	/^    cudnnFilterDescriptor_t dweightDesc, dweightDesc16;$/;"	m	struct:layer
dweightDesc16	include/darknet.h	/^    void* dweightDesc, *dweightDesc16;$/;"	m	struct:layer
dx	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon37
dx_box_iou	src/box.c	/^dxrep dx_box_iou(box pred, box truth, IOU_LOSS iou_loss) {$/;"	f
dx_giou	include/darknet.h	/^    dxrep dx_giou;$/;"	m	struct:ious
dx_iou	include/darknet.h	/^    dxrep dx_iou;$/;"	m	struct:ious
dxrep	include/darknet.h	/^typedef struct dxrep {$/;"	s
dxrep	include/darknet.h	/^} dxrep;$/;"	t	typeref:struct:dxrep
dxrep::db	include/darknet.h	/^    float dt, db, dl, dr;$/;"	m	struct:dxrep
dxrep::dl	include/darknet.h	/^    float dt, db, dl, dr;$/;"	m	struct:dxrep
dxrep::dr	include/darknet.h	/^    float dt, db, dl, dr;$/;"	m	struct:dxrep
dxrep::dt	include/darknet.h	/^    float dt, db, dl, dr;$/;"	m	struct:dxrep
dy	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon37
dynamic_minibatch	include/darknet.h	/^    int dynamic_minibatch;$/;"	m	struct:layer
dynamic_minibatch	include/darknet.h	/^    int dynamic_minibatch;$/;"	m	struct:network
eflags	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
eliminate_bdd	src/detector.c	/^static void eliminate_bdd(char *buf, char *a)$/;"	f	file:
elo	src/compare.c	/^    float elo;$/;"	m	struct:__anon27	file:
elo_comparator	src/compare.c	/^int elo_comparator(const void*a, const void *b)$/;"	f
elos	src/compare.c	/^    float *elos;$/;"	m	struct:__anon27	file:
elu_activate	src/activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(expf(x)-1);}$/;"	f
elu_activate_kernel	src/activation_kernels.cu	/^__device__ float elu_activate_kernel(float x){return (x >= 0)*x + (x < 0)*(expf(x)-1);}$/;"	f
elu_gradient	src/activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
elu_gradient_kernel	src/activation_kernels.cu	/^__device__ float elu_gradient_kernel(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
ema_alpha	include/darknet.h	/^    float ema_alpha;$/;"	m	struct:network
ema_apply	src/network.c	/^void ema_apply(network net)$/;"	f
ema_update	src/network.c	/^void ema_update(network net, float ema_alpha)$/;"	f
embed_image	src/image.c	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
embedding_layer_id	include/darknet.h	/^    int embedding_layer_id;$/;"	m	struct:layer
embedding_output	include/darknet.h	/^    float *embedding_output;$/;"	m	struct:layer
embedding_size	include/darknet.h	/^    int embedding_size;$/;"	m	struct:detection
embedding_size	include/darknet.h	/^    int embedding_size;$/;"	m	struct:layer
embeddings	include/darknet.h	/^    float *embeddings;  \/\/ embeddings for tracking$/;"	m	struct:detection
empty_func	src/parser.c	/^void empty_func(dropout_layer l, network_state state) {$/;"	f
enable_server_certificate_verification	src/httplib.h	/^inline void SSLClient::enable_server_certificate_verification(bool enabled) {$/;"	f	class:httplib::SSLClient
encode_box	src/box.c	/^box encode_box(box b, box anchor)$/;"	f
encode_url	src/httplib.h	/^inline std::string encode_url(const std::string &s) {$/;"	f	namespace:httplib::detail
engine_go	src/go.c	/^void engine_go(char *filename, char *weightfile, int multi)$/;"	f
entry_gaussian_index	src/gaussian_yolo_layer.c	/^static int entry_gaussian_index(layer l, int batch, int location, int entry)$/;"	f	file:
entry_index	src/region_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
entry_index	src/yolo_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
envKeys	build/darknet/x64/darknet.py	/^    envKeys = list()$/;"	v
eob_run	3rdparty/stb/include/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon9
eof	3rdparty/stb/include/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon3
epoch	include/darknet.h	/^    float epoch;$/;"	m	struct:network
eps	include/darknet.h	/^    float eps;$/;"	m	struct:layer
eps	include/darknet.h	/^    float eps;$/;"	m	struct:network
eps	include/darknet.h	/^    float eps;$/;"	m	struct:update_args
equidistant_point	include/darknet.h	/^    int equidistant_point;$/;"	m	struct:network
err	include/yolo_v2_class.hpp	/^    cv::Mat status, err;$/;"	m	class:Tracker_optflow
err	src/network_kernels.cu	/^    float *err;$/;"	m	struct:__anon38	file:
err_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat status_gpu, err_gpu;$/;"	m	class:Tracker_optflow
errno	3rdparty/pthreads/include/pthread.h	1254;"	d
error	scripts/kmeansiou.c	/^void error(char *s){$/;"	f
error	src/utils.c	/^void error(const char * const msg, const char * const filename, const char * const funcname, const int line)$/;"	f
error_handler_	src/httplib.h	/^  Handler error_handler_;$/;"	m	class:httplib::Server
eval_cifar_csv	src/cifar.c	/^void eval_cifar_csv()$/;"	f
event_counter	src/dark_cuda.c	/^static volatile int event_counter = 0;$/;"	v	file:
execute	3rdparty/pthreads/include/pthread.h	/^          void execute( int exec )$/;"	f	class:PThreadCleanup
executeIt	3rdparty/pthreads/include/pthread.h	/^          int             executeIt;$/;"	m	class:PThreadCleanup
execve	src/darkunistd.h	29;"	d
exp_cos_sim	include/darknet.h	/^    float *exp_cos_sim;$/;"	m	struct:layer
exp_sim	include/darknet.h	/^    float exp_sim;$/;"	m	struct:contrastive_params
expand_array_gpu	src/blas_kernels.cu	/^extern "C" void expand_array_gpu(const float *src_gpu, float *dst_gpu, int size, int groups)$/;"	f
expand_array_kernel	src/blas_kernels.cu	/^__global__  void expand_array_kernel(const float *src_gpu, float *dst_gpu, int current_size, int groups)$/;"	f
expanded	3rdparty/stb/include/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:layer
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:load_args
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:network
exposure_image	src/image.c	/^void exposure_image(image im, float sat)$/;"	f
extra	include/darknet.h	/^    int extra;$/;"	m	struct:layer
extract_cifar	src/cifar.c	/^void extract_cifar()$/;"	f
extract_voxel	src/voxel.c	/^void extract_voxel(char *lfile, char *rfile, char *prefix)$/;"	f
f_cpu	include/darknet.h	/^    float *f_cpu;$/;"	m	struct:layer
f_gpu	include/darknet.h	/^    float *f_gpu;$/;"	m	struct:layer
fast	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon12
fast	3rdparty/stb/include/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon8
fast_ac	3rdparty/stb/include/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon9
fast_binarize_weights_gpu	src/convolutional_kernels.cu	/^void fast_binarize_weights_gpu(float *weights, int n, int size, float *binary, float *mean_arr_gpu)$/;"	f
fast_mean_delta_gpu	src/blas_kernels.cu	/^extern "C" void fast_mean_delta_gpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
fast_mean_delta_kernel	src/blas_kernels.cu	/^__global__ void fast_mean_delta_kernel(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
fast_mean_gpu	src/blas_kernels.cu	/^extern "C" void fast_mean_gpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
fast_mean_kernel	src/blas_kernels.cu	/^__global__ void  fast_mean_kernel(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
fast_v_cbn_gpu	src/blas_kernels.cu	/^extern "C" void fast_v_cbn_gpu(const float *x, float *mean, int batch, int filters, int spatial, int minibatch_index, int max_minibatch_index, float *m_avg, float *v_avg, float *variance,$/;"	f
fast_v_cbn_kernel	src/blas_kernels.cu	/^__global__ void  fast_v_cbn_kernel(const float *x, float *mean, int batch, int filters, int spatial, int minibatch_index, int max_minibatch_index, float *m_avg, float *v_avg, float *variance,$/;"	f
fast_variance_delta_gpu	src/blas_kernels.cu	/^extern "C" void fast_variance_delta_gpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
fast_variance_delta_kernel	src/blas_kernels.cu	/^__global__ void  fast_variance_delta_kernel(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
fast_variance_gpu	src/blas_kernels.cu	/^extern "C" void fast_variance_gpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
fast_variance_kernel	src/blas_kernels.cu	/^__global__ void  fast_variance_kernel(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
fetch_in_thread	src/demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f
fetch_in_thread_sync	src/demo.c	/^void *fetch_in_thread_sync(void *ptr)$/;"	f
fgetgo	src/go.c	/^char *fgetgo(FILE *fp)$/;"	f
fgetl	scripts/kmeansiou.c	/^char *fgetl(FILE *fp)$/;"	f
fgetl	src/utils.c	/^char *fgetl(FILE *fp)$/;"	f
file_error	src/utils.c	/^void file_error(const char * const s)$/;"	f
file_extension	src/httplib.h	/^inline std::string file_extension(const std::string &path) {$/;"	f	namespace:httplib::detail
file_request_handler_	src/httplib.h	/^  Handler file_request_handler_;$/;"	m	class:httplib::Server
filename	src/compare.c	/^    char *filename;$/;"	m	struct:__anon27	file:
filename	src/httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFile
filename	src/httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFormData
fileno	src/darkunistd.h	32;"	d
files	src/httplib.h	/^  MultipartFiles files;$/;"	m	struct:httplib::Request
fill_bit_int32	src/gemm.c	/^static inline uint32_t fill_bit_int32(char src) {$/;"	f	file:
fill_bit_int64	src/gemm.c	/^static inline uint64_t fill_bit_int64(char src) {$/;"	f	file:
fill_cpu	src/blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	src/data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_image	src/image.c	/^void fill_image(image m, float s)$/;"	f
fill_int8_gpu	src/im2col_kernels.cu	/^void fill_int8_gpu(unsigned char *src, unsigned char val, size_t size) {$/;"	f
fill_int8_gpu_kernel	src/im2col_kernels.cu	/^__global__ void fill_int8_gpu_kernel(unsigned char *src, unsigned char val, size_t size) {$/;"	f
fill_kernel	src/blas_kernels.cu	/^__global__ void fill_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_network_boxes	src/network.c	/^void fill_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, detection *dets, int letter)$/;"	f
fill_network_boxes_batch	src/network.c	/^void fill_network_boxes_batch(network *net, int w, int h, float thresh, float hier, int *map, int relative, detection *dets, int letter, int batch)$/;"	f
fill_ongpu	src/blas_kernels.cu	/^extern "C" void fill_ongpu(int N, float ALPHA, float * X, int INCX)$/;"	f
fill_remaining_id	src/http_stream.cpp	/^int fill_remaining_id(detection *new_dets, int new_dets_num, int new_track_id, float thresh, int detection_count)$/;"	f
fill_truth	src/data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	src/data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	src/data.c	/^int fill_truth_detection(const char *path, int num_boxes, int truth_size, float *truth, int classes, int flip, float dx, float dy, float sx, float sy,$/;"	f
fill_truth_region	src/data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_smooth	src/data.c	/^void fill_truth_smooth(char *path, char **labels, int k, float *truth, float label_smooth_eps)$/;"	f
fill_truth_swag	src/data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find_P_constrastive	src/blas.c	/^float find_P_constrastive(size_t i, size_t j, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
find_arg	scripts/kmeansiou.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_arg	src/utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	scripts/kmeansiou.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_char_arg	src/utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_content_type	src/httplib.h	/^inline const char *find_content_type(const std::string &path) {$/;"	f	namespace:httplib::detail
find_float_arg	scripts/kmeansiou.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_float_arg	src/utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	scripts/kmeansiou.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_int_arg	src/utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_max	src/data.c	/^int find_max(float *arr, int size) {$/;"	f
find_replace	src/utils.c	/^void find_replace(const char* str, char* orig, char* rep, char* output)$/;"	f
find_replace_extension	src/utils.c	/^void find_replace_extension(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	src/data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
find_sim	src/blas.c	/^float find_sim(size_t i, size_t j, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
find_state_ids	include/yolo_v2_class.hpp	/^    std::vector<tst_t> find_state_ids(std::vector<bbox_t> result_vec)$/;"	f	class:track_kalman_t
first	3rdparty/stb/include/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon19
first_row_filter	3rdparty/stb/include/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon12
firstsymbol	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon12
fix_data_captcha	src/captcha.c	/^void fix_data_captcha(data d, int mask)$/;"	f
fix_nan_and_inf	src/blas_kernels.cu	/^extern "C" void fix_nan_and_inf(float *input, size_t size)$/;"	f
fix_nan_and_inf_cpu	src/blas.c	/^void fix_nan_and_inf_cpu(float *input, size_t size)$/;"	f
fix_nan_and_inf_kernel	src/blas_kernels.cu	/^__global__ void fix_nan_and_inf_kernel(float *input, size_t size)$/;"	f
fix_nan_inf	src/gaussian_yolo_layer.c	/^static inline float fix_nan_inf(float val)$/;"	f	file:
fix_nan_inf	src/yolo_layer.c	/^static inline float fix_nan_inf(float val)$/;"	f	file:
fixed_buffer_	src/httplib.h	/^  char *fixed_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
fixed_buffer_size_	src/httplib.h	/^  const size_t fixed_buffer_size_;$/;"	m	class:httplib::detail::stream_line_reader
fixed_buffer_used_size_	src/httplib.h	/^  size_t fixed_buffer_used_size_ = 0;$/;"	m	class:httplib::detail::stream_line_reader
flag	src/getopt.c	/^  int* flag; \/* where to save its status, or NULL	*\/$/;"	m	struct:option	file:
flag_exit	src/data.c	/^static volatile int flag_exit;$/;"	v	file:
flag_exit	src/demo.c	/^static volatile int flag_exit;$/;"	v	file:
flags	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
flatten	include/darknet.h	/^    int flatten;$/;"	m	struct:layer
flatten	src/blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flatten_kernel	src/blas_kernels.cu	/^__global__ void flatten_kernel(int N, float *x, int spatial, int layers, int batch, int forward, float *out)$/;"	f
flatten_ongpu	src/blas_kernels.cu	/^extern "C" void flatten_ongpu(float *x, int spatial, int layers, int batch, int forward, float *out)$/;"	f
flip	include/darknet.h	/^    int flip; \/\/ horizontal flip 50% probability augmentaiont for classifier training (default = 1)$/;"	m	struct:network
flip	include/darknet.h	/^    int flip;$/;"	m	struct:layer
flip	include/darknet.h	/^    int flip;$/;"	m	struct:load_args
flip_board	src/go.c	/^void flip_board(float *board)$/;"	f
flip_image	src/image.c	/^void flip_image(image a)$/;"	f
flipped	include/darknet.h	/^    int flipped;$/;"	m	struct:layer
float_abs_compare	src/cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_pair	src/rnn.c	/^} float_pair;$/;"	t	typeref:struct:__anon33	file:
float_pair	src/rnn_vid.c	/^} float_pair;$/;"	t	typeref:struct:__anon26	file:
float_to_bit	src/gemm.c	/^void float_to_bit(float *src, unsigned char *dst, size_t size)$/;"	f
float_to_bit_gpu	src/im2col_kernels.cu	/^void float_to_bit_gpu(float *src, unsigned char *dst, size_t size)$/;"	f
float_to_bit_gpu_kernel	src/im2col_kernels.cu	/^__global__ void float_to_bit_gpu_kernel(float *src, unsigned char *dst, size_t size)$/;"	f
float_to_box	src/box.c	/^box float_to_box(float *f)$/;"	f
float_to_box_stride	src/box.c	/^box float_to_box_stride(float *f, int stride)$/;"	f
float_to_image	src/image.c	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
float_to_image_scaled	src/image.c	/^image float_to_image_scaled(int w, int h, int c, float *data)$/;"	f
flow_error	include/yolo_v2_class.hpp	/^    const int flow_error;$/;"	m	class:Tracker_optflow
focal_loss	include/darknet.h	/^    int focal_loss;$/;"	m	struct:layer
focus	include/darknet.h	/^    float focus;$/;"	m	struct:layer
follow_location	src/httplib.h	/^inline void Client::follow_location(bool on) { follow_location_ = on; }$/;"	f	class:httplib::Client
follow_location_	src/httplib.h	/^  size_t follow_location_;$/;"	m	class:httplib::Client
font	build/darknet/x64/data/labels/make_labels.py	/^font = 'futura-normal'$/;"	v
font	data/labels/make_labels.py	/^font = 'futura-normal'$/;"	v
forced	include/darknet.h	/^    int forced;$/;"	m	struct:layer
forgot_delta	include/darknet.h	/^    float * forgot_delta;$/;"	m	struct:layer
forgot_delta_gpu	include/darknet.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer
forgot_state	include/darknet.h	/^    float * forgot_state;$/;"	m	struct:layer
forgot_state_gpu	include/darknet.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer
forward	include/darknet.h	/^    void(*forward)   (struct layer, struct network_state);$/;"	m	struct:layer
forward_activation_layer	src/activation_layer.c	/^void forward_activation_layer(layer l, network_state state)$/;"	f
forward_activation_layer_gpu	src/activation_layer.c	/^void forward_activation_layer_gpu(layer l, network_state state)$/;"	f
forward_avgpool_layer	src/avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
forward_avgpool_layer_gpu	src/avgpool_layer_kernels.cu	/^extern "C" void forward_avgpool_layer_gpu(avgpool_layer layer, network_state state)$/;"	f
forward_avgpool_layer_kernel	src/avgpool_layer_kernels.cu	/^__global__ void forward_avgpool_layer_kernel(int n, int w, int h, int c, float *input, float *output)$/;"	f
forward_backward_network_gpu	src/network_kernels.cu	/^void forward_backward_network_gpu(network net, float *x, float *y)$/;"	f
forward_batchnorm_layer	src/batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network_state state)$/;"	f
forward_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
forward_blank_layer	src/network.c	/^void forward_blank_layer(layer l, network_state state) {}$/;"	f
forward_connected_layer	src/connected_layer.c	/^void forward_connected_layer(connected_layer l, network_state state)$/;"	f
forward_connected_layer_gpu	src/connected_layer.c	/^void forward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
forward_contrastive_layer	src/softmax_layer.c	/^void forward_contrastive_layer(contrastive_layer l, network_state state)$/;"	f
forward_contrastive_layer_gpu	src/softmax_layer.c	/^void forward_contrastive_layer_gpu(contrastive_layer l, network_state state)$/;"	f
forward_conv_lstm_layer	src/conv_lstm_layer.c	/^void forward_conv_lstm_layer(layer l, network_state state)$/;"	f
forward_conv_lstm_layer_gpu	src/conv_lstm_layer.c	/^void forward_conv_lstm_layer_gpu(layer l, network_state state)$/;"	f
forward_convolutional_layer	src/convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
forward_convolutional_layer_gpu	src/convolutional_kernels.cu	/^void forward_convolutional_layer_gpu(convolutional_layer l, network_state state)$/;"	f
forward_cost_layer	src/cost_layer.c	/^void forward_cost_layer(cost_layer l, network_state state)$/;"	f
forward_cost_layer_gpu	src/cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network_state state)$/;"	f
forward_crnn_layer	src/crnn_layer.c	/^void forward_crnn_layer(layer l, network_state state)$/;"	f
forward_crnn_layer_gpu	src/crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network_state state)$/;"	f
forward_crop_layer	src/crop_layer.c	/^void forward_crop_layer(const crop_layer l, network_state state)$/;"	f
forward_crop_layer_gpu	src/crop_layer_kernels.cu	/^extern "C" void forward_crop_layer_gpu(crop_layer layer, network_state state)$/;"	f
forward_crop_layer_kernel	src/crop_layer_kernels.cu	/^__global__ void forward_crop_layer_kernel(float *input, float *rand, int size, int c, int h, int w, int crop_height, int crop_width, int train, int flip, float angle, float *output)$/;"	f
forward_deconvolutional_layer	src/deconvolutional_layer.c	/^void forward_deconvolutional_layer(const deconvolutional_layer l, network_state state)$/;"	f
forward_deconvolutional_layer_gpu	src/deconvolutional_kernels.cu	/^extern "C" void forward_deconvolutional_layer_gpu(deconvolutional_layer layer, network_state state)$/;"	f
forward_detection_layer	src/detection_layer.c	/^void forward_detection_layer(const detection_layer l, network_state state)$/;"	f
forward_detection_layer_gpu	src/detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network_state state)$/;"	f
forward_dropout_layer	src/dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network_state state)$/;"	f
forward_dropout_layer_gpu	src/dropout_layer_kernels.cu	/^void forward_dropout_layer_gpu(dropout_layer l, network_state state)$/;"	f
forward_gaussian_yolo_layer	src/gaussian_yolo_layer.c	/^void forward_gaussian_yolo_layer(const layer l, network_state state)$/;"	f
forward_gaussian_yolo_layer_gpu	src/gaussian_yolo_layer.c	/^void forward_gaussian_yolo_layer_gpu(const layer l, network_state state)$/;"	f
forward_gpu	include/darknet.h	/^    void(*forward_gpu)   (struct layer, struct network_state);$/;"	m	struct:layer
forward_gru_layer	src/gru_layer.c	/^void forward_gru_layer(layer l, network_state state)$/;"	f
forward_gru_layer_gpu	src/gru_layer.c	/^void forward_gru_layer_gpu(layer l, network_state state)$/;"	f
forward_history_layer	src/conv_lstm_layer.c	/^void forward_history_layer(layer l, network_state state)$/;"	f
forward_history_layer_gpu	src/conv_lstm_layer.c	/^void forward_history_layer_gpu(const layer l, network_state state)$/;"	f
forward_implicit_gpu	src/blas_kernels.cu	/^extern "C" void forward_implicit_gpu(int batch, int nweights, float *weight_gpu, float *output_gpu)$/;"	f
forward_implicit_kernel	src/blas_kernels.cu	/^__global__ void forward_implicit_kernel(int size, int batch, int nweights, float *weight_gpu, float *output_gpu)$/;"	f
forward_implicit_layer	src/representation_layer.c	/^void forward_implicit_layer(const layer l, network_state state)$/;"	f
forward_implicit_layer_gpu	src/representation_layer.c	/^void forward_implicit_layer_gpu(const layer l, network_state state)$/;"	f
forward_local_avgpool_layer	src/maxpool_layer.c	/^void forward_local_avgpool_layer(const maxpool_layer l, network_state state)$/;"	f
forward_local_avgpool_layer_gpu	src/maxpool_layer_kernels.cu	/^extern "C" void forward_local_avgpool_layer_gpu(maxpool_layer layer, network_state state)$/;"	f
forward_local_avgpool_layer_kernel	src/maxpool_layer_kernels.cu	/^__global__ void forward_local_avgpool_layer_kernel(int n, int in_h, int in_w, int in_c, int stride_x, int stride_y, int size, int pad, float *input, float *output)$/;"	f
forward_local_layer	src/local_layer.c	/^void forward_local_layer(const local_layer l, network_state state)$/;"	f
forward_local_layer_gpu	src/local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network_state state)$/;"	f
forward_lstm_layer	src/lstm_layer.c	/^void forward_lstm_layer(layer l, network_state state)$/;"	f
forward_lstm_layer_gpu	src/lstm_layer.c	/^void forward_lstm_layer_gpu(layer l, network_state state)$/;"	f
forward_maxpool_depth_layer_kernel	src/maxpool_layer_kernels.cu	/^__global__ void forward_maxpool_depth_layer_kernel(int n, int w, int h, int c, int out_c, int batch, float *input, float *output, int *indexes)$/;"	f
forward_maxpool_layer	src/maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
forward_maxpool_layer_avx	src/gemm.c	/^void forward_maxpool_layer_avx(float *src, float *dst, int *indexes, int size, int w, int h, int out_w, int out_h, int c,$/;"	f
forward_maxpool_layer_gpu	src/maxpool_layer_kernels.cu	/^extern "C" void forward_maxpool_layer_gpu(maxpool_layer layer, network_state state)$/;"	f
forward_maxpool_layer_kernel	src/maxpool_layer_kernels.cu	/^__global__ void forward_maxpool_layer_kernel(int n, int in_h, int in_w, int in_c, int stride_x, int stride_y, int size, int pad, float *input, float *output, int *indexes)$/;"	f
forward_network	src/network.c	/^void forward_network(network net, network_state state)$/;"	f
forward_network_gpu	src/network_kernels.cu	/^void forward_network_gpu(network net, network_state state)$/;"	f
forward_normalization_layer	src/normalization_layer.c	/^void forward_normalization_layer(const layer layer, network_state state)$/;"	f
forward_normalization_layer_gpu	src/normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
forward_region_layer	src/region_layer.c	/^void forward_region_layer(const region_layer l, network_state state)$/;"	f
forward_region_layer_gpu	src/region_layer.c	/^void forward_region_layer_gpu(const region_layer l, network_state state)$/;"	f
forward_reorg_layer	src/reorg_layer.c	/^void forward_reorg_layer(const layer l, network_state state)$/;"	f
forward_reorg_layer_gpu	src/reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network_state state)$/;"	f
forward_reorg_old_layer	src/reorg_old_layer.c	/^void forward_reorg_old_layer(const layer l, network_state state)$/;"	f
forward_reorg_old_layer_gpu	src/reorg_old_layer.c	/^void forward_reorg_old_layer_gpu(layer l, network_state state)$/;"	f
forward_rnn_layer	src/rnn_layer.c	/^void forward_rnn_layer(layer l, network_state state)$/;"	f
forward_rnn_layer_gpu	src/rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network_state state)$/;"	f
forward_route_layer	src/route_layer.c	/^void forward_route_layer(const route_layer l, network_state state)$/;"	f
forward_route_layer_gpu	src/route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
forward_sam_layer	src/sam_layer.c	/^void forward_sam_layer(const layer l, network_state state)$/;"	f
forward_sam_layer_gpu	src/sam_layer.c	/^void forward_sam_layer_gpu(const layer l, network_state state)$/;"	f
forward_scale_channels_layer	src/scale_channels_layer.c	/^void forward_scale_channels_layer(const layer l, network_state state)$/;"	f
forward_scale_channels_layer_gpu	src/scale_channels_layer.c	/^void forward_scale_channels_layer_gpu(const layer l, network_state state)$/;"	f
forward_shortcut_layer	src/shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network_state state)$/;"	f
forward_shortcut_layer_gpu	src/shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
forward_softmax_layer	src/softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network_state net)$/;"	f
forward_softmax_layer_gpu	src/softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network_state net)$/;"	f
forward_upsample_layer	src/upsample_layer.c	/^void forward_upsample_layer(const layer l, network_state net)$/;"	f
forward_upsample_layer_gpu	src/upsample_layer.c	/^void forward_upsample_layer_gpu(const layer l, network_state state)$/;"	f
forward_yolo_layer	src/yolo_layer.c	/^void forward_yolo_layer(const layer l, network_state state)$/;"	f
forward_yolo_layer_gpu	src/yolo_layer.c	/^void forward_yolo_layer_gpu(const layer l, network_state state)$/;"	f
forward_zero_nonmax_kernel	src/maxpool_layer_kernels.cu	/^__global__ void forward_zero_nonmax_kernel(int n, float *input, float *output)$/;"	f
fps	src/demo.c	/^static float fps = 0;$/;"	v	file:
fps_queue	build/darknet/x64/darknet_video.py	/^    fps_queue = Queue(maxsize=1)$/;"	v
fps_queue	darknet_video.py	/^    fps_queue = Queue(maxsize=1)$/;"	v
frame_id	src/demo.c	/^static long long int frame_id = 0;$/;"	v	file:
frame_queue	build/darknet/x64/darknet_video.py	/^    frame_queue = Queue()$/;"	v
frame_queue	darknet_video.py	/^    frame_queue = Queue()$/;"	v
frames_counter	build/darknet/YoloWrapper.cs	/^            public UInt32 frames_counter;$/;"	f	struct:Darknet.YoloWrapper.bbox_t
frames_counter	include/yolo_v2_class.hpp	/^    unsigned int frames_counter;   \/\/ counter of frames on which the object was detected$/;"	m	struct:bbox_t
frames_counter	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 frames_counter;$/;"	f	struct:Darknet.YoloWrapper.bbox_t
frames_history	include/yolo_v2_class.hpp	/^    enum { frames_history = 30 };    \/\/ how long to keep the history saved$/;"	e	enum:preview_boxes_t::__anon42
free_batch_detections	build/darknet/x64/darknet.py	/^free_batch_detections = lib.free_batch_detections$/;"	v
free_batch_detections	darknet.py	/^free_batch_detections = lib.free_batch_detections$/;"	v
free_batch_detections	src/network.c	/^void free_batch_detections(det_num_pair *det_num_pairs, int n)$/;"	f
free_convolutional_batchnorm	src/convolutional_layer.c	/^void free_convolutional_batchnorm(convolutional_layer *l)$/;"	f
free_data	src/data.c	/^void free_data(data d)$/;"	f
free_detections	build/darknet/x64/darknet.py	/^free_detections = lib.free_detections$/;"	v
free_detections	darknet.py	/^free_detections = lib.free_detections$/;"	v
free_detections	src/network.c	/^void free_detections(detection *dets, int n)$/;"	f
free_image	build/darknet/x64/darknet.py	/^free_image = lib.free_image$/;"	v
free_image	darknet.py	/^free_image = lib.free_image$/;"	v
free_image	src/image.c	/^void free_image(image m)$/;"	f
free_image	src/yolo_v2_class.cpp	/^LIB_API void Detector::free_image(image_t m)$/;"	f	class:Detector
free_layer	src/layer.c	/^void free_layer(layer l)$/;"	f
free_layer_custom	src/layer.c	/^void free_layer_custom(layer l, int keep_cudnn_desc)$/;"	f
free_list	src/list.c	/^void free_list(list *l)$/;"	f
free_list_contents	src/list.c	/^void free_list_contents(list *l)$/;"	f
free_list_contents_kvp	src/list.c	/^void free_list_contents_kvp(list *l)$/;"	f
free_list_val	src/list.c	/^void free_list_val(list *l)$/;"	f
free_load_threads	src/data.c	/^void free_load_threads(void *ptr)$/;"	f
free_matrix	src/matrix.c	/^void free_matrix(matrix m)$/;"	f
free_network	src/network.c	/^void free_network(network net)$/;"	f
free_network_ptr	darknet.py	/^free_network_ptr = lib.free_network_ptr$/;"	v
free_network_ptr	src/network.c	/^void free_network_ptr(network* net)$/;"	f
free_network_recurrent_state	src/network.c	/^void free_network_recurrent_state(network net)$/;"	f
free_node	src/list.c	/^void free_node(node *n)$/;"	f
free_pinned_memory	src/dark_cuda.c	/^void free_pinned_memory()$/;"	f
free_ptrs	build/darknet/x64/darknet.py	/^free_ptrs = lib.free_ptrs$/;"	v
free_ptrs	darknet.py	/^free_ptrs = lib.free_ptrs$/;"	v
free_ptrs	src/utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	src/parser.c	/^void free_section(section *s)$/;"	f
free_state_conv_lstm	src/conv_lstm_layer.c	/^void free_state_conv_lstm(layer l)$/;"	f
free_state_crnn	src/crnn_layer.c	/^void free_state_crnn(layer l)$/;"	f
free_sublayer	src/layer.c	/^void free_sublayer(layer *l)$/;"	f
from_hex_to_i	src/httplib.h	/^inline bool from_hex_to_i(const std::string &s, size_t i, size_t cnt,$/;"	f	namespace:httplib::detail
from_i_to_hex	src/httplib.h	/^inline std::string from_i_to_hex(size_t n) {$/;"	f	namespace:httplib::detail
front	src/list.h	/^    node *front;$/;"	m	struct:list
ftruncate	src/darkunistd.h	30;"	d
func	3rdparty/stb/include/stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon1
fuse_conv_batchnorm	src/network.c	/^void fuse_conv_batchnorm(network net)$/;"	f
fw_algo	include/darknet.h	/^    UNUSED_ENUM_TYPE fw_algo, fw_algo16;$/;"	m	struct:layer
fw_algo	include/darknet.h	/^    cudnnConvolutionFwdAlgo_t fw_algo, fw_algo16;$/;"	m	struct:layer
fw_algo16	include/darknet.h	/^    UNUSED_ENUM_TYPE fw_algo, fw_algo16;$/;"	m	struct:layer
fw_algo16	include/darknet.h	/^    cudnnConvolutionFwdAlgo_t fw_algo, fw_algo16;$/;"	m	struct:layer
g_counts_per_sec	src/gettimeofday.h	/^static LARGE_INTEGER g_counts_per_sec;$/;"	v
g_cpu	include/darknet.h	/^    float *g_cpu;$/;"	m	struct:layer
g_first_time	src/gettimeofday.h	/^static unsigned char g_first_time = 1;$/;"	v
g_gpu	include/darknet.h	/^    float *g_gpu;$/;"	m	struct:layer
gamma	include/darknet.h	/^    float gamma;$/;"	m	struct:network
gate_delta_gpu	include/darknet.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer
gate_gpu	include/darknet.h	/^    float * gate_gpu;$/;"	m	struct:layer
gaussian_noise	include/darknet.h	/^    int gaussian_noise;$/;"	m	struct:load_args
gaussian_noise	include/darknet.h	/^    int gaussian_noise;$/;"	m	struct:network
gaussian_yolo_layer.c	src/gaussian_yolo_layer.c	1;"	F
gaussian_yolo_layer.h	src/gaussian_yolo_layer.h	1;"	F
gaussian_yolo_num_detections	src/gaussian_yolo_layer.c	/^int gaussian_yolo_num_detections(layer l, float thresh)$/;"	f
gcd	src/getopt.c	/^gcd(int a, int b)$/;"	f	file:
gelu_activate	src/activations.h	/^static inline float gelu_activate(float x) { return (0.5*x*(1 + tanhf(0.797885*x + 0.035677*powf(x, 3)))); }$/;"	f
gelu_activate_kernel	src/activation_kernels.cu	/^__device__ float gelu_activate_kernel(float x){return (0.5*x*(1 + tanhf(0.797885*x + 0.035677*powf(x, 3))));}$/;"	f
gelu_gradient	src/activations.h	/^static inline float gelu_gradient(float x) {$/;"	f
gelu_gradient_kernel	src/activation_kernels.cu	/^__device__ float gelu_gradient_kernel(float x) {$/;"	f
gemm	src/gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm.c	src/gemm.c	1;"	F
gemm.h	src/gemm.h	1;"	F
gemm_bin	src/gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA,$/;"	f
gemm_cpu	src/gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_gpu	src/gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_nn	src/gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_bin_32bit_packed	src/gemm.c	/^void gemm_nn_bin_32bit_packed(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_bin_transposed_32bit_packed	src/gemm.c	/^void gemm_nn_bin_transposed_32bit_packed(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_custom	src/convolutional_layer.c	/^void gemm_nn_custom(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_custom_bin_mean_transposed	src/gemm.c	/^void gemm_nn_custom_bin_mean_transposed(int M, int N, int K, float ALPHA_UNUSED,$/;"	f
gemm_nn_custom_bin_mean_transposed_gpu	src/im2col_kernels.cu	/^void gemm_nn_custom_bin_mean_transposed_gpu(int M, int N, int K,$/;"	f
gemm_nn_custom_bin_mean_transposed_gpu_kernel	src/im2col_kernels.cu	/^__global__ void gemm_nn_custom_bin_mean_transposed_gpu_kernel(int M, int N, int K,$/;"	f
gemm_nn_custom_bin_mean_transposed_tensor_kernel	src/im2col_kernels.cu	/^__global__ void gemm_nn_custom_bin_mean_transposed_tensor_kernel(int M, int N, int K,$/;"	f
gemm_nn_fast	src/gemm.c	/^void gemm_nn_fast(int M, int N, int K, float ALPHA,$/;"	f
gemm_nt	src/gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA,$/;"	f
gemm_ongpu	src/gemm.c	/^void gemm_ongpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_tn	src/gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA,$/;"	f
gemm_tt	src/gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA,$/;"	f
gen_anchors.py	build/darknet/x64/gen_anchors.py	1;"	F
gen_anchors.py	scripts/gen_anchors.py	1;"	F
gen_tactic.sh	scripts/gen_tactic.sh	1;"	F
generate_move	src/go.c	/^int generate_move(network net, int player, float *board, int multi, float thresh, float temp, char *ko, int print)$/;"	f
generate_vid_rnn	src/rnn_vid.c	/^void generate_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
getMedian	src/yolo_console_dll.cpp	/^float getMedian(std::vector<float> &v) {$/;"	f
get_3d_coordinates	src/yolo_console_dll.cpp	/^std::vector<bbox_t> get_3d_coordinates(std::vector<bbox_t> bbox_vect, cv::Mat xyzrgba) {$/;"	f
get_3d_coordinates	src/yolo_console_dll.cpp	/^std::vector<bbox_t> get_3d_coordinates(std::vector<bbox_t> bbox_vect, cv::Mat xyzrgba)$/;"	f
get_activation	src/activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	src/activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_actual_detections	src/image.c	/^detection_with_class* get_actual_detections(detection *dets, int dets_num, float thresh, int* selected_detections_num, char **names)$/;"	f
get_base_args	src/network.c	/^load_args get_base_args(network *net)$/;"	f
get_bdd_image_id	src/detector.c	/^static void get_bdd_image_id(char *filename)$/;"	f	file:
get_bit	src/gemm.h	/^static inline unsigned char get_bit(unsigned char const*const src, size_t index) {$/;"	f
get_bit	src/im2col_kernels.cu	/^__device__ __host__ static inline unsigned char get_bit(unsigned char const*const src, size_t index) {$/;"	f	file:
get_bit_int32	src/gemm.c	/^static inline uint32_t get_bit_int32(uint32_t const*const src, size_t index) {$/;"	f	file:
get_buffer	src/httplib.h	/^inline const std::string &BufferStream::get_buffer() const { return buffer; }$/;"	f	class:httplib::BufferStream
get_capture_frame_count_cv	src/image_opencv.cpp	/^extern "C" double get_capture_frame_count_cv(cap_cv *cap)$/;"	f
get_capture_frame_cv	src/image_opencv.cpp	/^extern "C" mat_cv* get_capture_frame_cv(cap_cv *cap) {$/;"	f
get_capture_property_cv	src/image_opencv.cpp	/^extern "C" double get_capture_property_cv(cap_cv *cap, int property_id)$/;"	f
get_capture_video_stream	src/image_opencv.cpp	/^extern "C" cap_cv* get_capture_video_stream(const char *path) {$/;"	f
get_capture_webcam	src/image_opencv.cpp	/^extern "C" cap_cv* get_capture_webcam(int index)$/;"	f
get_classes_multipliers	src/parser.c	/^float *get_classes_multipliers(char *cpc, const int classes, const float max_delta)$/;"	f
get_coco2017.sh	scripts/get_coco2017.sh	1;"	F
get_coco_dataset.sh	scripts/get_coco_dataset.sh	1;"	F
get_coco_image_id	src/coco.c	/^int get_coco_image_id(char *filename)$/;"	f
get_coco_image_id	src/detector.c	/^static int get_coco_image_id(char *filename)$/;"	f	file:
get_color	src/image.c	/^float get_color(int c, int x, int max)$/;"	f
get_connected_workspace_size	src/connected_layer.c	/^size_t get_connected_workspace_size(layer l)$/;"	f
get_convolutional_delta	src/convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	src/convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	src/convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_convolutional_workspace_size	src/convolutional_layer.c	/^size_t get_convolutional_workspace_size(layer l) {$/;"	f
get_cost_string	src/cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	src/cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_count_mula	src/gemm.c	/^static inline int get_count_mula(__m256i count_sum) {$/;"	f	file:
get_crop_image	src/crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f
get_cuda_context	src/yolo_v2_class.cpp	/^void *Detector::get_cuda_context()$/;"	f	class:Detector
get_cuda_stream	src/dark_cuda.c	/^cudaStream_t get_cuda_stream() {$/;"	f
get_current_batch	src/network.c	/^int get_current_batch(network net)$/;"	f
get_current_iteration	src/network.c	/^int64_t get_current_iteration(network net)$/;"	f
get_current_rate	src/network.c	/^float get_current_rate(network net)$/;"	f
get_current_seq_subdivisions	src/network.c	/^float get_current_seq_subdivisions(network net)$/;"	f
get_data_part	src/data.c	/^data get_data_part(data d, int part, int total)$/;"	f
get_deconvolutional_delta	src/deconvolutional_layer.c	/^image get_deconvolutional_delta(deconvolutional_layer l)$/;"	f
get_deconvolutional_image	src/deconvolutional_layer.c	/^image get_deconvolutional_image(deconvolutional_layer l)$/;"	f
get_detection_boxes	src/detection_layer.c	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
get_detection_detections	src/detection_layer.c	/^void get_detection_detections(layer l, int w, int h, float thresh, detection *dets)$/;"	f
get_device_count	src/yolo_v2_class.cpp	/^int get_device_count() {$/;"	f
get_device_name	src/yolo_v2_class.cpp	/^int get_device_name(int gpu, char* deviceName) {$/;"	f
get_distance	include/yolo_v2_class.hpp	/^    static float get_distance(float src_x, float src_y, float dst_x, float dst_y) {$/;"	f	class:track_kalman_t
get_embedding	src/blas.c	/^void get_embedding(float *src, int src_w, int src_h, int src_c, int embedding_size, int cur_w, int cur_h, int cur_n, int cur_b, float *dst)$/;"	f
get_file_name_and_ext	scripts/log_parser/log_parser.py	/^def get_file_name_and_ext(filename):$/;"	f
get_file_value	src/httplib.h	/^inline MultipartFile Request::get_file_value(const char *key) const {$/;"	f	class:httplib::Request
get_gaussian_yolo_box	src/gaussian_yolo_layer.c	/^box get_gaussian_yolo_box(float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, int stride, YOLO_POINT yolo_point)$/;"	f
get_gaussian_yolo_detections	src/gaussian_yolo_layer.c	/^int get_gaussian_yolo_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets, int letter)$/;"	f
get_gpu_compute_capability	src/dark_cuda.c	/^int get_gpu_compute_capability(int i, char *device_name)$/;"	f
get_handlers_	src/httplib.h	/^  Handlers get_handlers_;$/;"	m	class:httplib::Server
get_header_value	src/httplib.h	/^inline const char *get_header_value(const Headers &headers, const char *key,$/;"	f	namespace:httplib::detail
get_header_value	src/httplib.h	/^inline std::string Request::get_header_value(const char *key, size_t id) const {$/;"	f	class:httplib::Request
get_header_value	src/httplib.h	/^inline std::string Response::get_header_value(const char *key,$/;"	f	class:httplib::Response
get_header_value_count	src/httplib.h	/^inline size_t Request::get_header_value_count(const char *key) const {$/;"	f	class:httplib::Request
get_header_value_count	src/httplib.h	/^inline size_t Response::get_header_value_count(const char *key) const {$/;"	f	class:httplib::Response
get_header_value_uint64	src/httplib.h	/^inline uint64_t get_header_value_uint64(const Headers &headers, const char *key,$/;"	f	namespace:httplib::detail
get_height_mat	src/image_opencv.cpp	/^extern "C" int get_height_mat(mat_cv *mat)$/;"	f
get_hierarchy_probability	src/tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c)$/;"	f
get_image_from_stream_cpp	src/image_opencv.cpp	/^extern "C" image get_image_from_stream_cpp(cap_cv *cap)$/;"	f
get_image_from_stream_letterbox	src/image_opencv.cpp	/^extern "C" image get_image_from_stream_letterbox(cap_cv *cap, int w, int h, int c, mat_cv** in_img, int dont_close)$/;"	f
get_image_from_stream_resize	src/image_opencv.cpp	/^extern "C" image get_image_from_stream_resize(cap_cv *cap, int w, int h, int c, mat_cv** in_img, int dont_close)$/;"	f
get_image_layer	src/image.c	/^image get_image_layer(image m, int l)$/;"	f
get_imagenet_train.sh	scripts/get_imagenet_train.sh	1;"	F
get_label	src/image.c	/^image get_label(image **characters, char *string, int size)$/;"	f
get_label_v3	src/image.c	/^image get_label_v3(image **characters, char *string, int size)$/;"	f
get_labels	src/data.c	/^char **get_labels(char *filename)$/;"	f
get_labels_custom	src/data.c	/^char **get_labels_custom(char *filename, int *size)$/;"	f
get_layer_string	src/network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_maxpool_delta	src/maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	src/maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_mean_array	src/convolutional_layer.c	/^void get_mean_array(float *src, size_t size, size_t filters, float *mean_arr) {$/;"	f
get_metadata	src/option_list.c	/^metadata get_metadata(char *file)$/;"	f
get_multipart_ranges_data_length	src/httplib.h	/^get_multipart_ranges_data_length(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
get_net_color_depth	src/yolo_v2_class.cpp	/^LIB_API int Detector::get_net_color_depth() const {$/;"	f	class:Detector
get_net_height	src/yolo_v2_class.cpp	/^LIB_API int Detector::get_net_height() const {$/;"	f	class:Detector
get_net_width	src/yolo_v2_class.cpp	/^LIB_API int Detector::get_net_width() const {$/;"	f	class:Detector
get_network_boxes	build/darknet/x64/darknet.py	/^get_network_boxes = lib.get_network_boxes$/;"	v
get_network_boxes	darknet.py	/^get_network_boxes = lib.get_network_boxes$/;"	v
get_network_boxes	src/network.c	/^detection *get_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, int *num, int letter)$/;"	f
get_network_cost	src/network.c	/^float get_network_cost(network net)$/;"	f
get_network_detection_layer	src/network.c	/^detection_layer get_network_detection_layer(network net)$/;"	f
get_network_image	src/network.c	/^image get_network_image(network net)$/;"	f
get_network_image_layer	src/network.c	/^image get_network_image_layer(network net, int i)$/;"	f
get_network_input_size	src/network.c	/^int get_network_input_size(network net)$/;"	f
get_network_layer	src/network.c	/^layer* get_network_layer(network* net, int i)$/;"	f
get_network_output	src/network.c	/^float *get_network_output(network net)$/;"	f
get_network_output_gpu	src/network_kernels.cu	/^float *get_network_output_gpu(network net)$/;"	f
get_network_output_layer_gpu	src/network_kernels.cu	/^float *get_network_output_layer_gpu(network net, int i)$/;"	f
get_network_output_size	src/network.c	/^int get_network_output_size(network net)$/;"	f
get_next_batch	src/data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_num_threads	src/http_stream.cpp	/^int get_num_threads()$/;"	f
get_number_of_blocks	src/dark_cuda.c	/^int get_number_of_blocks(int array_size, int block_size)$/;"	f
get_openimages_dataset.py	scripts/get_openimages_dataset.py	1;"	F
get_openssl_verify_result	src/httplib.h	/^inline long SSLClient::get_openssl_verify_result() const {$/;"	f	class:httplib::SSLClient
get_param_value	src/httplib.h	/^inline std::string Request::get_param_value(const char *key, size_t id) const {$/;"	f	class:httplib::Request
get_param_value_count	src/httplib.h	/^inline size_t Request::get_param_value_count(const char *key) const {$/;"	f	class:httplib::Request
get_paths	src/data.c	/^list *get_paths(char *filename)$/;"	f
get_pixel	src/image.c	/^static float get_pixel(image m, int x, int y, int c)$/;"	f	file:
get_pixel	src/image_opencv.cpp	/^static float get_pixel(image m, int x, int y, int c)$/;"	f	file:
get_pixel_extend	src/image.c	/^static float get_pixel_extend(image m, int x, int y, int c)$/;"	f	file:
get_pixel_kernel	src/crop_layer_kernels.cu	/^__device__ float get_pixel_kernel(float *image, int w, int h, int x, int y, int c)$/;"	f
get_policy	src/parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	src/network.c	/^int get_predicted_class_network(network net)$/;"	f
get_random_batch	src/data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	src/data.c	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	src/data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_random_paths_custom	src/data.c	/^char **get_random_paths_custom(char **paths, int n, int m, int contrastive)$/;"	f
get_range_offset_and_length	src/httplib.h	/^get_range_offset_and_length(const Request &req, const Response &res,$/;"	f	namespace:httplib::detail
get_range_offset_and_length	src/httplib.h	/^get_range_offset_and_length(const Request &req, size_t content_length,$/;"	f	namespace:httplib::detail
get_region_box	src/region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h)$/;"	f
get_region_boxes	src/region_layer.c	/^void get_region_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness, int *map)$/;"	f
get_region_detections	src/region_layer.c	/^void get_region_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, float tree_thresh, int relative, detection *dets)$/;"	f
get_regression_values	src/classifier.c	/^float *get_regression_values(char **labels, int n)$/;"	f
get_remote_addr	src/httplib.h	/^inline std::string BufferStream::get_remote_addr() const { return ""; }$/;"	f	class:httplib::BufferStream
get_remote_addr	src/httplib.h	/^inline std::string SSLSocketStream::get_remote_addr() const {$/;"	f	class:httplib::SSLSocketStream
get_remote_addr	src/httplib.h	/^inline std::string SocketStream::get_remote_addr() const {$/;"	f	class:httplib::SocketStream
get_remote_addr	src/httplib.h	/^inline std::string get_remote_addr(socket_t sock) {$/;"	f	namespace:httplib::detail
get_rnn_data	src/rnn.c	/^float_pair get_rnn_data(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_token_data	src/rnn.c	/^float_pair get_rnn_token_data(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_vid_data	src/rnn_vid.c	/^float_pair get_rnn_vid_data(network net, char **files, int n, int batch, int steps)$/;"	f
get_sequence_value	src/network.c	/^int get_sequence_value(network net)$/;"	f
get_sequential_paths	src/data.c	/^char **get_sequential_paths(char **paths, int n, int m, int mini_batch, int augment_speed, int contrastive)$/;"	f
get_sim_P_index	src/blas.c	/^int get_sim_P_index(size_t i, size_t j, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
get_state_id	include/yolo_v2_class.hpp	/^    tst_t get_state_id(bbox_t find_box, std::vector<bool> &busy_vec)$/;"	f	class:track_kalman_t
get_stream_fps_cpp_cv	src/image_opencv.cpp	/^extern "C" int get_stream_fps_cpp_cv(cap_cv *cap)$/;"	f
get_system_frame_time_string	src/http_stream.cpp	/^std::string get_system_frame_time_string()$/;"	f
get_time	src/http_stream.cpp	/^double get_time() { return 0; }$/;"	f
get_time	src/http_stream.cpp	/^double get_time() {$/;"	f
get_time_point	src/http_stream.cpp	/^double get_time_point() { return 0; }$/;"	f
get_time_point	src/http_stream.cpp	/^double get_time_point() {$/;"	f
get_voc_results_file_template	build/darknet/x64/reval_voc_py3.py	/^def get_voc_results_file_template(image_set, out_dir = 'results'):$/;"	f
get_voc_results_file_template	scripts/reval_voc.py	/^def get_voc_results_file_template(image_set, out_dir = 'results'):$/;"	f
get_voc_results_file_template	scripts/reval_voc_py3.py	/^def get_voc_results_file_template(image_set, out_dir = 'results'):$/;"	f
get_wall_time	src/demo.c	/^double get_wall_time()$/;"	f
get_weights	src/convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f
get_width_mat	src/image_opencv.cpp	/^extern "C" int get_width_mat(mat_cv *mat)$/;"	f
get_workspace_size16	src/convolutional_layer.c	/^size_t get_workspace_size16(layer l) {$/;"	f
get_workspace_size32	src/convolutional_layer.c	/^size_t get_workspace_size32(layer l){$/;"	f
get_yolo_box	src/yolo_layer.c	/^box get_yolo_box(float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, int stride, int new_coords)$/;"	f
get_yolo_detections	src/yolo_layer.c	/^int get_yolo_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets, int letter)$/;"	f
get_yolo_detections_batch	src/yolo_layer.c	/^int get_yolo_detections_batch(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets, int letter, int batch)$/;"	f
getcwd	src/darkunistd.h	33;"	d
getline	src/httplib.h	/^  bool getline() {$/;"	f	class:httplib::detail::stream_line_reader
getopt	src/getopt.c	/^int getopt(int nargc, char* const* nargv, const char* options)$/;"	f
getopt.c	src/getopt.c	1;"	F
getopt.h	src/getopt.h	1;"	F
getopt_internal	src/getopt.c	/^getopt_internal(int nargc, char* const* nargv, const char* options,$/;"	f	file:
getopt_long	src/getopt.c	/^int getopt_long(int nargc, char* const* nargv, const char* options,$/;"	f
getopt_long_only	src/getopt.c	/^int getopt_long_only(int nargc, char* const* nargv, const char* options,$/;"	f
gettimeofday	src/gettimeofday.c	/^int gettimeofday(struct timeval* tp, struct timezone* tzp)$/;"	f
gettimeofday.c	src/gettimeofday.c	1;"	F
gettimeofday.h	src/gettimeofday.h	1;"	F
giou	include/darknet.h	/^    float iou, giou, diou, ciou;$/;"	m	struct:ious
global_delta_gpu	include/darknet.h	/^    float *global_delta_gpu;$/;"	m	struct:network
global_last_time	include/yolo_v2_class.hpp	/^    std::chrono::steady_clock::time_point global_last_time;$/;"	m	class:track_kalman_t
glowable_buffer_	src/httplib.h	/^  std::string glowable_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
go.c	src/go.c	1;"	F
good_bbox_vec_flags	include/yolo_v2_class.hpp	/^    std::vector<bool> good_bbox_vec_flags;$/;"	m	class:Tracker_optflow
gpu_count	include/yolo_v2_class.hpp	/^    const int gpu_count;$/;"	m	class:Tracker_optflow
gpu_id	include/yolo_v2_class.hpp	/^    const int gpu_id;$/;"	m	class:Tracker_optflow
gpu_index	include/darknet.h	/^    int gpu_index;$/;"	m	struct:network
gpu_index	src/dark_cuda.c	/^int gpu_index = 0;$/;"	v
grad_centr	include/darknet.h	/^    int grad_centr;$/;"	m	struct:layer
grad_contrastive_loss_negative	src/blas.c	/^void grad_contrastive_loss_negative(size_t i, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *cos_sim, float *p_constrastive, float *delta, int wh)$/;"	f
grad_contrastive_loss_negative_f	src/blas.c	/^void grad_contrastive_loss_negative_f(size_t i, int *class_ids, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *delta, int wh, contrastive_params *contrast_p, int contrast_p_size, int neg_max)$/;"	f
grad_contrastive_loss_positive	src/blas.c	/^void grad_contrastive_loss_positive(size_t i, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *cos_sim, float *p_constrastive, float *delta, int wh)$/;"	f
grad_contrastive_loss_positive_f	src/blas.c	/^void grad_contrastive_loss_positive_f(size_t i, int *class_ids, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *delta, int wh, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
grad_lrelu	src/blas_kernels.cu	/^__device__ float grad_lrelu(float src) {$/;"	f
grad_relu	src/blas_kernels.cu	/^__device__ float grad_relu(float src) {$/;"	f
gradient	src/activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	src/activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
gradient_array_gelu_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_gelu_kernel(float *x, int n, float *delta)$/;"	f
gradient_array_hard_mish	src/activations.c	/^void gradient_array_hard_mish(const int n, const float * activation_input, float * delta)$/;"	f
gradient_array_hard_mish_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_hard_mish_kernel(int n, float *activation_input_gpu, float *delta)$/;"	f
gradient_array_hard_mish_ongpu	src/activation_kernels.cu	/^extern "C" void gradient_array_hard_mish_ongpu(int n, float *activation_input_gpu, float *delta)$/;"	f
gradient_array_hardtan_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_hardtan_kernel(float *x, int n, float *delta)$/;"	f
gradient_array_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_kernel(float *x, int n, ACTIVATION a, float *delta)$/;"	f
gradient_array_leaky_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_leaky_kernel(float *x, int n, float *delta)$/;"	f
gradient_array_logistic_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_logistic_kernel(float *x, int n, float *delta)$/;"	f
gradient_array_mish	src/activations.c	/^void gradient_array_mish(const int n, const float * activation_input, float * delta)$/;"	f
gradient_array_mish_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_mish_kernel(int n, float *activation_input_gpu, float *delta)$/;"	f
gradient_array_mish_ongpu	src/activation_kernels.cu	/^extern "C" void gradient_array_mish_ongpu(int n, float *activation_input_gpu, float *delta)$/;"	f
gradient_array_normalize_channels	src/activations.c	/^void gradient_array_normalize_channels(float *x, const int n, int batch, int channels, int wh_step, float *delta)$/;"	f
gradient_array_normalize_channels_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_normalize_channels_kernel(float *x, int size, int batch, int channels, int wh_step, float *delta_gpu)$/;"	f
gradient_array_normalize_channels_ongpu	src/activation_kernels.cu	/^extern "C" void gradient_array_normalize_channels_ongpu(float *output_gpu, int n, int batch, int channels, int wh_step, float *delta_gpu)$/;"	f
gradient_array_normalize_channels_softmax	src/activations.c	/^void gradient_array_normalize_channels_softmax(float *x, const int n, int batch, int channels, int wh_step, float *delta)$/;"	f
gradient_array_normalize_channels_softmax_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_normalize_channels_softmax_kernel(float *x, int size, int batch, int channels, int wh_step, float *delta_gpu)$/;"	f
gradient_array_normalize_channels_softmax_ongpu	src/activation_kernels.cu	/^extern "C" void gradient_array_normalize_channels_softmax_ongpu(float *output_gpu, int n, int batch, int channels, int wh_step, float *delta_gpu)$/;"	f
gradient_array_ongpu	src/activation_kernels.cu	/^extern "C" void gradient_array_ongpu(float *x, int n, ACTIVATION a, float *delta)$/;"	f
gradient_array_relu6_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_relu6_kernel(float *x, int n, float *delta)$/;"	f
gradient_array_relu_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_relu_kernel(float *x, int n, float *delta)$/;"	f
gradient_array_revleaky_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_revleaky_kernel(float *x, int n, float *delta)$/;"	f
gradient_array_selu_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_selu_kernel(float *x, int n, float *delta)$/;"	f
gradient_array_swish	src/activations.c	/^void gradient_array_swish(const float *x, const int n, const float * sigmoid, float * delta)$/;"	f
gradient_array_swish_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_swish_kernel(float *x, int n, float *sigmoid_gpu, float *delta)$/;"	f
gradient_array_swish_ongpu	src/activation_kernels.cu	/^extern "C" void gradient_array_swish_ongpu(float *x, int n, float *sigmoid_gpu, float *delta)$/;"	f
gradient_array_tanh_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_tanh_kernel(float *x, int n, float *delta)$/;"	f
gradient_centralization_gpu	src/blas_kernels.cu	/^extern "C" void gradient_centralization_gpu(int w, int h, int c, int f, float *in)$/;"	f
gradient_centralization_kernel	src/blas_kernels.cu	/^__global__ void gradient_centralization_kernel(int filters, int f_size, float *in)$/;"	f
gradient_kernel	src/activation_kernels.cu	/^__device__ float gradient_kernel(float x, ACTIVATION a)$/;"	f
grayscale_image	src/image.c	/^image grayscale_image(image im)$/;"	f
group	include/darknet.h	/^    int *group;$/;"	m	struct:tree
group_id	include/darknet.h	/^    int group_id;$/;"	m	struct:layer
group_offset	include/darknet.h	/^    int *group_offset;$/;"	m	struct:tree
group_size	include/darknet.h	/^    int *group_size;$/;"	m	struct:tree
groups	include/darknet.h	/^    int groups;$/;"	m	struct:layer
groups	include/darknet.h	/^    int groups;$/;"	m	struct:tree
gru_layer.c	src/gru_layer.c	1;"	F
gru_layer.h	src/gru_layer.h	1;"	F
gt_gpu	include/darknet.h	/^    float *gt_gpu;$/;"	m	struct:layer
gun_classifier	src/classifier.c	/^void gun_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
h	3rdparty/stb/include/stb_image.h	/^      int h,v;$/;"	m	struct:__anon9::__anon10
h	3rdparty/stb/include/stb_image.h	/^   int w,h;$/;"	m	struct:__anon20
h	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
h	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box
h	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box_label
h	include/darknet.h	/^    int h, w, c;$/;"	m	struct:layer
h	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
h	include/darknet.h	/^    int h;$/;"	m	struct:image
h	include/darknet.h	/^    int h;$/;"	m	struct:load_args
h	include/darknet.h	/^    int w, h;$/;"	m	struct:data
h	include/yolo_v2_class.hpp	/^    int h;                        \/\/ height$/;"	m	struct:image_t
h	include/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;       \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
h	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
h	src/detector.c	/^    float w, h;$/;"	m	struct:__anon36	file:
h	src/parser.c	/^    int h;$/;"	m	struct:size_params	file:
h2	3rdparty/stb/include/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10
h_cpu	include/darknet.h	/^    float *h_cpu;$/;"	m	struct:layer
h_gpu	include/darknet.h	/^    float *h_gpu;$/;"	m	struct:layer
ha	3rdparty/stb/include/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon9::__anon10
handle_file_request	src/httplib.h	/^inline bool Server::handle_file_request(Request &req, Response &res) {$/;"	f	class:httplib::Server
hard_mish_yashas	src/activation_kernels.cu	/^__device__ float hard_mish_yashas(float x)$/;"	f
hard_mish_yashas	src/activations.c	/^static float hard_mish_yashas(float x)$/;"	f	file:
hard_mish_yashas_grad	src/activation_kernels.cu	/^__device__ float hard_mish_yashas_grad(float x)$/;"	f
hard_mish_yashas_grad	src/activations.c	/^static float hard_mish_yashas_grad(float x)$/;"	f	file:
hardtan_activate	src/activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_activate_kernel	src/activation_kernels.cu	/^__device__ float hardtan_activate_kernel(float x)$/;"	f
hardtan_gradient	src/activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
hardtan_gradient_kernel	src/activation_kernels.cu	/^__device__ float hardtan_gradient_kernel(float x)$/;"	f
hasGPU	build/darknet/x64/darknet.py	/^        hasGPU = False$/;"	v
hasGPU	build/darknet/x64/darknet.py	/^hasGPU = True$/;"	v
has_arg	src/getopt.c	/^  int has_arg; \/* does it take an argument?		*\/$/;"	m	struct:option	file:
has_file	src/httplib.h	/^inline bool Request::has_file(const char *key) const {$/;"	f	class:httplib::Request
has_header	src/httplib.h	/^inline bool Request::has_header(const char *key) const {$/;"	f	class:httplib::Request
has_header	src/httplib.h	/^inline bool Response::has_header(const char *key) const {$/;"	f	class:httplib::Response
has_header	src/httplib.h	/^inline bool has_header(const Headers &headers, const char *key) {$/;"	f	namespace:httplib::detail
has_param	src/httplib.h	/^inline bool Request::has_param(const char *key) const {$/;"	f	class:httplib::Request
hd	3rdparty/stb/include/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon9::__anon10
headers	src/httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Request
headers	src/httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Response
height_in_cfg_file	build/darknet/x64/gen_anchors.py	/^height_in_cfg_file = 416.$/;"	v
height_in_cfg_file	scripts/gen_anchors.py	/^height_in_cfg_file = 416.$/;"	v
hh_cpu	include/darknet.h	/^    float *hh_cpu;$/;"	m	struct:layer
hh_gpu	include/darknet.h	/^    float *hh_gpu;$/;"	m	struct:layer
hidden	include/darknet.h	/^    int hidden;$/;"	m	struct:layer
hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:load_args
hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:network
hierarchy_predictions	src/tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves)$/;"	f
hierarchy_top_prediction	src/tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f
history_size	include/darknet.h	/^    int history_size;$/;"	m	struct:layer
hold_out_matrix	src/matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
host_	src/httplib.h	/^  const std::string host_;$/;"	m	class:httplib::Client
host_and_port_	src/httplib.h	/^  const std::string host_and_port_;$/;"	m	class:httplib::Client
host_components_	src/httplib.h	/^  std::vector<std::string> host_components_;$/;"	m	class:httplib::SSLClient
hs	3rdparty/stb/include/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon11
hsv_to_rgb	src/image.c	/^void hsv_to_rgb(image im)$/;"	f
hsv_to_rgb_kernel	src/crop_layer_kernels.cu	/^__device__ float3 hsv_to_rgb_kernel(float3 hsv)$/;"	f
hsz	3rdparty/stb/include/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
http_stream.cpp	src/http_stream.cpp	1;"	F
http_stream.h	src/http_stream.h	1;"	F
httplib	src/httplib.h	/^namespace httplib {$/;"	n
httplib.h	src/httplib.h	1;"	F
httplib::BufferStream	src/httplib.h	/^class BufferStream : public Stream {$/;"	c	namespace:httplib
httplib::BufferStream::buffer	src/httplib.h	/^  std::string buffer;$/;"	m	class:httplib::BufferStream
httplib::BufferStream::get_buffer	src/httplib.h	/^inline const std::string &BufferStream::get_buffer() const { return buffer; }$/;"	f	class:httplib::BufferStream
httplib::BufferStream::get_remote_addr	src/httplib.h	/^inline std::string BufferStream::get_remote_addr() const { return ""; }$/;"	f	class:httplib::BufferStream
httplib::BufferStream::override	src/httplib.h	/^  int read(char *ptr, size_t size) override;$/;"	m	class:httplib::BufferStream
httplib::BufferStream::override	src/httplib.h	/^  int write(const char *ptr) override;$/;"	m	class:httplib::BufferStream
httplib::BufferStream::override	src/httplib.h	/^  int write(const char *ptr, size_t size) override;$/;"	m	class:httplib::BufferStream
httplib::BufferStream::override	src/httplib.h	/^  int write(const std::string &s) override;$/;"	m	class:httplib::BufferStream
httplib::BufferStream::override	src/httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::BufferStream
httplib::BufferStream::override	src/httplib.h	/^  ~BufferStream() override = default;$/;"	m	class:httplib::BufferStream
httplib::BufferStream::read	src/httplib.h	/^inline int BufferStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::BufferStream
httplib::BufferStream::write	src/httplib.h	/^inline int BufferStream::write(const char *ptr) {$/;"	f	class:httplib::BufferStream
httplib::BufferStream::write	src/httplib.h	/^inline int BufferStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::BufferStream
httplib::BufferStream::write	src/httplib.h	/^inline int BufferStream::write(const std::string &s) {$/;"	f	class:httplib::BufferStream
httplib::Client	src/httplib.h	/^class Client {$/;"	c	namespace:httplib
httplib::Client::Client	src/httplib.h	/^inline Client::Client(const char *host, int port, time_t timeout_sec)$/;"	f	class:httplib::Client
httplib::Client::Delete	src/httplib.h	/^inline std::shared_ptr<Response> Client::Delete(const char *path) {$/;"	f	class:httplib::Client
httplib::Client::Delete	src/httplib.h	/^inline std::shared_ptr<Response> Client::Delete(const char *path,$/;"	f	class:httplib::Client
httplib::Client::Get	src/httplib.h	/^Client::Get(const char *path, const Headers &headers, Progress progress) {$/;"	f	class:httplib::Client
httplib::Client::Get	src/httplib.h	/^inline std::shared_ptr<Response> Client::Get(const char *path) {$/;"	f	class:httplib::Client
httplib::Client::Get	src/httplib.h	/^inline std::shared_ptr<Response> Client::Get(const char *path,$/;"	f	class:httplib::Client
httplib::Client::Head	src/httplib.h	/^inline std::shared_ptr<Response> Client::Head(const char *path) {$/;"	f	class:httplib::Client
httplib::Client::Head	src/httplib.h	/^inline std::shared_ptr<Response> Client::Head(const char *path,$/;"	f	class:httplib::Client
httplib::Client::Options	src/httplib.h	/^inline std::shared_ptr<Response> Client::Options(const char *path) {$/;"	f	class:httplib::Client
httplib::Client::Options	src/httplib.h	/^inline std::shared_ptr<Response> Client::Options(const char *path,$/;"	f	class:httplib::Client
httplib::Client::Patch	src/httplib.h	/^Client::Patch(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
httplib::Client::Patch	src/httplib.h	/^Client::Patch(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
httplib::Client::Patch	src/httplib.h	/^inline std::shared_ptr<Response> Client::Patch(const char *path,$/;"	f	class:httplib::Client
httplib::Client::Post	src/httplib.h	/^Client::Post(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
httplib::Client::Post	src/httplib.h	/^Client::Post(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
httplib::Client::Post	src/httplib.h	/^Client::Post(const char *path, const Headers &headers,$/;"	f	class:httplib::Client
httplib::Client::Post	src/httplib.h	/^Client::Post(const char *path, const MultipartFormDataItems &items,$/;"	f	class:httplib::Client
httplib::Client::Post	src/httplib.h	/^Client::Post(const char *path, const Params &params, bool compress) {$/;"	f	class:httplib::Client
httplib::Client::Post	src/httplib.h	/^inline std::shared_ptr<Response> Client::Post(const char *path,$/;"	f	class:httplib::Client
httplib::Client::Put	src/httplib.h	/^Client::Put(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
httplib::Client::Put	src/httplib.h	/^Client::Put(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
httplib::Client::Put	src/httplib.h	/^inline std::shared_ptr<Response> Client::Put(const char *path,$/;"	f	class:httplib::Client
httplib::Client::create_client_socket	src/httplib.h	/^inline socket_t Client::create_client_socket() const {$/;"	f	class:httplib::Client
httplib::Client::follow_location	src/httplib.h	/^inline void Client::follow_location(bool on) { follow_location_ = on; }$/;"	f	class:httplib::Client
httplib::Client::follow_location_	src/httplib.h	/^  size_t follow_location_;$/;"	m	class:httplib::Client
httplib::Client::host_	src/httplib.h	/^  const std::string host_;$/;"	m	class:httplib::Client
httplib::Client::host_and_port_	src/httplib.h	/^  const std::string host_and_port_;$/;"	m	class:httplib::Client
httplib::Client::is_ssl	src/httplib.h	/^inline bool Client::is_ssl() const { return false; }$/;"	f	class:httplib::Client
httplib::Client::is_valid	src/httplib.h	/^inline bool Client::is_valid() const { return true; }$/;"	f	class:httplib::Client
httplib::Client::keep_alive_max_count_	src/httplib.h	/^  size_t keep_alive_max_count_;$/;"	m	class:httplib::Client
httplib::Client::port_	src/httplib.h	/^  const int port_;$/;"	m	class:httplib::Client
httplib::Client::process_and_close_socket	src/httplib.h	/^inline bool Client::process_and_close_socket($/;"	f	class:httplib::Client
httplib::Client::process_request	src/httplib.h	/^inline bool Client::process_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
httplib::Client::read_response_line	src/httplib.h	/^inline bool Client::read_response_line(Stream &strm, Response &res) {$/;"	f	class:httplib::Client
httplib::Client::read_timeout_sec_	src/httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::Client
httplib::Client::read_timeout_usec_	src/httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::Client
httplib::Client::redirect	src/httplib.h	/^inline bool Client::redirect(const Request &req, Response &res) {$/;"	f	class:httplib::Client
httplib::Client::send	src/httplib.h	/^inline bool Client::send(const Request &req, Response &res) {$/;"	f	class:httplib::Client
httplib::Client::send	src/httplib.h	/^inline bool Client::send(const std::vector<Request> &requests,$/;"	f	class:httplib::Client
httplib::Client::send_with_content_provider	src/httplib.h	/^inline std::shared_ptr<Response> Client::send_with_content_provider($/;"	f	class:httplib::Client
httplib::Client::set_keep_alive_max_count	src/httplib.h	/^inline void Client::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Client
httplib::Client::set_read_timeout	src/httplib.h	/^inline void Client::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Client
httplib::Client::timeout_sec_	src/httplib.h	/^  time_t timeout_sec_;$/;"	m	class:httplib::Client
httplib::Client::write_request	src/httplib.h	/^inline void Client::write_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
httplib::Client::~Client	src/httplib.h	/^inline Client::~Client() {}$/;"	f	class:httplib::Client
httplib::Get	src/httplib.h	/^inline void Get(std::vector<Request> &requests, const char *path) {$/;"	f	namespace:httplib
httplib::Get	src/httplib.h	/^inline void Get(std::vector<Request> &requests, const char *path,$/;"	f	namespace:httplib
httplib::HttpVersion	src/httplib.h	/^enum class HttpVersion { v1_0 = 0, v1_1 };$/;"	c	namespace:httplib
httplib::HttpVersion::v1_0	src/httplib.h	/^enum class HttpVersion { v1_0 = 0, v1_1 };$/;"	m	class:httplib::HttpVersion
httplib::MultipartFile	src/httplib.h	/^struct MultipartFile {$/;"	s	namespace:httplib
httplib::MultipartFile::content_type	src/httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFile
httplib::MultipartFile::filename	src/httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFile
httplib::MultipartFile::length	src/httplib.h	/^  size_t length = 0;$/;"	m	struct:httplib::MultipartFile
httplib::MultipartFile::offset	src/httplib.h	/^  size_t offset = 0;$/;"	m	struct:httplib::MultipartFile
httplib::MultipartFormData	src/httplib.h	/^struct MultipartFormData {$/;"	s	namespace:httplib
httplib::MultipartFormData::content	src/httplib.h	/^  std::string content;$/;"	m	struct:httplib::MultipartFormData
httplib::MultipartFormData::content_type	src/httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFormData
httplib::MultipartFormData::filename	src/httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFormData
httplib::MultipartFormData::name	src/httplib.h	/^  std::string name;$/;"	m	struct:httplib::MultipartFormData
httplib::NoThread	src/httplib.h	/^class NoThread : public TaskQueue {$/;"	c	namespace:httplib
httplib::NoThread::NoThread	src/httplib.h	/^  NoThread() {}$/;"	f	class:httplib::NoThread
httplib::NoThread::~NoThread	src/httplib.h	/^  virtual ~NoThread() {}$/;"	f	class:httplib::NoThread
httplib::Post	src/httplib.h	/^inline void Post(std::vector<Request> &requests, const char *path,$/;"	f	namespace:httplib
httplib::Request	src/httplib.h	/^struct Request {$/;"	s	namespace:httplib
httplib::Request::body	src/httplib.h	/^  std::string body;$/;"	m	struct:httplib::Request
httplib::Request::content_length	src/httplib.h	/^  size_t content_length;$/;"	m	struct:httplib::Request
httplib::Request::content_provider	src/httplib.h	/^  ContentProvider content_provider;$/;"	m	struct:httplib::Request
httplib::Request::content_receiver	src/httplib.h	/^  ContentReceiver content_receiver;$/;"	m	struct:httplib::Request
httplib::Request::files	src/httplib.h	/^  MultipartFiles files;$/;"	m	struct:httplib::Request
httplib::Request::get_file_value	src/httplib.h	/^inline MultipartFile Request::get_file_value(const char *key) const {$/;"	f	class:httplib::Request
httplib::Request::get_header_value	src/httplib.h	/^inline std::string Request::get_header_value(const char *key, size_t id) const {$/;"	f	class:httplib::Request
httplib::Request::get_header_value_count	src/httplib.h	/^inline size_t Request::get_header_value_count(const char *key) const {$/;"	f	class:httplib::Request
httplib::Request::get_param_value	src/httplib.h	/^inline std::string Request::get_param_value(const char *key, size_t id) const {$/;"	f	class:httplib::Request
httplib::Request::get_param_value_count	src/httplib.h	/^inline size_t Request::get_param_value_count(const char *key) const {$/;"	f	class:httplib::Request
httplib::Request::has_file	src/httplib.h	/^inline bool Request::has_file(const char *key) const {$/;"	f	class:httplib::Request
httplib::Request::has_header	src/httplib.h	/^inline bool Request::has_header(const char *key) const {$/;"	f	class:httplib::Request
httplib::Request::has_param	src/httplib.h	/^inline bool Request::has_param(const char *key) const {$/;"	f	class:httplib::Request
httplib::Request::headers	src/httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Request
httplib::Request::matches	src/httplib.h	/^  Match matches;$/;"	m	struct:httplib::Request
httplib::Request::method	src/httplib.h	/^  std::string method;$/;"	m	struct:httplib::Request
httplib::Request::params	src/httplib.h	/^  Params params;$/;"	m	struct:httplib::Request
httplib::Request::path	src/httplib.h	/^  std::string path;$/;"	m	struct:httplib::Request
httplib::Request::progress	src/httplib.h	/^  Progress progress;$/;"	m	struct:httplib::Request
httplib::Request::ranges	src/httplib.h	/^  Ranges ranges;$/;"	m	struct:httplib::Request
httplib::Request::redirect_count	src/httplib.h	/^  size_t redirect_count = CPPHTTPLIB_REDIRECT_MAX_COUNT;$/;"	m	struct:httplib::Request
httplib::Request::response_handler	src/httplib.h	/^  ResponseHandler response_handler;$/;"	m	struct:httplib::Request
httplib::Request::set_header	src/httplib.h	/^inline void Request::set_header(const char *key, const char *val) {$/;"	f	class:httplib::Request
httplib::Request::set_header	src/httplib.h	/^inline void Request::set_header(const char *key, const std::string &val) {$/;"	f	class:httplib::Request
httplib::Request::ssl	src/httplib.h	/^  const SSL *ssl;$/;"	m	struct:httplib::Request
httplib::Request::target	src/httplib.h	/^  std::string target;$/;"	m	struct:httplib::Request
httplib::Request::version	src/httplib.h	/^  std::string version;$/;"	m	struct:httplib::Request
httplib::Response	src/httplib.h	/^struct Response {$/;"	s	namespace:httplib
httplib::Response::Response	src/httplib.h	/^  Response() : status(-1), content_length(0) {}$/;"	f	struct:httplib::Response
httplib::Response::body	src/httplib.h	/^  std::string body;$/;"	m	struct:httplib::Response
httplib::Response::content_length	src/httplib.h	/^  size_t content_length;$/;"	m	struct:httplib::Response
httplib::Response::content_provider	src/httplib.h	/^  ContentProviderWithCloser content_provider;$/;"	m	struct:httplib::Response
httplib::Response::content_provider_resource_releaser	src/httplib.h	/^  std::function<void()> content_provider_resource_releaser;$/;"	m	struct:httplib::Response
httplib::Response::get_header_value	src/httplib.h	/^inline std::string Response::get_header_value(const char *key,$/;"	f	class:httplib::Response
httplib::Response::get_header_value_count	src/httplib.h	/^inline size_t Response::get_header_value_count(const char *key) const {$/;"	f	class:httplib::Response
httplib::Response::has_header	src/httplib.h	/^inline bool Response::has_header(const char *key) const {$/;"	f	class:httplib::Response
httplib::Response::headers	src/httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Response
httplib::Response::set_chunked_content_provider	src/httplib.h	/^inline void Response::set_chunked_content_provider($/;"	f	class:httplib::Response
httplib::Response::set_content	src/httplib.h	/^inline void Response::set_content(const char *s, size_t n,$/;"	f	class:httplib::Response
httplib::Response::set_content	src/httplib.h	/^inline void Response::set_content(const std::string &s,$/;"	f	class:httplib::Response
httplib::Response::set_content_provider	src/httplib.h	/^inline void Response::set_content_provider($/;"	f	class:httplib::Response
httplib::Response::set_header	src/httplib.h	/^inline void Response::set_header(const char *key, const char *val) {$/;"	f	class:httplib::Response
httplib::Response::set_header	src/httplib.h	/^inline void Response::set_header(const char *key, const std::string &val) {$/;"	f	class:httplib::Response
httplib::Response::set_redirect	src/httplib.h	/^inline void Response::set_redirect(const char *url) {$/;"	f	class:httplib::Response
httplib::Response::status	src/httplib.h	/^  int status;$/;"	m	struct:httplib::Response
httplib::Response::version	src/httplib.h	/^  std::string version;$/;"	m	struct:httplib::Response
httplib::Response::~Response	src/httplib.h	/^  ~Response() {$/;"	f	struct:httplib::Response
httplib::SSLClient	src/httplib.h	/^class SSLClient : public Client {$/;"	c	namespace:httplib
httplib::SSLClient::SSLClient	src/httplib.h	/^inline SSLClient::SSLClient(const char *host, int port, time_t timeout_sec,$/;"	f	class:httplib::SSLClient
httplib::SSLClient::ca_cert_dir_path_	src/httplib.h	/^  std::string ca_cert_dir_path_;$/;"	m	class:httplib::SSLClient
httplib::SSLClient::ca_cert_file_path_	src/httplib.h	/^  std::string ca_cert_file_path_;$/;"	m	class:httplib::SSLClient
httplib::SSLClient::check_host_name	src/httplib.h	/^inline bool SSLClient::check_host_name(const char *pattern,$/;"	f	class:httplib::SSLClient
httplib::SSLClient::ctx_	src/httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLClient
httplib::SSLClient::ctx_mutex_	src/httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLClient
httplib::SSLClient::enable_server_certificate_verification	src/httplib.h	/^inline void SSLClient::enable_server_certificate_verification(bool enabled) {$/;"	f	class:httplib::SSLClient
httplib::SSLClient::get_openssl_verify_result	src/httplib.h	/^inline long SSLClient::get_openssl_verify_result() const {$/;"	f	class:httplib::SSLClient
httplib::SSLClient::host_components_	src/httplib.h	/^  std::vector<std::string> host_components_;$/;"	m	class:httplib::SSLClient
httplib::SSLClient::is_ssl	src/httplib.h	/^inline bool SSLClient::is_ssl() const { return true; }$/;"	f	class:httplib::SSLClient
httplib::SSLClient::is_valid	src/httplib.h	/^inline bool SSLClient::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLClient
httplib::SSLClient::noexcept	src/httplib.h	/^  SSL_CTX *ssl_context() const noexcept;$/;"	m	class:httplib::SSLClient
httplib::SSLClient::process_and_close_socket	src/httplib.h	/^inline bool SSLClient::process_and_close_socket($/;"	f	class:httplib::SSLClient
httplib::SSLClient::server_certificate_verification_	src/httplib.h	/^  bool server_certificate_verification_ = false;$/;"	m	class:httplib::SSLClient
httplib::SSLClient::set_ca_cert_path	src/httplib.h	/^inline void SSLClient::set_ca_cert_path(const char *ca_cert_file_path,$/;"	f	class:httplib::SSLClient
httplib::SSLClient::verify_host	src/httplib.h	/^inline bool SSLClient::verify_host(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
httplib::SSLClient::verify_host_with_common_name	src/httplib.h	/^inline bool SSLClient::verify_host_with_common_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
httplib::SSLClient::verify_host_with_subject_alt_name	src/httplib.h	/^SSLClient::verify_host_with_subject_alt_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
httplib::SSLClient::verify_result_	src/httplib.h	/^  long verify_result_ = 0;$/;"	m	class:httplib::SSLClient
httplib::SSLClient::~SSLClient	src/httplib.h	/^inline SSLClient::~SSLClient() {$/;"	f	class:httplib::SSLClient
httplib::SSLServer	src/httplib.h	/^class SSLServer : public Server {$/;"	c	namespace:httplib
httplib::SSLServer::SSLServer	src/httplib.h	/^inline SSLServer::SSLServer(const char *cert_path, const char *private_key_path,$/;"	f	class:httplib::SSLServer
httplib::SSLServer::ctx_	src/httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLServer
httplib::SSLServer::ctx_mutex_	src/httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLServer
httplib::SSLServer::is_valid	src/httplib.h	/^inline bool SSLServer::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLServer
httplib::SSLServer::process_and_close_socket	src/httplib.h	/^inline bool SSLServer::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::SSLServer
httplib::SSLServer::~SSLServer	src/httplib.h	/^inline SSLServer::~SSLServer() {$/;"	f	class:httplib::SSLServer
httplib::SSLSocketStream	src/httplib.h	/^class SSLSocketStream : public Stream {$/;"	c	namespace:httplib
httplib::SSLSocketStream::SSLSocketStream	src/httplib.h	/^inline SSLSocketStream::SSLSocketStream(socket_t sock, SSL *ssl,$/;"	f	class:httplib::SSLSocketStream
httplib::SSLSocketStream::get_remote_addr	src/httplib.h	/^inline std::string SSLSocketStream::get_remote_addr() const {$/;"	f	class:httplib::SSLSocketStream
httplib::SSLSocketStream::read	src/httplib.h	/^inline int SSLSocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::SSLSocketStream
httplib::SSLSocketStream::read_timeout_sec_	src/httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::SSLSocketStream
httplib::SSLSocketStream::read_timeout_usec_	src/httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::SSLSocketStream
httplib::SSLSocketStream::sock_	src/httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::SSLSocketStream
httplib::SSLSocketStream::ssl_	src/httplib.h	/^  SSL *ssl_;$/;"	m	class:httplib::SSLSocketStream
httplib::SSLSocketStream::write	src/httplib.h	/^inline int SSLSocketStream::write(const char *ptr) {$/;"	f	class:httplib::SSLSocketStream
httplib::SSLSocketStream::write	src/httplib.h	/^inline int SSLSocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::SSLSocketStream
httplib::SSLSocketStream::write	src/httplib.h	/^inline int SSLSocketStream::write(const std::string &s) {$/;"	f	class:httplib::SSLSocketStream
httplib::SSLSocketStream::~SSLSocketStream	src/httplib.h	/^inline SSLSocketStream::~SSLSocketStream() {}$/;"	f	class:httplib::SSLSocketStream
httplib::Server	src/httplib.h	/^class Server {$/;"	c	namespace:httplib
httplib::Server::Delete	src/httplib.h	/^inline Server &Server::Delete(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
httplib::Server::Get	src/httplib.h	/^inline Server &Server::Get(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
httplib::Server::Options	src/httplib.h	/^inline Server &Server::Options(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
httplib::Server::Patch	src/httplib.h	/^inline Server &Server::Patch(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
httplib::Server::Patch	src/httplib.h	/^inline Server &Server::Patch(const char *pattern,$/;"	f	class:httplib::Server
httplib::Server::Post	src/httplib.h	/^inline Server &Server::Post(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
httplib::Server::Post	src/httplib.h	/^inline Server &Server::Post(const char *pattern,$/;"	f	class:httplib::Server
httplib::Server::Put	src/httplib.h	/^inline Server &Server::Put(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
httplib::Server::Put	src/httplib.h	/^inline Server &Server::Put(const char *pattern,$/;"	f	class:httplib::Server
httplib::Server::Server	src/httplib.h	/^inline Server::Server()$/;"	f	class:httplib::Server
httplib::Server::base_dirs_	src/httplib.h	/^  std::vector<std::pair<std::string, std::string>> base_dirs_;$/;"	m	class:httplib::Server
httplib::Server::bind_internal	src/httplib.h	/^inline int Server::bind_internal(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
httplib::Server::bind_to_any_port	src/httplib.h	/^inline int Server::bind_to_any_port(const char *host, int socket_flags) {$/;"	f	class:httplib::Server
httplib::Server::bind_to_port	src/httplib.h	/^inline bool Server::bind_to_port(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
httplib::Server::create_server_socket	src/httplib.h	/^inline socket_t Server::create_server_socket(const char *host, int port,$/;"	f	class:httplib::Server
httplib::Server::delete_handlers_	src/httplib.h	/^  Handlers delete_handlers_;$/;"	m	class:httplib::Server
httplib::Server::dispatch_request	src/httplib.h	/^inline bool Server::dispatch_request(Request &req, Response &res,$/;"	f	class:httplib::Server
httplib::Server::dispatch_request_for_content_reader	src/httplib.h	/^Server::dispatch_request_for_content_reader(Request &req, Response &res,$/;"	f	class:httplib::Server
httplib::Server::error_handler_	src/httplib.h	/^  Handler error_handler_;$/;"	m	class:httplib::Server
httplib::Server::file_request_handler_	src/httplib.h	/^  Handler file_request_handler_;$/;"	m	class:httplib::Server
httplib::Server::get_handlers_	src/httplib.h	/^  Handlers get_handlers_;$/;"	m	class:httplib::Server
httplib::Server::handle_file_request	src/httplib.h	/^inline bool Server::handle_file_request(Request &req, Response &res) {$/;"	f	class:httplib::Server
httplib::Server::is_running	src/httplib.h	/^inline bool Server::is_running() const { return is_running_; }$/;"	f	class:httplib::Server
httplib::Server::is_running_	src/httplib.h	/^  std::atomic<bool> is_running_;$/;"	m	class:httplib::Server
httplib::Server::is_valid	src/httplib.h	/^inline bool Server::is_valid() const { return true; }$/;"	f	class:httplib::Server
httplib::Server::keep_alive_max_count_	src/httplib.h	/^  size_t keep_alive_max_count_;$/;"	m	class:httplib::Server
httplib::Server::listen	src/httplib.h	/^inline bool Server::listen(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
httplib::Server::listen_after_bind	src/httplib.h	/^inline bool Server::listen_after_bind() { return listen_internal(); }$/;"	f	class:httplib::Server
httplib::Server::listen_internal	src/httplib.h	/^inline bool Server::listen_internal() {$/;"	f	class:httplib::Server
httplib::Server::logger_	src/httplib.h	/^  Logger logger_;$/;"	m	class:httplib::Server
httplib::Server::new_task_queue	src/httplib.h	/^  std::function<TaskQueue *(void)> new_task_queue;$/;"	m	class:httplib::Server
httplib::Server::options_handlers_	src/httplib.h	/^  Handlers options_handlers_;$/;"	m	class:httplib::Server
httplib::Server::parse_request_line	src/httplib.h	/^inline bool Server::parse_request_line(const char *s, Request &req) {$/;"	f	class:httplib::Server
httplib::Server::patch_handlers_	src/httplib.h	/^  Handlers patch_handlers_;$/;"	m	class:httplib::Server
httplib::Server::patch_handlers_for_content_reader	src/httplib.h	/^  HandersForContentReader patch_handlers_for_content_reader;$/;"	m	class:httplib::Server
httplib::Server::payload_max_length_	src/httplib.h	/^  size_t payload_max_length_;$/;"	m	class:httplib::Server
httplib::Server::post_handlers_	src/httplib.h	/^  Handlers post_handlers_;$/;"	m	class:httplib::Server
httplib::Server::post_handlers_for_content_reader	src/httplib.h	/^  HandersForContentReader post_handlers_for_content_reader;$/;"	m	class:httplib::Server
httplib::Server::process_and_close_socket	src/httplib.h	/^inline bool Server::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::Server
httplib::Server::process_request	src/httplib.h	/^Server::process_request(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
httplib::Server::put_handlers_	src/httplib.h	/^  Handlers put_handlers_;$/;"	m	class:httplib::Server
httplib::Server::put_handlers_for_content_reader	src/httplib.h	/^  HandersForContentReader put_handlers_for_content_reader;$/;"	m	class:httplib::Server
httplib::Server::read_content	src/httplib.h	/^inline bool Server::read_content(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
httplib::Server::read_content_with_content_receiver	src/httplib.h	/^Server::read_content_with_content_receiver(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
httplib::Server::read_timeout_sec_	src/httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::Server
httplib::Server::read_timeout_usec_	src/httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::Server
httplib::Server::routing	src/httplib.h	/^inline bool Server::routing(Request &req, Response &res, Stream &strm, bool last_connection) {$/;"	f	class:httplib::Server
httplib::Server::set_base_dir	src/httplib.h	/^inline bool Server::set_base_dir(const char *dir, const char *mount_point) {$/;"	f	class:httplib::Server
httplib::Server::set_error_handler	src/httplib.h	/^inline void Server::set_error_handler(Handler handler) {$/;"	f	class:httplib::Server
httplib::Server::set_file_request_handler	src/httplib.h	/^inline void Server::set_file_request_handler(Handler handler) {$/;"	f	class:httplib::Server
httplib::Server::set_keep_alive_max_count	src/httplib.h	/^inline void Server::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Server
httplib::Server::set_logger	src/httplib.h	/^inline void Server::set_logger(Logger logger) { logger_ = std::move(logger); }$/;"	f	class:httplib::Server
httplib::Server::set_payload_max_length	src/httplib.h	/^inline void Server::set_payload_max_length(size_t length) {$/;"	f	class:httplib::Server
httplib::Server::set_read_timeout	src/httplib.h	/^inline void Server::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Server
httplib::Server::stop	src/httplib.h	/^inline void Server::stop() {$/;"	f	class:httplib::Server
httplib::Server::svr_sock_	src/httplib.h	/^  std::atomic<socket_t> svr_sock_;$/;"	m	class:httplib::Server
httplib::Server::write_content_with_provider	src/httplib.h	/^Server::write_content_with_provider(Stream &strm, const Request &req,$/;"	f	class:httplib::Server
httplib::Server::write_response	src/httplib.h	/^inline bool Server::write_response(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
httplib::Server::~Server	src/httplib.h	/^inline Server::~Server() {}$/;"	f	class:httplib::Server
httplib::SocketStream	src/httplib.h	/^class SocketStream : public Stream {$/;"	c	namespace:httplib
httplib::SocketStream::SocketStream	src/httplib.h	/^inline SocketStream::SocketStream(socket_t sock, time_t read_timeout_sec,$/;"	f	class:httplib::SocketStream
httplib::SocketStream::get_remote_addr	src/httplib.h	/^inline std::string SocketStream::get_remote_addr() const {$/;"	f	class:httplib::SocketStream
httplib::SocketStream::override	src/httplib.h	/^  int read(char *ptr, size_t size) override;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::override	src/httplib.h	/^  int write(const char *ptr) override;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::override	src/httplib.h	/^  int write(const char *ptr, size_t size) override;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::override	src/httplib.h	/^  int write(const std::string &s) override;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::override	src/httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::override	src/httplib.h	/^  ~SocketStream() override;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::read	src/httplib.h	/^inline int SocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::SocketStream
httplib::SocketStream::read_timeout_sec_	src/httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::read_timeout_usec_	src/httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::sock_	src/httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::SocketStream
httplib::SocketStream::write	src/httplib.h	/^inline int SocketStream::write(const char *ptr) {$/;"	f	class:httplib::SocketStream
httplib::SocketStream::write	src/httplib.h	/^inline int SocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::SocketStream
httplib::SocketStream::write	src/httplib.h	/^inline int SocketStream::write(const std::string &s) {$/;"	f	class:httplib::SocketStream
httplib::SocketStream::~SocketStream	src/httplib.h	/^inline SocketStream::~SocketStream() {}$/;"	f	class:httplib::SocketStream
httplib::Stream	src/httplib.h	/^class Stream {$/;"	c	namespace:httplib
httplib::Stream::write_format	src/httplib.h	/^inline int Stream::write_format(const char *fmt, const Args &... args) {$/;"	f	class:httplib::Stream
httplib::TaskQueue	src/httplib.h	/^class TaskQueue {$/;"	c	namespace:httplib
httplib::ThreadPool	src/httplib.h	/^class ThreadPool : public TaskQueue {$/;"	c	namespace:httplib
httplib::ThreadPool::ThreadPool	src/httplib.h	/^  explicit ThreadPool(size_t n) : shutdown_(false) {$/;"	f	class:httplib::ThreadPool
httplib::ThreadPool::cond_	src/httplib.h	/^  std::condition_variable cond_;$/;"	m	class:httplib::ThreadPool
httplib::ThreadPool::jobs_	src/httplib.h	/^  std::list<std::function<void()>> jobs_;$/;"	m	class:httplib::ThreadPool
httplib::ThreadPool::mutex_	src/httplib.h	/^  std::mutex mutex_;$/;"	m	class:httplib::ThreadPool
httplib::ThreadPool::override	src/httplib.h	/^  ~ThreadPool() override = default;$/;"	m	class:httplib::ThreadPool
httplib::ThreadPool::shutdown_	src/httplib.h	/^  bool shutdown_;$/;"	m	class:httplib::ThreadPool
httplib::ThreadPool::threads_	src/httplib.h	/^  std::vector<std::thread> threads_;$/;"	m	class:httplib::ThreadPool
httplib::ThreadPool::worker	src/httplib.h	/^  struct worker {$/;"	s	class:httplib::ThreadPool
httplib::ThreadPool::worker::operator ()	src/httplib.h	/^    void operator()() {$/;"	f	struct:httplib::ThreadPool::worker
httplib::ThreadPool::worker::pool_	src/httplib.h	/^    ThreadPool &pool_;$/;"	m	struct:httplib::ThreadPool::worker
httplib::ThreadPool::worker::worker	src/httplib.h	/^    explicit worker(ThreadPool &pool) : pool_(pool) {}$/;"	f	struct:httplib::ThreadPool::worker
httplib::Threads	src/httplib.h	/^class Threads : public TaskQueue {$/;"	c	namespace:httplib
httplib::Threads::Threads	src/httplib.h	/^  Threads() : running_threads_(0) {}$/;"	f	class:httplib::Threads
httplib::Threads::running_threads_	src/httplib.h	/^  int running_threads_;$/;"	m	class:httplib::Threads
httplib::Threads::running_threads_mutex_	src/httplib.h	/^  std::mutex running_threads_mutex_;$/;"	m	class:httplib::Threads
httplib::Threads::~Threads	src/httplib.h	/^  virtual ~Threads() {}$/;"	f	class:httplib::Threads
httplib::detail	src/httplib.h	/^namespace detail {$/;"	n	namespace:httplib
httplib::detail::SSLInit	src/httplib.h	/^class SSLInit {$/;"	c	namespace:httplib::detail
httplib::detail::SSLInit::SSLInit	src/httplib.h	/^  SSLInit() {$/;"	f	class:httplib::detail::SSLInit
httplib::detail::SSLInit::thread_init_	src/httplib.h	/^  SSLThreadLocks thread_init_;$/;"	m	class:httplib::detail::SSLInit
httplib::detail::SSLInit::~SSLInit	src/httplib.h	/^  ~SSLInit() {$/;"	f	class:httplib::detail::SSLInit
httplib::detail::SSLThreadLocks	src/httplib.h	/^class SSLThreadLocks {$/;"	c	namespace:httplib::detail
httplib::detail::SSLThreadLocks::SSLThreadLocks	src/httplib.h	/^  SSLThreadLocks() {$/;"	f	class:httplib::detail::SSLThreadLocks
httplib::detail::SSLThreadLocks::locking_callback	src/httplib.h	/^  static void locking_callback(int mode, int type, const char * \/*file*\/,$/;"	f	class:httplib::detail::SSLThreadLocks
httplib::detail::SSLThreadLocks::~SSLThreadLocks	src/httplib.h	/^  ~SSLThreadLocks() { CRYPTO_set_locking_callback(nullptr); }$/;"	f	class:httplib::detail::SSLThreadLocks
httplib::detail::WSInit	src/httplib.h	/^class WSInit {$/;"	c	namespace:httplib::detail
httplib::detail::WSInit::WSInit	src/httplib.h	/^  WSInit() {$/;"	f	class:httplib::detail::WSInit
httplib::detail::WSInit::~WSInit	src/httplib.h	/^  ~WSInit() { WSACleanup(); }$/;"	f	class:httplib::detail::WSInit
httplib::detail::base64_encode	src/httplib.h	/^inline std::string base64_encode(const std::string &in) {$/;"	f	namespace:httplib::detail
httplib::detail::can_compress	src/httplib.h	/^inline bool can_compress(const std::string &content_type) {$/;"	f	namespace:httplib::detail
httplib::detail::ci	src/httplib.h	/^struct ci {$/;"	s	namespace:httplib::detail
httplib::detail::ci::operator ()	src/httplib.h	/^  bool operator()(const std::string &s1, const std::string &s2) const {$/;"	f	struct:httplib::detail::ci
httplib::detail::close_socket	src/httplib.h	/^inline int close_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
httplib::detail::compress	src/httplib.h	/^inline bool compress(std::string &content) {$/;"	f	namespace:httplib::detail
httplib::detail::create_socket	src/httplib.h	/^socket_t create_socket(const char *host, int port, Fn fn,$/;"	f	namespace:httplib::detail
httplib::detail::decode_url	src/httplib.h	/^inline std::string decode_url(const std::string &s) {$/;"	f	namespace:httplib::detail
httplib::detail::decompressor	src/httplib.h	/^class decompressor {$/;"	c	namespace:httplib::detail
httplib::detail::decompressor::decompress	src/httplib.h	/^  bool decompress(const char *data, size_t data_length, T callback) {$/;"	f	class:httplib::detail::decompressor
httplib::detail::decompressor::decompressor	src/httplib.h	/^  decompressor() {$/;"	f	class:httplib::detail::decompressor
httplib::detail::decompressor::is_valid	src/httplib.h	/^  bool is_valid() const { return is_valid_; }$/;"	f	class:httplib::detail::decompressor
httplib::detail::decompressor::is_valid_	src/httplib.h	/^  bool is_valid_;$/;"	m	class:httplib::detail::decompressor
httplib::detail::decompressor::strm	src/httplib.h	/^  z_stream strm;$/;"	m	class:httplib::detail::decompressor
httplib::detail::decompressor::~decompressor	src/httplib.h	/^  ~decompressor() { inflateEnd(&strm); }$/;"	f	class:httplib::detail::decompressor
httplib::detail::encode_url	src/httplib.h	/^inline std::string encode_url(const std::string &s) {$/;"	f	namespace:httplib::detail
httplib::detail::file_extension	src/httplib.h	/^inline std::string file_extension(const std::string &path) {$/;"	f	namespace:httplib::detail
httplib::detail::find_content_type	src/httplib.h	/^inline const char *find_content_type(const std::string &path) {$/;"	f	namespace:httplib::detail
httplib::detail::from_hex_to_i	src/httplib.h	/^inline bool from_hex_to_i(const std::string &s, size_t i, size_t cnt,$/;"	f	namespace:httplib::detail
httplib::detail::from_i_to_hex	src/httplib.h	/^inline std::string from_i_to_hex(size_t n) {$/;"	f	namespace:httplib::detail
httplib::detail::get_header_value	src/httplib.h	/^inline const char *get_header_value(const Headers &headers, const char *key,$/;"	f	namespace:httplib::detail
httplib::detail::get_header_value_uint64	src/httplib.h	/^inline uint64_t get_header_value_uint64(const Headers &headers, const char *key,$/;"	f	namespace:httplib::detail
httplib::detail::get_multipart_ranges_data_length	src/httplib.h	/^get_multipart_ranges_data_length(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
httplib::detail::get_range_offset_and_length	src/httplib.h	/^get_range_offset_and_length(const Request &req, const Response &res,$/;"	f	namespace:httplib::detail
httplib::detail::get_range_offset_and_length	src/httplib.h	/^get_range_offset_and_length(const Request &req, size_t content_length,$/;"	f	namespace:httplib::detail
httplib::detail::get_remote_addr	src/httplib.h	/^inline std::string get_remote_addr(socket_t sock) {$/;"	f	namespace:httplib::detail
httplib::detail::has_header	src/httplib.h	/^inline bool has_header(const Headers &headers, const char *key) {$/;"	f	namespace:httplib::detail
httplib::detail::is_chunked_transfer_encoding	src/httplib.h	/^inline bool is_chunked_transfer_encoding(const Headers &headers) {$/;"	f	namespace:httplib::detail
httplib::detail::is_connection_error	src/httplib.h	/^inline bool is_connection_error() {$/;"	f	namespace:httplib::detail
httplib::detail::is_dir	src/httplib.h	/^inline bool is_dir(const std::string &path) {$/;"	f	namespace:httplib::detail
httplib::detail::is_file	src/httplib.h	/^inline bool is_file(const std::string &path) {$/;"	f	namespace:httplib::detail
httplib::detail::is_hex	src/httplib.h	/^inline bool is_hex(char c, int &v) {$/;"	f	namespace:httplib::detail
httplib::detail::is_valid_path	src/httplib.h	/^inline bool is_valid_path(const std::string &path) {$/;"	f	namespace:httplib::detail
httplib::detail::make_content_range_header_field	src/httplib.h	/^inline std::string make_content_range_header_field(size_t offset, size_t length,$/;"	f	namespace:httplib::detail
httplib::detail::make_multipart_data_boundary	src/httplib.h	/^inline std::string make_multipart_data_boundary() {$/;"	f	namespace:httplib::detail
httplib::detail::make_multipart_ranges_data	src/httplib.h	/^inline std::string make_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
httplib::detail::openSSL_locks_	src/httplib.h	/^static std::shared_ptr<std::vector<std::mutex>> openSSL_locks_;$/;"	m	namespace:httplib::detail
httplib::detail::parse_multipart_boundary	src/httplib.h	/^inline bool parse_multipart_boundary(const std::string &content_type,$/;"	f	namespace:httplib::detail
httplib::detail::parse_multipart_formdata	src/httplib.h	/^inline bool parse_multipart_formdata(const std::string &boundary,$/;"	f	namespace:httplib::detail
httplib::detail::parse_query_text	src/httplib.h	/^inline void parse_query_text(const std::string &s, Params &params) {$/;"	f	namespace:httplib::detail
httplib::detail::parse_range_header	src/httplib.h	/^inline bool parse_range_header(const std::string &s, Ranges &ranges) {$/;"	f	namespace:httplib::detail
httplib::detail::process_and_close_socket	src/httplib.h	/^inline bool process_and_close_socket(bool is_client_request, socket_t sock,$/;"	f	namespace:httplib::detail
httplib::detail::process_and_close_socket_ssl	src/httplib.h	/^inline bool process_and_close_socket_ssl($/;"	f	namespace:httplib::detail
httplib::detail::process_multipart_ranges_data	src/httplib.h	/^bool process_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
httplib::detail::read_content	src/httplib.h	/^bool read_content(Stream &strm, T &x, size_t payload_max_length, int &status,$/;"	f	namespace:httplib::detail
httplib::detail::read_content_chunked	src/httplib.h	/^inline bool read_content_chunked(Stream &strm, ContentReceiver out) {$/;"	f	namespace:httplib::detail
httplib::detail::read_content_with_length	src/httplib.h	/^inline bool read_content_with_length(Stream &strm, uint64_t len,$/;"	f	namespace:httplib::detail
httplib::detail::read_content_without_length	src/httplib.h	/^inline bool read_content_without_length(Stream &strm, ContentReceiver out) {$/;"	f	namespace:httplib::detail
httplib::detail::read_file	src/httplib.h	/^inline void read_file(const std::string &path, std::string &out) {$/;"	f	namespace:httplib::detail
httplib::detail::read_headers	src/httplib.h	/^inline bool read_headers(Stream &strm, Headers &headers) {$/;"	f	namespace:httplib::detail
httplib::detail::redirect	src/httplib.h	/^inline bool redirect(T &cli, const Request &req, Response &res,$/;"	f	namespace:httplib::detail
httplib::detail::select_read	src/httplib.h	/^inline int select_read(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
httplib::detail::set_nonblocking	src/httplib.h	/^inline void set_nonblocking(socket_t sock, bool nonblocking) {$/;"	f	namespace:httplib::detail
httplib::detail::shutdown_socket	src/httplib.h	/^inline int shutdown_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
httplib::detail::skip_content_with_length	src/httplib.h	/^inline void skip_content_with_length(Stream &strm, uint64_t len) {$/;"	f	namespace:httplib::detail
httplib::detail::split	src/httplib.h	/^template <class Fn> void split(const char *b, const char *e, char d, Fn fn) {$/;"	f	namespace:httplib::detail
httplib::detail::sslinit_	src/httplib.h	/^static SSLInit sslinit_;$/;"	m	namespace:httplib::detail
httplib::detail::status_message	src/httplib.h	/^inline const char *status_message(int status) {$/;"	f	namespace:httplib::detail
httplib::detail::stream_line_reader	src/httplib.h	/^class stream_line_reader {$/;"	c	namespace:httplib::detail
httplib::detail::stream_line_reader::append	src/httplib.h	/^  void append(char c) {$/;"	f	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::fixed_buffer_	src/httplib.h	/^  char *fixed_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::fixed_buffer_size_	src/httplib.h	/^  const size_t fixed_buffer_size_;$/;"	m	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::fixed_buffer_used_size_	src/httplib.h	/^  size_t fixed_buffer_used_size_ = 0;$/;"	m	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::getline	src/httplib.h	/^  bool getline() {$/;"	f	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::glowable_buffer_	src/httplib.h	/^  std::string glowable_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::ptr	src/httplib.h	/^  const char *ptr() const {$/;"	f	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::size	src/httplib.h	/^  size_t size() const {$/;"	f	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::stream_line_reader	src/httplib.h	/^  stream_line_reader(Stream &strm, char *fixed_buffer, size_t fixed_buffer_size)$/;"	f	class:httplib::detail::stream_line_reader
httplib::detail::stream_line_reader::strm_	src/httplib.h	/^  Stream &strm_;$/;"	m	class:httplib::detail::stream_line_reader
httplib::detail::to_lower	src/httplib.h	/^inline std::string to_lower(const char *beg, const char *end) {$/;"	f	namespace:httplib::detail
httplib::detail::to_utf8	src/httplib.h	/^inline size_t to_utf8(int code, char *buff) {$/;"	f	namespace:httplib::detail
httplib::detail::wait_until_socket_is_ready	src/httplib.h	/^inline bool wait_until_socket_is_ready(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
httplib::detail::write_content	src/httplib.h	/^inline ssize_t write_content(Stream &strm,$/;"	f	namespace:httplib::detail
httplib::detail::write_content_chunked	src/httplib.h	/^write_content_chunked(Stream &strm,$/;"	f	namespace:httplib::detail
httplib::detail::write_headers	src/httplib.h	/^inline int write_headers(Stream &strm, const T &info, const Headers &headers) {$/;"	f	namespace:httplib::detail
httplib::detail::write_multipart_ranges_data	src/httplib.h	/^inline bool write_multipart_ranges_data(Stream &strm, const Request &req,$/;"	f	namespace:httplib::detail
httplib::detail::wsinit_	src/httplib.h	/^static WSInit wsinit_;$/;"	m	namespace:httplib::detail
httplib::make_basic_authentication_header	src/httplib.h	/^make_basic_authentication_header(const std::string &username,$/;"	f	namespace:httplib
httplib::make_range_header	src/httplib.h	/^inline std::pair<std::string, std::string> make_range_header(Ranges ranges) {$/;"	f	namespace:httplib
hue	include/darknet.h	/^    float hue;$/;"	m	struct:load_args
hue	include/darknet.h	/^    float hue;$/;"	m	struct:network
hue_image	src/image.c	/^void hue_image(image im, float hue)$/;"	f
huff_ac	3rdparty/stb/include/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon9
huff_dc	3rdparty/stb/include/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon9
i	include/darknet.h	/^    int i, j;$/;"	m	struct:contrastive_params
i_cpu	include/darknet.h	/^    float *i_cpu;$/;"	m	struct:layer
i_gpu	include/darknet.h	/^    float *i_gpu;$/;"	m	struct:layer
id	3rdparty/stb/include/stb_image.h	/^      int id;$/;"	m	struct:__anon9::__anon10
id	include/darknet.h	/^    int id;$/;"	m	struct:box_label
idata	3rdparty/stb/include/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
idct_block_kernel	3rdparty/stb/include/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon9
ignore_thresh	include/darknet.h	/^    float ignore_thresh;$/;"	m	struct:layer
illoptchar	src/getopt.h	/^static const char illoptchar[] = "unknown option -- %c";$/;"	v
illoptstring	src/getopt.h	/^static const char illoptstring[] = "unknown option -- %s";$/;"	v
im	include/darknet.h	/^    image *im;$/;"	m	struct:load_args
im2col.c	src/im2col.c	1;"	F
im2col.h	src/im2col.h	1;"	F
im2col_align_bin_gpu_kernel	src/im2col_kernels.cu	/^__global__ void im2col_align_bin_gpu_kernel(const int n, const float* data_im,$/;"	f
im2col_align_bin_ongpu	src/im2col_kernels.cu	/^void im2col_align_bin_ongpu(float *im,$/;"	f
im2col_align_gpu_kernel	src/im2col_kernels.cu	/^__global__ void im2col_align_gpu_kernel(const int n, const float* data_im,$/;"	f
im2col_align_ongpu	src/im2col_kernels.cu	/^void im2col_align_ongpu(float *im,$/;"	f
im2col_cpu	src/im2col.c	/^void im2col_cpu(float* data_im,$/;"	f
im2col_cpu_custom	src/gemm.c	/^void im2col_cpu_custom(float* data_im,$/;"	f
im2col_cpu_custom_align	src/gemm.c	/^void im2col_cpu_custom_align(float* data_im,$/;"	f
im2col_cpu_custom_bin	src/gemm.c	/^void im2col_cpu_custom_bin(float* data_im,$/;"	f
im2col_cpu_custom_transpose	src/gemm.c	/^void im2col_cpu_custom_transpose(float* data_im,$/;"	f
im2col_cpu_ext	src/im2col.c	/^void im2col_cpu_ext(const float* data_im, const int channels,$/;"	f
im2col_get_pixel	src/im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
im2col_gpu_ext	src/im2col_kernels.cu	/^void im2col_gpu_ext(const float* data_im, const int channels,$/;"	f
im2col_gpu_kernel	src/im2col_kernels.cu	/^__global__ void im2col_gpu_kernel(const int n, const float* data_im,$/;"	f
im2col_gpu_kernel_ext	src/im2col_kernels.cu	/^__global__ void im2col_gpu_kernel_ext(const int n, const float* data_im,$/;"	f
im2col_kernels.cu	src/im2col_kernels.cu	1;"	F
im2col_ongpu	src/im2col_kernels.cu	/^void im2col_ongpu(float *im,$/;"	f
image	include/darknet.h	/^typedef struct image image;$/;"	t	typeref:struct:image
image	include/darknet.h	/^typedef struct image {$/;"	s
image	include/darknet.h	/^} image;$/;"	t	typeref:struct:image
image.c	src/image.c	1;"	F
image.h	src/image.h	1;"	F
image::c	include/darknet.h	/^    int c;$/;"	m	struct:image
image::data	include/darknet.h	/^    float *data;$/;"	m	struct:image
image::h	include/darknet.h	/^    int h;$/;"	m	struct:image
image::w	include/darknet.h	/^    int w;$/;"	m	struct:image
image_classification	darknet_images.py	/^def image_classification(image, network, class_names):$/;"	f
image_data_augmentation	src/image_opencv.cpp	/^extern "C" image image_data_augmentation(mat_cv* mat, int w, int h,$/;"	f
image_detection	darknet_images.py	/^def image_detection(image_path, network, class_names, class_colors, thresh):$/;"	f
image_distance	src/image.c	/^image image_distance(image a, image b)$/;"	f
image_ids	build/darknet/x64/data/voc/voc_label.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
image_ids	scripts/voc_label.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
image_ids	scripts/voc_label_difficult.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
image_index	src/detector.c	/^    int image_index;$/;"	m	struct:__anon35	file:
image_opencv.cpp	src/image_opencv.cpp	1;"	F
image_opencv.h	src/image_opencv.h	1;"	F
image_t	include/yolo_v2_class.hpp	/^struct image_t {$/;"	s
image_t::c	include/yolo_v2_class.hpp	/^    int c;                        \/\/ number of chanels (3 - for RGB)$/;"	m	struct:image_t
image_t::data	include/yolo_v2_class.hpp	/^    float *data;                  \/\/ pointer to the image data$/;"	m	struct:image_t
image_t::h	include/yolo_v2_class.hpp	/^    int h;                        \/\/ height$/;"	m	struct:image_t
image_t::w	include/yolo_v2_class.hpp	/^    int w;                        \/\/ width$/;"	m	struct:image_t
image_to_mat	src/image_opencv.cpp	/^extern "C" cv::Mat image_to_mat(image img)$/;"	f
image_yolov3.sh	image_yolov3.sh	1;"	F
image_yolov4.sh	image_yolov4.sh	1;"	F
imagenet_label.sh	scripts/imagenet_label.sh	1;"	F
images	src/yolo_v2_class.cpp	/^    image images[NFRAMES];$/;"	m	struct:detector_gpu_t	file:
img_buffer	3rdparty/stb/include/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon4
img_buffer_end	3rdparty/stb/include/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon4
img_buffer_original	3rdparty/stb/include/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon4
img_buffer_original_end	3rdparty/stb/include/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon4
img_comp	3rdparty/stb/include/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon9	typeref:struct:__anon9::__anon10
img_h_max	3rdparty/stb/include/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9
img_mcu_h	3rdparty/stb/include/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9
img_mcu_w	3rdparty/stb/include/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9
img_mcu_x	3rdparty/stb/include/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9
img_mcu_y	3rdparty/stb/include/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9
img_n	3rdparty/stb/include/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon4
img_name	scripts/get_openimages_dataset.py	/^                    img_name = bbox[0]$/;"	v
img_name	scripts/get_openimages_dataset.py	/^img_name = "111111111111"$/;"	v
img_out_n	3rdparty/stb/include/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon4
img_size	include/yolo_v2_class.hpp	/^    cv::Size img_size;  \/\/ max value of x,y,w,h$/;"	m	class:track_kalman_t
img_v_max	3rdparty/stb/include/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9
img_x	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon4
img_y	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon4
in_img	src/demo.c	/^mat_cv* in_img;$/;"	v
in_s	src/demo.c	/^static image in_s ;$/;"	v	file:
increment_layer	src/conv_lstm_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/lstm_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	include/darknet.h	/^    int index;$/;"	m	struct:layer
index	include/darknet.h	/^    int index;$/;"	m	struct:network
index	include/darknet.h	/^    int index;$/;"	m	struct:network_state
index	src/box.c	/^    int index;$/;"	m	struct:__anon28	file:
index	src/parser.c	/^    int index;$/;"	m	struct:size_params	file:
indexes	include/darknet.h	/^    int   * indexes;$/;"	m	struct:layer
indexes_gpu	include/darknet.h	/^    int *indexes_gpu;$/;"	m	struct:layer
inference	build/darknet/x64/darknet_video.py	/^def inference(darknet_image_queue, detections_queue, fps_queue):$/;"	f
inference	darknet_video.py	/^def inference(darknet_image_queue, detections_queue, fps_queue):$/;"	f
init	src/yolo_v2_class.cpp	/^int init(const char *configurationFilename, const char *weightsFilename, int gpu, int batch_size)$/;"	f
init_cpu	build/darknet/x64/darknet.py	/^init_cpu = lib.init_cpu$/;"	v
init_cpu	darknet.py	/^init_cpu = lib.init_cpu$/;"	v
init_cpu	src/gemm.c	/^void init_cpu() {$/;"	f
init_sequential_subdivisions	include/darknet.h	/^    int init_sequential_subdivisions;$/;"	m	struct:network
initialize_kalman	include/yolo_v2_class.hpp	/^        void initialize_kalman()$/;"	f	struct:track_kalman_t::one_kalman_t
inline	include/darknet.h	5;"	d
input	include/darknet.h	/^    float *input;$/;"	m	struct:network
input	include/darknet.h	/^    float *input;$/;"	m	struct:network_state
input16_gpu	include/darknet.h	/^    float **input16_gpu;$/;"	m	struct:network
input_antialiasing_gpu	include/darknet.h	/^    float * input_antialiasing_gpu;$/;"	m	struct:layer
input_gate_layer	include/darknet.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_gpu	include/darknet.h	/^    float **input_gpu;$/;"	m	struct:network
input_h_layer	include/darknet.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layer	include/darknet.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layers	include/darknet.h	/^    int   * input_layers;$/;"	m	struct:layer
input_path	build/darknet/x64/darknet_video.py	/^    input_path = str2int(args.input)$/;"	v
input_path	darknet_video.py	/^    input_path = str2int(args.input)$/;"	v
input_pinned_cpu	include/darknet.h	/^    float *input_pinned_cpu;$/;"	m	struct:network
input_pinned_cpu_flag	include/darknet.h	/^    int input_pinned_cpu_flag;$/;"	m	struct:network
input_r_layer	include/darknet.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_save_layer	include/darknet.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_shortcut_gpu	src/blas_kernels.cu	/^extern "C" void input_shortcut_gpu(float *in, int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
input_shortcut_kernel	src/blas_kernels.cu	/^__global__ void input_shortcut_kernel(float *in, int size, int minw, int minh, int minc, int stride, int sample, int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
input_sizes	include/darknet.h	/^    int   * input_sizes;$/;"	m	struct:layer
input_sizes_gpu	include/darknet.h	/^    int *input_sizes_gpu;$/;"	m	struct:layer
input_state_gpu	include/darknet.h	/^    float *input_state_gpu;$/;"	m	struct:network
input_state_layer	include/darknet.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_z_layer	include/darknet.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:layer
inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:network
inputs	src/parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
install_OpenCV4.sh	scripts/install_OpenCV4.sh	1;"	F
int_index	src/utils.c	/^int int_index(int *a, int val, int n)$/;"	f
int_to_alphanum	src/utils.c	/^char int_to_alphanum(int i)$/;"	f
inter_cpu	src/blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
inverse_variance_kernel	src/blas_kernels.cu	/^__global__ void inverse_variance_kernel(int size, float *src, float *dst, float epsilon)$/;"	f
inverse_variance_ongpu	src/blas_kernels.cu	/^extern "C" void inverse_variance_ongpu(int size, float *src, float *dst, float epsilon)$/;"	f
inverted	src/go.c	/^int inverted = 1;$/;"	v
io	3rdparty/stb/include/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon4
io_user_data	3rdparty/stb/include/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon4
iou	include/darknet.h	/^    float iou, giou, diou, ciou;$/;"	m	struct:ious
iou_loss	include/darknet.h	/^    IOU_LOSS iou_loss;$/;"	m	struct:layer
iou_normalizer	include/darknet.h	/^    float iou_normalizer;$/;"	m	struct:layer
iou_thresh	include/darknet.h	/^    float iou_thresh;$/;"	m	struct:layer
iou_thresh_kind	include/darknet.h	/^    IOU_LOSS iou_thresh_kind;$/;"	m	struct:layer
ious	include/darknet.h	/^typedef struct ious {$/;"	s
ious	include/darknet.h	/^} ious;$/;"	t	typeref:struct:ious
ious::ciou	include/darknet.h	/^    float iou, giou, diou, ciou;$/;"	m	struct:ious
ious::diou	include/darknet.h	/^    float iou, giou, diou, ciou;$/;"	m	struct:ious
ious::dx_giou	include/darknet.h	/^    dxrep dx_giou;$/;"	m	struct:ious
ious::dx_iou	include/darknet.h	/^    dxrep dx_iou;$/;"	m	struct:ious
ious::giou	include/darknet.h	/^    float iou, giou, diou, ciou;$/;"	m	struct:ious
ious::iou	include/darknet.h	/^    float iou, giou, diou, ciou;$/;"	m	struct:ious
isOpened	src/http_stream.cpp	/^    bool isOpened()$/;"	f	class:JSON_sender
isOpened	src/http_stream.cpp	/^    bool isOpened()$/;"	f	class:MJPG_sender
is_a_ge_zero_and_a_lt_b	src/col2im.c	/^inline static int is_a_ge_zero_and_a_lt_b(int a, int b) {$/;"	f	file:
is_a_ge_zero_and_a_lt_b	src/im2col.c	/^inline static int is_a_ge_zero_and_a_lt_b(int a, int b) {$/;"	f	file:
is_avx	src/gemm.c	/^int is_avx() {$/;"	f
is_chunked_transfer_encoding	src/httplib.h	/^inline bool is_chunked_transfer_encoding(const Headers &headers) {$/;"	f	namespace:httplib::detail
is_connection_error	src/httplib.h	/^inline bool is_connection_error() {$/;"	f	namespace:httplib::detail
is_dir	src/httplib.h	/^inline bool is_dir(const std::string &path) {$/;"	f	namespace:httplib::detail
is_ema_initialized	src/network.c	/^int is_ema_initialized(network net)$/;"	f
is_file	src/httplib.h	/^inline bool is_file(const std::string &path) {$/;"	f	namespace:httplib::detail
is_fma_avx2	src/gemm.c	/^int is_fma_avx2() {$/;"	f
is_hex	src/httplib.h	/^inline bool is_hex(char c, int &v) {$/;"	f	namespace:httplib::detail
is_live_stream	src/utils.c	/^bool is_live_stream(const char * path){$/;"	f
is_nan_or_inf	src/blas_kernels.cu	/^extern "C" int is_nan_or_inf(float *input, size_t size)$/;"	f
is_nan_or_inf_kernel	src/blas_kernels.cu	/^__global__ void is_nan_or_inf_kernel(float *input, size_t size, int *pinned_return)$/;"	f
is_network	src/parser.c	/^int is_network(section *s)$/;"	f
is_object_present	src/yolo_console_dll.cpp	/^    bool is_object_present() {$/;"	f	class:send_one_replaceable_object_t
is_running	src/httplib.h	/^inline bool Server::is_running() const { return is_running_; }$/;"	f	class:httplib::Server
is_running_	src/httplib.h	/^  std::atomic<bool> is_running_;$/;"	m	class:httplib::Server
is_ssl	src/httplib.h	/^inline bool Client::is_ssl() const { return false; }$/;"	f	class:httplib::Client
is_ssl	src/httplib.h	/^inline bool SSLClient::is_ssl() const { return true; }$/;"	f	class:httplib::SSLClient
is_valid	src/httplib.h	/^  bool is_valid() const { return is_valid_; }$/;"	f	class:httplib::detail::decompressor
is_valid	src/httplib.h	/^inline bool Client::is_valid() const { return true; }$/;"	f	class:httplib::Client
is_valid	src/httplib.h	/^inline bool SSLClient::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLClient
is_valid	src/httplib.h	/^inline bool SSLServer::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLServer
is_valid	src/httplib.h	/^inline bool Server::is_valid() const { return true; }$/;"	f	class:httplib::Server
is_valid_	src/httplib.h	/^  bool is_valid_;$/;"	m	class:httplib::detail::decompressor
is_valid_path	src/httplib.h	/^inline bool is_valid_path(const std::string &path) {$/;"	f	namespace:httplib::detail
isatty	src/darkunistd.h	35;"	d
j	include/darknet.h	/^    int i, j;$/;"	m	struct:contrastive_params
j	src/network_kernels.cu	/^    int j;$/;"	m	struct:__anon39	file:
jfif	3rdparty/stb/include/stb_image.h	/^   int            jfif;$/;"	m	struct:__anon9
jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:layer
jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:load_args
jobs_	src/httplib.h	/^  std::list<std::function<void()>> jobs_;$/;"	m	class:httplib::ThreadPool
joint	include/darknet.h	/^    int joint;$/;"	m	struct:layer
js_ptr	src/http_stream.cpp	/^static std::unique_ptr<JSON_sender> js_ptr;$/;"	v	file:
json_mjpeg_streams.sh	json_mjpeg_streams.sh	1;"	F
kalman_vec	include/yolo_v2_class.hpp	/^    std::vector<one_kalman_t> kalman_vec;$/;"	m	class:track_kalman_t
kappa	include/darknet.h	/^    float kappa;$/;"	m	struct:layer
keep_alive_max_count_	src/httplib.h	/^  size_t keep_alive_max_count_;$/;"	m	class:httplib::Client
keep_alive_max_count_	src/httplib.h	/^  size_t keep_alive_max_count_;$/;"	m	class:httplib::Server
keep_delta_gpu	include/darknet.h	/^    int keep_delta_gpu;$/;"	m	struct:layer
key	src/option_list.h	/^    char *key;$/;"	m	struct:__anon31
kf	include/yolo_v2_class.hpp	/^        cv::KalmanFilter kf;$/;"	m	struct:track_kalman_t::one_kalman_t
kitti2yolo	scripts/kitti2yolo.py	/^def kitti2yolo(kitti_label, img_height, img_width):$/;"	f
kitti2yolo.py	scripts/kitti2yolo.py	1;"	F
kitti2yolotype_dict	scripts/kitti2yolo.py	/^kitti2yolotype_dict = {'Car': '0',$/;"	v
kmeans	build/darknet/x64/gen_anchors.py	/^def kmeans(X,centroids,eps,anchor_file):$/;"	f
kmeans	scripts/gen_anchors.py	/^def kmeans(X,centroids,eps,anchor_file):$/;"	f
kmeans_expectation	scripts/kmeansiou.c	/^int kmeans_expectation(matrix data, int *assignments, matrix centers)$/;"	f
kmeans_expectation	src/matrix.c	/^int kmeans_expectation(matrix data, int *assignments, matrix centers)$/;"	f
kmeans_maximization	scripts/kmeansiou.c	/^void kmeans_maximization(matrix data, int *assignments, matrix centers)$/;"	f
kmeans_maximization	src/matrix.c	/^void kmeans_maximization(matrix data, int *assignments, matrix centers)$/;"	f
kmeansiou.c	scripts/kmeansiou.c	1;"	F
kvp	src/option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon31
l	src/yolo_layer.c	/^    layer l;$/;"	m	struct:train_yolo_args	file:
l1_cpu	src/blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu	src/blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_gpu	src/blas_kernels.cu	/^extern "C" void l2_gpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_kernel	src/blas_kernels.cu	/^__global__ void l2_kernel(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
label_classifier	src/classifier.c	/^void label_classifier(char *datacfg, char *filename, char *weightfile)$/;"	f
label_smooth_eps	include/darknet.h	/^    float label_smooth_eps;$/;"	m	struct:layer
label_smooth_eps	include/darknet.h	/^    float label_smooth_eps;$/;"	m	struct:load_args
label_smooth_eps	include/darknet.h	/^    float label_smooth_eps;$/;"	m	struct:network
labels	include/darknet.h	/^    char **labels;$/;"	m	struct:load_args
labels	include/darknet.h	/^    int *labels;$/;"	m	struct:layer
last_prev_cell_gpu	include/darknet.h	/^    float *last_prev_cell_gpu;$/;"	m	struct:layer
last_prev_state_gpu	include/darknet.h	/^    float *last_prev_state_gpu;$/;"	m	struct:layer
last_showed_frames_ago	include/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
last_time	include/yolo_v2_class.hpp	/^        std::chrono::steady_clock::time_point last_time;$/;"	m	struct:track_kalman_t::tst_t
layer	include/darknet.h	/^struct layer {$/;"	s
layer	include/darknet.h	/^typedef struct layer layer;$/;"	t	typeref:struct:layer
layer.c	src/layer.c	1;"	F
layer.h	src/layer.h	1;"	F
layer::B1	include/darknet.h	/^    float B1;$/;"	m	struct:layer
layer::B2	include/darknet.h	/^    float B2;$/;"	m	struct:layer
layer::a_avg_gpu	include/darknet.h	/^    float *a_avg_gpu;$/;"	m	struct:layer
layer::absolute	include/darknet.h	/^    int absolute;$/;"	m	struct:layer
layer::activation	include/darknet.h	/^    ACTIVATION activation;$/;"	m	struct:layer
layer::activation_input	include/darknet.h	/^    float * activation_input;$/;"	m	struct:layer
layer::activation_input_gpu	include/darknet.h	/^    float * activation_input_gpu;$/;"	m	struct:layer
layer::adam	include/darknet.h	/^    int adam;$/;"	m	struct:layer
layer::align_bit_weights	include/darknet.h	/^    char *align_bit_weights;$/;"	m	struct:layer
layer::align_bit_weights_gpu	include/darknet.h	/^    char *align_bit_weights_gpu;$/;"	m	struct:layer
layer::align_bit_weights_size	include/darknet.h	/^    int align_bit_weights_size;$/;"	m	struct:layer
layer::align_workspace_gpu	include/darknet.h	/^    float *align_workspace_gpu;$/;"	m	struct:layer
layer::align_workspace_size	include/darknet.h	/^    int align_workspace_size;$/;"	m	struct:layer
layer::alpha	include/darknet.h	/^    float alpha;$/;"	m	struct:layer
layer::angle	include/darknet.h	/^    float angle;$/;"	m	struct:layer
layer::antialiasing	include/darknet.h	/^    int antialiasing;$/;"	m	struct:layer
layer::assisted_excitation	include/darknet.h	/^    int assisted_excitation;$/;"	m	struct:layer
layer::avgpool	include/darknet.h	/^    int avgpool;$/;"	m	struct:layer
layer::background	include/darknet.h	/^    int background;$/;"	m	struct:layer
layer::backward	include/darknet.h	/^    void(*backward)  (struct layer, struct network_state);$/;"	m	struct:layer
layer::backward_gpu	include/darknet.h	/^    void(*backward_gpu)  (struct layer, struct network_state);$/;"	m	struct:layer
layer::batch	include/darknet.h	/^    int batch;$/;"	m	struct:layer
layer::batch_normalize	include/darknet.h	/^    int batch_normalize;$/;"	m	struct:layer
layer::bd_algo	include/darknet.h	/^    UNUSED_ENUM_TYPE bd_algo, bd_algo16;$/;"	m	struct:layer
layer::bd_algo	include/darknet.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo, bd_algo16;$/;"	m	struct:layer
layer::bd_algo16	include/darknet.h	/^    UNUSED_ENUM_TYPE bd_algo, bd_algo16;$/;"	m	struct:layer
layer::bd_algo16	include/darknet.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo, bd_algo16;$/;"	m	struct:layer
layer::beta	include/darknet.h	/^    float beta;$/;"	m	struct:layer
layer::beta_nms	include/darknet.h	/^    float beta_nms;$/;"	m	struct:layer
layer::bf_algo	include/darknet.h	/^    UNUSED_ENUM_TYPE bf_algo, bf_algo16;$/;"	m	struct:layer
layer::bf_algo	include/darknet.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo, bf_algo16;$/;"	m	struct:layer
layer::bf_algo16	include/darknet.h	/^    UNUSED_ENUM_TYPE bf_algo, bf_algo16;$/;"	m	struct:layer
layer::bf_algo16	include/darknet.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo, bf_algo16;$/;"	m	struct:layer
layer::bflops	include/darknet.h	/^    float bflops;$/;"	m	struct:layer
layer::bias_change_gpu	include/darknet.h	/^    float * bias_change_gpu;$/;"	m	struct:layer
layer::bias_m	include/darknet.h	/^    float * bias_m;$/;"	m	struct:layer
layer::bias_m_gpu	include/darknet.h	/^    float *bias_m_gpu;$/;"	m	struct:layer
layer::bias_match	include/darknet.h	/^    int bias_match;$/;"	m	struct:layer
layer::bias_updates	include/darknet.h	/^    float *bias_updates;$/;"	m	struct:layer
layer::bias_updates_gpu	include/darknet.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer
layer::bias_v	include/darknet.h	/^    float * bias_v;$/;"	m	struct:layer
layer::bias_v_gpu	include/darknet.h	/^    float *bias_v_gpu;$/;"	m	struct:layer
layer::biases	include/darknet.h	/^    float *biases;$/;"	m	struct:layer
layer::biases_ema	include/darknet.h	/^    float *biases_ema;$/;"	m	struct:layer
layer::biases_gpu	include/darknet.h	/^    float * biases_gpu;$/;"	m	struct:layer
layer::bin_conv_shortcut_in_gpu	include/darknet.h	/^    float *bin_conv_shortcut_in_gpu;$/;"	m	struct:layer
layer::bin_conv_shortcut_out_gpu	include/darknet.h	/^    float *bin_conv_shortcut_out_gpu;$/;"	m	struct:layer
layer::bin_re_packed_input	include/darknet.h	/^    uint32_t *bin_re_packed_input;$/;"	m	struct:layer
layer::binary	include/darknet.h	/^    int binary;$/;"	m	struct:layer
layer::binary_input	include/darknet.h	/^    float *binary_input;$/;"	m	struct:layer
layer::binary_input_gpu	include/darknet.h	/^    float *binary_input_gpu;$/;"	m	struct:layer
layer::binary_weights	include/darknet.h	/^    float *binary_weights;$/;"	m	struct:layer
layer::binary_weights_gpu	include/darknet.h	/^    float *binary_weights_gpu;$/;"	m	struct:layer
layer::bit_align	include/darknet.h	/^    int bit_align;$/;"	m	struct:layer
layer::bottelneck_delta_gpu	include/darknet.h	/^    float *bottelneck_delta_gpu;$/;"	m	struct:layer
layer::bottelneck_hi_gpu	include/darknet.h	/^    float *bottelneck_hi_gpu;$/;"	m	struct:layer
layer::bottleneck	include/darknet.h	/^    int bottleneck;$/;"	m	struct:layer
layer::burnin_update	include/darknet.h	/^    int burnin_update;$/;"	m	struct:layer
layer::c	include/darknet.h	/^    int h, w, c;$/;"	m	struct:layer
layer::c_cpu	include/darknet.h	/^    float *c_cpu;$/;"	m	struct:layer
layer::c_gpu	include/darknet.h	/^    float *c_gpu;$/;"	m	struct:layer
layer::cell_cpu	include/darknet.h	/^    float *cell_cpu;$/;"	m	struct:layer
layer::cell_gpu	include/darknet.h	/^    float *cell_gpu;$/;"	m	struct:layer
layer::class_ids	include/darknet.h	/^    int *class_ids;$/;"	m	struct:layer
layer::class_scale	include/darknet.h	/^    float class_scale;$/;"	m	struct:layer
layer::classes	include/darknet.h	/^    int classes;$/;"	m	struct:layer
layer::classes_multipliers	include/darknet.h	/^    float *classes_multipliers;$/;"	m	struct:layer
layer::classfix	include/darknet.h	/^    int classfix;$/;"	m	struct:layer
layer::clip	include/darknet.h	/^    float clip;$/;"	m	struct:layer
layer::cls_normalizer	include/darknet.h	/^    float cls_normalizer;$/;"	m	struct:layer
layer::col_image	include/darknet.h	/^    float *col_image;$/;"	m	struct:layer
layer::col_image_gpu	include/darknet.h	/^    float * col_image_gpu;$/;"	m	struct:layer
layer::combine_cpu	include/darknet.h	/^    float * combine_cpu;$/;"	m	struct:layer
layer::combine_delta_cpu	include/darknet.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer
layer::combine_delta_gpu	include/darknet.h	/^    float * combine_delta_gpu;$/;"	m	struct:layer
layer::combine_gpu	include/darknet.h	/^    float * combine_gpu;$/;"	m	struct:layer
layer::concat	include/darknet.h	/^    float *concat;$/;"	m	struct:layer
layer::concat_delta	include/darknet.h	/^    float *concat_delta;$/;"	m	struct:layer
layer::concat_delta_gpu	include/darknet.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer
layer::concat_gpu	include/darknet.h	/^    float * concat_gpu;$/;"	m	struct:layer
layer::contrast_p_gpu	include/darknet.h	/^    contrastive_params *contrast_p_gpu;$/;"	m	struct:layer
layer::contrastive_neg_max	include/darknet.h	/^    int contrastive_neg_max;$/;"	m	struct:layer
layer::convDesc	include/darknet.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer
layer::convDesc	include/darknet.h	/^    void* convDesc;$/;"	m	struct:layer
layer::coord_scale	include/darknet.h	/^    float coord_scale;$/;"	m	struct:layer
layer::coordconv	include/darknet.h	/^    int coordconv;$/;"	m	struct:layer
layer::coords	include/darknet.h	/^    int coords;$/;"	m	struct:layer
layer::cos_sim	include/darknet.h	/^    float *cos_sim;$/;"	m	struct:layer
layer::cos_sim_gpu	include/darknet.h	/^    float * cos_sim_gpu;$/;"	m	struct:layer
layer::cost	include/darknet.h	/^    float * cost;$/;"	m	struct:layer
layer::cost_type	include/darknet.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer
layer::counts	include/darknet.h	/^    int   * counts;$/;"	m	struct:layer
layer::cweights	include/darknet.h	/^    char  * cweights;$/;"	m	struct:layer
layer::dc_cpu	include/darknet.h	/^    float *dc_cpu;$/;"	m	struct:layer
layer::dc_gpu	include/darknet.h	/^    float *dc_gpu;$/;"	m	struct:layer
layer::ddstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
layer::ddstTensorDesc	include/darknet.h	/^    void* dsrcTensorDesc, *ddstTensorDesc;$/;"	m	struct:layer
layer::ddstTensorDesc16	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc16, ddstTensorDesc16;$/;"	m	struct:layer
layer::ddstTensorDesc16	include/darknet.h	/^    void* dsrcTensorDesc16, *ddstTensorDesc16;$/;"	m	struct:layer
layer::deform	include/darknet.h	/^    int deform;$/;"	m	struct:layer
layer::delta	include/darknet.h	/^    float * delta;$/;"	m	struct:layer
layer::delta_gpu	include/darknet.h	/^    float * delta_gpu;$/;"	m	struct:layer
layer::delta_normalizer	include/darknet.h	/^    float delta_normalizer;$/;"	m	struct:layer
layer::delta_pinned	include/darknet.h	/^    int delta_pinned;$/;"	m	struct:layer
layer::detection	include/darknet.h	/^    int detection;$/;"	m	struct:layer
layer::dets_for_show	include/darknet.h	/^    int dets_for_show;$/;"	m	struct:layer
layer::dets_for_track	include/darknet.h	/^    int dets_for_track;$/;"	m	struct:layer
layer::dh_cpu	include/darknet.h	/^    float *dh_cpu;$/;"	m	struct:layer
layer::dh_gpu	include/darknet.h	/^    float *dh_gpu;$/;"	m	struct:layer
layer::dilation	include/darknet.h	/^    int dilation;$/;"	m	struct:layer
layer::does_cost	include/darknet.h	/^    int does_cost;$/;"	m	struct:layer
layer::dont_update	include/darknet.h	/^    int dont_update;$/;"	m	struct:layer
layer::dontload	include/darknet.h	/^    int dontload;$/;"	m	struct:layer
layer::dontloadscales	include/darknet.h	/^    int dontloadscales;$/;"	m	struct:layer
layer::dontsave	include/darknet.h	/^    int dontsave;$/;"	m	struct:layer
layer::dot	include/darknet.h	/^    float dot;$/;"	m	struct:layer
layer::drop_blocks_scale	include/darknet.h	/^    float * drop_blocks_scale;$/;"	m	struct:layer
layer::drop_blocks_scale_gpu	include/darknet.h	/^    float * drop_blocks_scale_gpu;$/;"	m	struct:layer
layer::dropblock	include/darknet.h	/^    int dropblock;$/;"	m	struct:layer
layer::dropblock_size_abs	include/darknet.h	/^    int dropblock_size_abs;$/;"	m	struct:layer
layer::dropblock_size_rel	include/darknet.h	/^    float dropblock_size_rel;$/;"	m	struct:layer
layer::dsrcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
layer::dsrcTensorDesc	include/darknet.h	/^    void* dsrcTensorDesc, *ddstTensorDesc;$/;"	m	struct:layer
layer::dsrcTensorDesc16	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc16, ddstTensorDesc16;$/;"	m	struct:layer
layer::dsrcTensorDesc16	include/darknet.h	/^    void* dsrcTensorDesc16, *ddstTensorDesc16;$/;"	m	struct:layer
layer::dstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
layer::dstTensorDesc	include/darknet.h	/^    void* srcTensorDesc, *dstTensorDesc;$/;"	m	struct:layer
layer::dstTensorDesc16	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc16, dstTensorDesc16;$/;"	m	struct:layer
layer::dstTensorDesc16	include/darknet.h	/^    void* srcTensorDesc16, *dstTensorDesc16;$/;"	m	struct:layer
layer::dweightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t dweightDesc, dweightDesc16;$/;"	m	struct:layer
layer::dweightDesc	include/darknet.h	/^    void* dweightDesc, *dweightDesc16;$/;"	m	struct:layer
layer::dweightDesc16	include/darknet.h	/^    cudnnFilterDescriptor_t dweightDesc, dweightDesc16;$/;"	m	struct:layer
layer::dweightDesc16	include/darknet.h	/^    void* dweightDesc, *dweightDesc16;$/;"	m	struct:layer
layer::dynamic_minibatch	include/darknet.h	/^    int dynamic_minibatch;$/;"	m	struct:layer
layer::embedding_layer_id	include/darknet.h	/^    int embedding_layer_id;$/;"	m	struct:layer
layer::embedding_output	include/darknet.h	/^    float *embedding_output;$/;"	m	struct:layer
layer::embedding_size	include/darknet.h	/^    int embedding_size;$/;"	m	struct:layer
layer::eps	include/darknet.h	/^    float eps;$/;"	m	struct:layer
layer::exp_cos_sim	include/darknet.h	/^    float *exp_cos_sim;$/;"	m	struct:layer
layer::exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:layer
layer::extra	include/darknet.h	/^    int extra;$/;"	m	struct:layer
layer::f_cpu	include/darknet.h	/^    float *f_cpu;$/;"	m	struct:layer
layer::f_gpu	include/darknet.h	/^    float *f_gpu;$/;"	m	struct:layer
layer::flatten	include/darknet.h	/^    int flatten;$/;"	m	struct:layer
layer::flip	include/darknet.h	/^    int flip;$/;"	m	struct:layer
layer::flipped	include/darknet.h	/^    int flipped;$/;"	m	struct:layer
layer::focal_loss	include/darknet.h	/^    int focal_loss;$/;"	m	struct:layer
layer::focus	include/darknet.h	/^    float focus;$/;"	m	struct:layer
layer::forced	include/darknet.h	/^    int forced;$/;"	m	struct:layer
layer::forgot_delta	include/darknet.h	/^    float * forgot_delta;$/;"	m	struct:layer
layer::forgot_delta_gpu	include/darknet.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer
layer::forgot_state	include/darknet.h	/^    float * forgot_state;$/;"	m	struct:layer
layer::forgot_state_gpu	include/darknet.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer
layer::forward	include/darknet.h	/^    void(*forward)   (struct layer, struct network_state);$/;"	m	struct:layer
layer::forward_gpu	include/darknet.h	/^    void(*forward_gpu)   (struct layer, struct network_state);$/;"	m	struct:layer
layer::fw_algo	include/darknet.h	/^    UNUSED_ENUM_TYPE fw_algo, fw_algo16;$/;"	m	struct:layer
layer::fw_algo	include/darknet.h	/^    cudnnConvolutionFwdAlgo_t fw_algo, fw_algo16;$/;"	m	struct:layer
layer::fw_algo16	include/darknet.h	/^    UNUSED_ENUM_TYPE fw_algo, fw_algo16;$/;"	m	struct:layer
layer::fw_algo16	include/darknet.h	/^    cudnnConvolutionFwdAlgo_t fw_algo, fw_algo16;$/;"	m	struct:layer
layer::g_cpu	include/darknet.h	/^    float *g_cpu;$/;"	m	struct:layer
layer::g_gpu	include/darknet.h	/^    float *g_gpu;$/;"	m	struct:layer
layer::gate_delta_gpu	include/darknet.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer
layer::gate_gpu	include/darknet.h	/^    float * gate_gpu;$/;"	m	struct:layer
layer::grad_centr	include/darknet.h	/^    int grad_centr;$/;"	m	struct:layer
layer::group_id	include/darknet.h	/^    int group_id;$/;"	m	struct:layer
layer::groups	include/darknet.h	/^    int groups;$/;"	m	struct:layer
layer::gt_gpu	include/darknet.h	/^    float *gt_gpu;$/;"	m	struct:layer
layer::h	include/darknet.h	/^    int h, w, c;$/;"	m	struct:layer
layer::h_cpu	include/darknet.h	/^    float *h_cpu;$/;"	m	struct:layer
layer::h_gpu	include/darknet.h	/^    float *h_gpu;$/;"	m	struct:layer
layer::hh_cpu	include/darknet.h	/^    float *hh_cpu;$/;"	m	struct:layer
layer::hh_gpu	include/darknet.h	/^    float *hh_gpu;$/;"	m	struct:layer
layer::hidden	include/darknet.h	/^    int hidden;$/;"	m	struct:layer
layer::history_size	include/darknet.h	/^    int history_size;$/;"	m	struct:layer
layer::i_cpu	include/darknet.h	/^    float *i_cpu;$/;"	m	struct:layer
layer::i_gpu	include/darknet.h	/^    float *i_gpu;$/;"	m	struct:layer
layer::ignore_thresh	include/darknet.h	/^    float ignore_thresh;$/;"	m	struct:layer
layer::index	include/darknet.h	/^    int index;$/;"	m	struct:layer
layer::indexes	include/darknet.h	/^    int   * indexes;$/;"	m	struct:layer
layer::indexes_gpu	include/darknet.h	/^    int *indexes_gpu;$/;"	m	struct:layer
layer::input_antialiasing_gpu	include/darknet.h	/^    float * input_antialiasing_gpu;$/;"	m	struct:layer
layer::input_gate_layer	include/darknet.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::input_h_layer	include/darknet.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::input_layer	include/darknet.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::input_layers	include/darknet.h	/^    int   * input_layers;$/;"	m	struct:layer
layer::input_r_layer	include/darknet.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::input_save_layer	include/darknet.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::input_sizes	include/darknet.h	/^    int   * input_sizes;$/;"	m	struct:layer
layer::input_sizes_gpu	include/darknet.h	/^    int *input_sizes_gpu;$/;"	m	struct:layer
layer::input_state_layer	include/darknet.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::input_z_layer	include/darknet.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:layer
layer::iou_loss	include/darknet.h	/^    IOU_LOSS iou_loss;$/;"	m	struct:layer
layer::iou_normalizer	include/darknet.h	/^    float iou_normalizer;$/;"	m	struct:layer
layer::iou_thresh	include/darknet.h	/^    float iou_thresh;$/;"	m	struct:layer
layer::iou_thresh_kind	include/darknet.h	/^    IOU_LOSS iou_thresh_kind;$/;"	m	struct:layer
layer::jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:layer
layer::joint	include/darknet.h	/^    int joint;$/;"	m	struct:layer
layer::kappa	include/darknet.h	/^    float kappa;$/;"	m	struct:layer
layer::keep_delta_gpu	include/darknet.h	/^    int keep_delta_gpu;$/;"	m	struct:layer
layer::label_smooth_eps	include/darknet.h	/^    float label_smooth_eps;$/;"	m	struct:layer
layer::labels	include/darknet.h	/^    int *labels;$/;"	m	struct:layer
layer::last_prev_cell_gpu	include/darknet.h	/^    float *last_prev_cell_gpu;$/;"	m	struct:layer
layer::last_prev_state_gpu	include/darknet.h	/^    float *last_prev_state_gpu;$/;"	m	struct:layer
layer::layers_delta	include/darknet.h	/^    float **layers_delta;$/;"	m	struct:layer
layer::layers_delta_gpu	include/darknet.h	/^    float **layers_delta_gpu;$/;"	m	struct:layer
layer::layers_output	include/darknet.h	/^    float **layers_output;$/;"	m	struct:layer
layer::layers_output_gpu	include/darknet.h	/^    float **layers_output_gpu;$/;"	m	struct:layer
layer::lda_align	include/darknet.h	/^    int lda_align;$/;"	m	struct:layer
layer::learning_rate_scale	include/darknet.h	/^    float learning_rate_scale;$/;"	m	struct:layer
layer::log	include/darknet.h	/^    int log;$/;"	m	struct:layer
layer::loss	include/darknet.h	/^    float * loss;$/;"	m	struct:layer
layer::loss_gpu	include/darknet.h	/^    float * loss_gpu;$/;"	m	struct:layer
layer::lstm_activation	include/darknet.h	/^    ACTIVATION lstm_activation;$/;"	m	struct:layer
layer::m	include/darknet.h	/^    float * m;$/;"	m	struct:layer
layer::m_cbn_avg_gpu	include/darknet.h	/^    float * m_cbn_avg_gpu;$/;"	m	struct:layer
layer::m_gpu	include/darknet.h	/^    float *m_gpu;$/;"	m	struct:layer
layer::map	include/darknet.h	/^    int   * map;$/;"	m	struct:layer
layer::mask	include/darknet.h	/^    int *mask;$/;"	m	struct:layer
layer::mask_scale	include/darknet.h	/^    float mask_scale;$/;"	m	struct:layer
layer::max_boxes	include/darknet.h	/^    int max_boxes;$/;"	m	struct:layer
layer::max_delta	include/darknet.h	/^    float max_delta;$/;"	m	struct:layer
layer::maxpool_depth	include/darknet.h	/^    int maxpool_depth;$/;"	m	struct:layer
layer::maxpool_zero_nonmax	include/darknet.h	/^    int maxpool_zero_nonmax;$/;"	m	struct:layer
layer::mean	include/darknet.h	/^    float * mean;$/;"	m	struct:layer
layer::mean_alpha	include/darknet.h	/^    float mean_alpha;$/;"	m	struct:layer
layer::mean_arr	include/darknet.h	/^    float *mean_arr;$/;"	m	struct:layer
layer::mean_arr_gpu	include/darknet.h	/^    float *mean_arr_gpu;$/;"	m	struct:layer
layer::mean_delta	include/darknet.h	/^    float * mean_delta;$/;"	m	struct:layer
layer::mean_delta_gpu	include/darknet.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer
layer::mean_gpu	include/darknet.h	/^    float * mean_gpu;$/;"	m	struct:layer
layer::n	include/darknet.h	/^    int n;$/;"	m	struct:layer
layer::nbiases	include/darknet.h	/^    int nbiases;$/;"	m	struct:layer
layer::new_coords	include/darknet.h	/^    int new_coords;$/;"	m	struct:layer
layer::new_lda	include/darknet.h	/^    int new_lda;$/;"	m	struct:layer
layer::nms_kind	include/darknet.h	/^    NMS_KIND nms_kind;$/;"	m	struct:layer
layer::noadjust	include/darknet.h	/^    int noadjust;$/;"	m	struct:layer
layer::noloss	include/darknet.h	/^    int noloss;$/;"	m	struct:layer
layer::noobject_scale	include/darknet.h	/^    float noobject_scale;$/;"	m	struct:layer
layer::normDstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
layer::normDstTensorDesc	include/darknet.h	/^    void* normTensorDesc, *normDstTensorDesc, *normDstTensorDescF16;$/;"	m	struct:layer
layer::normDstTensorDescF16	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
layer::normDstTensorDescF16	include/darknet.h	/^    void* normTensorDesc, *normDstTensorDesc, *normDstTensorDescF16;$/;"	m	struct:layer
layer::normTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
layer::normTensorDesc	include/darknet.h	/^    void* normTensorDesc, *normDstTensorDesc, *normDstTensorDescF16;$/;"	m	struct:layer
layer::norms	include/darknet.h	/^    float * norms;$/;"	m	struct:layer
layer::norms_gpu	include/darknet.h	/^    float * norms_gpu;$/;"	m	struct:layer
layer::numload	include/darknet.h	/^    int numload;$/;"	m	struct:layer
layer::nweights	include/darknet.h	/^    int nweights;$/;"	m	struct:layer
layer::o_cpu	include/darknet.h	/^    float *o_cpu;$/;"	m	struct:layer
layer::o_gpu	include/darknet.h	/^    float *o_gpu;$/;"	m	struct:layer
layer::obj_normalizer	include/darknet.h	/^    float obj_normalizer;$/;"	m	struct:layer
layer::object_scale	include/darknet.h	/^    float object_scale;$/;"	m	struct:layer
layer::objectness	include/darknet.h	/^    int objectness;$/;"	m	struct:layer
layer::objectness_smooth	include/darknet.h	/^    int objectness_smooth;$/;"	m	struct:layer
layer::onlyforward	include/darknet.h	/^    int onlyforward;$/;"	m	struct:layer
layer::optimized_memory	include/darknet.h	/^    int optimized_memory;$/;"	m	struct:layer
layer::out_c	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
layer::out_channels	include/darknet.h	/^    int out_channels;$/;"	m	struct:layer
layer::out_h	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
layer::out_w	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
layer::output	include/darknet.h	/^    float * output;$/;"	m	struct:layer
layer::output_avg_gpu	include/darknet.h	/^    float * output_avg_gpu;$/;"	m	struct:layer
layer::output_gpu	include/darknet.h	/^    float * output_gpu;$/;"	m	struct:layer
layer::output_layer	include/darknet.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::output_pinned	include/darknet.h	/^    int output_pinned;$/;"	m	struct:layer
layer::outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:layer
layer::p_constrastive	include/darknet.h	/^    float *p_constrastive;$/;"	m	struct:layer
layer::pad	include/darknet.h	/^    int pad;$/;"	m	struct:layer
layer::peephole	include/darknet.h	/^    int peephole;$/;"	m	struct:layer
layer::poolingDesc	include/darknet.h	/^    cudnnPoolingDescriptor_t poolingDesc;$/;"	m	struct:layer
layer::poolingDesc	include/darknet.h	/^    void* poolingDesc;$/;"	m	struct:layer
layer::prev_cell_cpu	include/darknet.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer
layer::prev_cell_gpu	include/darknet.h	/^    float *prev_cell_gpu;$/;"	m	struct:layer
layer::prev_state	include/darknet.h	/^    float * prev_state;$/;"	m	struct:layer
layer::prev_state_cpu	include/darknet.h	/^    float * prev_state_cpu;$/;"	m	struct:layer
layer::prev_state_gpu	include/darknet.h	/^    float *prev_state_gpu;$/;"	m	struct:layer
layer::probability	include/darknet.h	/^    float probability;$/;"	m	struct:layer
layer::r_cpu	include/darknet.h	/^    float *r_cpu;$/;"	m	struct:layer
layer::r_gpu	include/darknet.h	/^    float *r_gpu;$/;"	m	struct:layer
layer::rand	include/darknet.h	/^    float * rand;$/;"	m	struct:layer
layer::rand_gpu	include/darknet.h	/^    float * rand_gpu;$/;"	m	struct:layer
layer::random	include/darknet.h	/^    float random;$/;"	m	struct:layer
layer::ratio	include/darknet.h	/^    float ratio;$/;"	m	struct:layer
layer::receptive_h	include/darknet.h	/^    int receptive_h;$/;"	m	struct:layer
layer::receptive_h_scale	include/darknet.h	/^    int receptive_h_scale;$/;"	m	struct:layer
layer::receptive_w	include/darknet.h	/^    int receptive_w;$/;"	m	struct:layer
layer::receptive_w_scale	include/darknet.h	/^    int receptive_w_scale;$/;"	m	struct:layer
layer::reorg	include/darknet.h	/^    int reorg;$/;"	m	struct:layer
layer::rescore	include/darknet.h	/^    int rescore;$/;"	m	struct:layer
layer::reset_layer	include/darknet.h	/^    struct layer *reset_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::resize	include/darknet.h	/^    float resize;$/;"	m	struct:layer
layer::reverse	include/darknet.h	/^    float reverse;$/;"	m	struct:layer
layer::rolling_mean	include/darknet.h	/^    float * rolling_mean;$/;"	m	struct:layer
layer::rolling_mean_gpu	include/darknet.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer
layer::rolling_variance	include/darknet.h	/^    float * rolling_variance;$/;"	m	struct:layer
layer::rolling_variance_gpu	include/darknet.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer
layer::rotate	include/darknet.h	/^    int rotate;$/;"	m	struct:layer
layer::saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:layer
layer::save_delta_gpu	include/darknet.h	/^    float * save_delta_gpu;$/;"	m	struct:layer
layer::save_gpu	include/darknet.h	/^    float * save_gpu;$/;"	m	struct:layer
layer::scale	include/darknet.h	/^    float scale;$/;"	m	struct:layer
layer::scale_change_gpu	include/darknet.h	/^    float * scale_change_gpu;$/;"	m	struct:layer
layer::scale_m	include/darknet.h	/^    float * scale_m;$/;"	m	struct:layer
layer::scale_m_gpu	include/darknet.h	/^    float *scale_m_gpu;$/;"	m	struct:layer
layer::scale_updates	include/darknet.h	/^    float *scale_updates;$/;"	m	struct:layer
layer::scale_updates_gpu	include/darknet.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer
layer::scale_v	include/darknet.h	/^    float * scale_v;$/;"	m	struct:layer
layer::scale_v_gpu	include/darknet.h	/^    float *scale_v_gpu;$/;"	m	struct:layer
layer::scale_wh	include/darknet.h	/^    int scale_wh;$/;"	m	struct:layer
layer::scale_x_y	include/darknet.h	/^    float scale_x_y;$/;"	m	struct:layer
layer::scales	include/darknet.h	/^    float *scales;$/;"	m	struct:layer
layer::scales_ema	include/darknet.h	/^    float *scales_ema;$/;"	m	struct:layer
layer::scales_gpu	include/darknet.h	/^    float * scales_gpu;$/;"	m	struct:layer
layer::self_layer	include/darknet.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::share_layer	include/darknet.h	/^    layer *share_layer;$/;"	m	struct:layer
layer::shift	include/darknet.h	/^    float shift;$/;"	m	struct:layer
layer::shortcut	include/darknet.h	/^    int shortcut;$/;"	m	struct:layer
layer::show_details	include/darknet.h	/^    int show_details;$/;"	m	struct:layer
layer::side	include/darknet.h	/^    int side;$/;"	m	struct:layer
layer::sim_thresh	include/darknet.h	/^    float sim_thresh;$/;"	m	struct:layer
layer::size	include/darknet.h	/^    int size;$/;"	m	struct:layer
layer::smooth	include/darknet.h	/^    float smooth;$/;"	m	struct:layer
layer::softmax	include/darknet.h	/^    int softmax;$/;"	m	struct:layer
layer::softmax_tree	include/darknet.h	/^    tree *softmax_tree;$/;"	m	struct:layer
layer::spatial	include/darknet.h	/^    int spatial;$/;"	m	struct:layer
layer::spatial_mean	include/darknet.h	/^    float * spatial_mean;$/;"	m	struct:layer
layer::sqrt	include/darknet.h	/^    int sqrt;$/;"	m	struct:layer
layer::squared	include/darknet.h	/^    float * squared;$/;"	m	struct:layer
layer::squared_gpu	include/darknet.h	/^    float * squared_gpu;$/;"	m	struct:layer
layer::srcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
layer::srcTensorDesc	include/darknet.h	/^    void* srcTensorDesc, *dstTensorDesc;$/;"	m	struct:layer
layer::srcTensorDesc16	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc16, dstTensorDesc16;$/;"	m	struct:layer
layer::srcTensorDesc16	include/darknet.h	/^    void* srcTensorDesc16, *dstTensorDesc16;$/;"	m	struct:layer
layer::state	include/darknet.h	/^    float * state;$/;"	m	struct:layer
layer::state_constrain	include/darknet.h	/^    int state_constrain;$/;"	m	struct:layer
layer::state_delta	include/darknet.h	/^    float * state_delta;$/;"	m	struct:layer
layer::state_delta_gpu	include/darknet.h	/^    float * state_delta_gpu;$/;"	m	struct:layer
layer::state_gate_layer	include/darknet.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::state_gpu	include/darknet.h	/^    float * state_gpu;$/;"	m	struct:layer
layer::state_h_layer	include/darknet.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::state_layer	include/darknet.h	/^    struct layer *state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::state_r_layer	include/darknet.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::state_save_layer	include/darknet.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::state_state_layer	include/darknet.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::state_z_layer	include/darknet.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::steps	include/darknet.h	/^    int steps;$/;"	m	struct:layer
layer::stopbackward	include/darknet.h	/^    int stopbackward;$/;"	m	struct:layer
layer::stored_c_cpu	include/darknet.h	/^    float *stored_c_cpu;$/;"	m	struct:layer
layer::stored_c_gpu	include/darknet.h	/^    float *stored_c_gpu;$/;"	m	struct:layer
layer::stored_h_cpu	include/darknet.h	/^    float *stored_h_cpu;$/;"	m	struct:layer
layer::stored_h_gpu	include/darknet.h	/^    float *stored_h_gpu;$/;"	m	struct:layer
layer::stream	include/darknet.h	/^    int stream;$/;"	m	struct:layer
layer::stretch	include/darknet.h	/^    int stretch;$/;"	m	struct:layer
layer::stretch_sway	include/darknet.h	/^    int stretch_sway;$/;"	m	struct:layer
layer::stride	include/darknet.h	/^    int stride;$/;"	m	struct:layer
layer::stride_x	include/darknet.h	/^    int stride_x;$/;"	m	struct:layer
layer::stride_y	include/darknet.h	/^    int stride_y;$/;"	m	struct:layer
layer::sums	include/darknet.h	/^    float ** sums;$/;"	m	struct:layer
layer::sway	include/darknet.h	/^    int sway;$/;"	m	struct:layer
layer::t	include/darknet.h	/^    int t;$/;"	m	struct:layer
layer::t_bit_input	include/darknet.h	/^    char *t_bit_input;$/;"	m	struct:layer
layer::tanh	include/darknet.h	/^    int tanh;$/;"	m	struct:layer
layer::temp2_cpu	include/darknet.h	/^    float *temp2_cpu;$/;"	m	struct:layer
layer::temp2_gpu	include/darknet.h	/^    float *temp2_gpu;$/;"	m	struct:layer
layer::temp3_cpu	include/darknet.h	/^    float *temp3_cpu;$/;"	m	struct:layer
layer::temp3_gpu	include/darknet.h	/^    float *temp3_gpu;$/;"	m	struct:layer
layer::temp_cpu	include/darknet.h	/^    float *temp_cpu;$/;"	m	struct:layer
layer::temp_gpu	include/darknet.h	/^    float *temp_gpu;$/;"	m	struct:layer
layer::temperature	include/darknet.h	/^    float temperature;$/;"	m	struct:layer
layer::thresh	include/darknet.h	/^    float thresh;$/;"	m	struct:layer
layer::time_normalizer	include/darknet.h	/^    float time_normalizer;$/;"	m	struct:layer
layer::total	include/darknet.h	/^    int total;$/;"	m	struct:layer
layer::track_ciou_norm	include/darknet.h	/^    float track_ciou_norm;$/;"	m	struct:layer
layer::track_history_size	include/darknet.h	/^    int track_history_size;$/;"	m	struct:layer
layer::train	include/darknet.h	/^    int train;$/;"	m	struct:layer
layer::train_only_bn	include/darknet.h	/^    int train_only_bn;$/;"	m	struct:layer
layer::transposed_align_workspace_gpu	include/darknet.h	/^    float *transposed_align_workspace_gpu;$/;"	m	struct:layer
layer::truth	include/darknet.h	/^    int truth;$/;"	m	struct:layer
layer::truth_size	include/darknet.h	/^    int truth_size;$/;"	m	struct:layer
layer::truth_thresh	include/darknet.h	/^    float truth_thresh;$/;"	m	struct:layer
layer::truths	include/darknet.h	/^    int truths;$/;"	m	struct:layer
layer::type	include/darknet.h	/^    LAYER_TYPE type;$/;"	m	struct:layer
layer::uc_normalizer	include/darknet.h	/^    float uc_normalizer;$/;"	m	struct:layer
layer::uf	include/darknet.h	/^    struct layer *uf;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::ug	include/darknet.h	/^    struct layer *ug;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::uh	include/darknet.h	/^    struct layer *uh;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::ui	include/darknet.h	/^    struct layer *ui;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::uo	include/darknet.h	/^    struct layer *uo;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::update	include/darknet.h	/^    void(*update)    (struct layer, int, float, float, float);$/;"	m	struct:layer
layer::update_gpu	include/darknet.h	/^    void(*update_gpu)    (struct layer, int, float, float, float, float);$/;"	m	struct:layer
layer::update_layer	include/darknet.h	/^    struct layer *update_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::ur	include/darknet.h	/^    struct layer *ur;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::use_bin_output	include/darknet.h	/^    int use_bin_output;$/;"	m	struct:layer
layer::uz	include/darknet.h	/^    struct layer *uz;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::v	include/darknet.h	/^    float * v;$/;"	m	struct:layer
layer::v_cbn_avg_gpu	include/darknet.h	/^    float * v_cbn_avg_gpu;$/;"	m	struct:layer
layer::v_gpu	include/darknet.h	/^    float *v_gpu;$/;"	m	struct:layer
layer::variance	include/darknet.h	/^    float * variance;$/;"	m	struct:layer
layer::variance_delta	include/darknet.h	/^    float * variance_delta;$/;"	m	struct:layer
layer::variance_delta_gpu	include/darknet.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer
layer::variance_gpu	include/darknet.h	/^    float * variance_gpu;$/;"	m	struct:layer
layer::vf	include/darknet.h	/^    struct layer *vf;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::vi	include/darknet.h	/^    struct layer *vi;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::vo	include/darknet.h	/^    struct layer *vo;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::w	include/darknet.h	/^    int h, w, c;$/;"	m	struct:layer
layer::wait_stream_id	include/darknet.h	/^    int wait_stream_id;$/;"	m	struct:layer
layer::weightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t weightDesc, weightDesc16;$/;"	m	struct:layer
layer::weightDesc	include/darknet.h	/^    void* weightDesc, *weightDesc16;$/;"	m	struct:layer
layer::weightDesc16	include/darknet.h	/^    cudnnFilterDescriptor_t weightDesc, weightDesc16;$/;"	m	struct:layer
layer::weightDesc16	include/darknet.h	/^    void* weightDesc, *weightDesc16;$/;"	m	struct:layer
layer::weight_change_gpu	include/darknet.h	/^    float * weight_change_gpu;$/;"	m	struct:layer
layer::weight_deform_gpu	include/darknet.h	/^    float * weight_deform_gpu;$/;"	m	struct:layer
layer::weight_updates	include/darknet.h	/^    float *weight_updates;$/;"	m	struct:layer
layer::weight_updates_gpu	include/darknet.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer
layer::weight_updates_gpu16	include/darknet.h	/^    float * weight_updates_gpu16;$/;"	m	struct:layer
layer::weights	include/darknet.h	/^    float *weights;$/;"	m	struct:layer
layer::weights_ema	include/darknet.h	/^    float *weights_ema;$/;"	m	struct:layer
layer::weights_gpu	include/darknet.h	/^    float * weights_gpu;$/;"	m	struct:layer
layer::weights_gpu16	include/darknet.h	/^    float * weights_gpu16;$/;"	m	struct:layer
layer::weights_normalization	include/darknet.h	/^    WEIGHTS_NORMALIZATION_T weights_normalization;$/;"	m	struct:layer
layer::weights_type	include/darknet.h	/^    WEIGHTS_TYPE_T weights_type;$/;"	m	struct:layer
layer::wf	include/darknet.h	/^    struct layer *wf;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::wg	include/darknet.h	/^    struct layer *wg;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::wh	include/darknet.h	/^    struct layer *wh;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::wi	include/darknet.h	/^    struct layer *wi;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::wo	include/darknet.h	/^    struct layer *wo;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::workspace_size	include/darknet.h	/^    size_t workspace_size;$/;"	m	struct:layer
layer::wr	include/darknet.h	/^    struct layer *wr;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::wz	include/darknet.h	/^    struct layer *wz;$/;"	m	struct:layer	typeref:struct:layer::layer
layer::x	include/darknet.h	/^    float * x;$/;"	m	struct:layer
layer::x_gpu	include/darknet.h	/^    float * x_gpu;$/;"	m	struct:layer
layer::x_norm	include/darknet.h	/^    float * x_norm;$/;"	m	struct:layer
layer::x_norm_gpu	include/darknet.h	/^    float * x_norm_gpu;$/;"	m	struct:layer
layer::xnor	include/darknet.h	/^    int xnor;$/;"	m	struct:layer
layer::yolo_point	include/darknet.h	/^    YOLO_POINT yolo_point;$/;"	m	struct:layer
layer::z_cpu	include/darknet.h	/^    float *z_cpu;$/;"	m	struct:layer
layer::z_gpu	include/darknet.h	/^    float *z_gpu;$/;"	m	struct:layer
layer_id	src/network_kernels.cu	/^    int layer_id, layer_type;$/;"	m	struct:time_benchmark_layers	file:
layer_type	src/network_kernels.cu	/^    int layer_id, layer_type;$/;"	m	struct:time_benchmark_layers	file:
layers	include/darknet.h	/^    layer *layers;$/;"	m	struct:network
layers_delta	include/darknet.h	/^    float **layers_delta;$/;"	m	struct:layer
layers_delta_gpu	include/darknet.h	/^    float **layers_delta_gpu;$/;"	m	struct:layer
layers_output	include/darknet.h	/^    float **layers_output;$/;"	m	struct:layer
layers_output_gpu	include/darknet.h	/^    float **layers_output_gpu;$/;"	m	struct:layer
lda_align	include/darknet.h	/^    int lda_align;$/;"	m	struct:layer
leaf	include/darknet.h	/^    int *leaf;$/;"	m	struct:tree
leaky_activate	src/activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1f*x;}$/;"	f
leaky_activate_kernel	src/activation_kernels.cu	/^__device__ float leaky_activate_kernel(float x){return (x>0) ? x : .1f*x;}$/;"	f
leaky_gradient	src/activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1f;}$/;"	f
leaky_gradient_kernel	src/activation_kernels.cu	/^__device__ float leaky_gradient_kernel(float x){return (x>0) ? 1 : .1f;}$/;"	f
learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:network
learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:update_args
learning_rate_max	include/darknet.h	/^    float learning_rate_max;$/;"	m	struct:network
learning_rate_min	include/darknet.h	/^    float learning_rate_min;$/;"	m	struct:network
learning_rate_policy	include/darknet.h	/^} learning_rate_policy;$/;"	t	typeref:enum:__anon54
learning_rate_scale	include/darknet.h	/^    float learning_rate_scale;$/;"	m	struct:layer
left	include/darknet.h	/^    float left, right, top, bot;$/;"	m	struct:boxabs
left	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:box_label
legal_go	src/go.c	/^int legal_go(float *b, char *ko, int p, int r, int c)$/;"	f
length	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon14
length	src/httplib.h	/^  size_t length = 0;$/;"	m	struct:httplib::MultipartFile
letter_box	include/darknet.h	/^    int letter_box;$/;"	m	struct:load_args
letter_box	include/darknet.h	/^    int letter_box;$/;"	m	struct:network
letter_box	src/demo.c	/^static int letter_box = 0;$/;"	v	file:
letterbox_image	build/darknet/x64/darknet.py	/^letterbox_image = lib.letterbox_image$/;"	v
letterbox_image	darknet.py	/^letterbox_image = lib.letterbox_image$/;"	v
letterbox_image	src/image.c	/^image letterbox_image(image im, int w, int h)$/;"	f
letterbox_image_into	src/image.c	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f
levels_image_kernel	src/crop_layer_kernels.cu	/^__global__ void levels_image_kernel(float *image, float *rand, int batch, int w, int h, int train, float saturation, float exposure, float translate, float scale, float shift)$/;"	f
lflags	3rdparty/stb/include/stb_image.h	/^   int lflags;$/;"	m	struct:__anon20
lhtan_activate	src/activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_activate_kernel	src/activation_kernels.cu	/^__device__ float lhtan_activate_kernel(float x)$/;"	f
lhtan_gradient	src/activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
lhtan_gradient_kernel	src/activation_kernels.cu	/^__device__ float lhtan_gradient_kernel(float x)$/;"	f
lib	build/darknet/x64/darknet.py	/^            lib = CDLL(winGPUdll, RTLD_GLOBAL)$/;"	v
lib	build/darknet/x64/darknet.py	/^            lib = CDLL(winNoGPUdll, RTLD_GLOBAL)$/;"	v
lib	build/darknet/x64/darknet.py	/^        lib = CDLL(winGPUdll, RTLD_GLOBAL)$/;"	v
lib	build/darknet/x64/darknet.py	/^    lib = CDLL(".\/libdarknet.so", RTLD_GLOBAL)$/;"	v
lib	darknet.py	/^    lib = CDLL("darknet.dll", RTLD_GLOBAL)$/;"	v
lib	darknet.py	/^    lib = CDLL(cwd + "\/libdarknet.so", RTLD_GLOBAL)$/;"	v
line0	3rdparty/stb/include/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon11
line1	3rdparty/stb/include/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon11
line_size	3rdparty/stb/include/stb_image.h	/^   int line_size;$/;"	m	struct:__anon20
linear_activate	src/activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_activate_kernel	src/activation_kernels.cu	/^__device__ float linear_activate_kernel(float x){return x;}$/;"	f
linear_gradient	src/activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
linear_gradient_kernel	src/activation_kernels.cu	/^__device__ float linear_gradient_kernel(float x){return 1;}$/;"	f
linebuf	3rdparty/stb/include/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon9::__anon10
lines	build/darknet/x64/reval_voc_py3.py	/^        lines = f.readlines()$/;"	v
lines	scripts/reval_voc.py	/^        lines = f.readlines()$/;"	v
lines	scripts/reval_voc_py3.py	/^        lines = f.readlines()$/;"	v
list	src/list.h	/^typedef struct list{$/;"	s
list	src/list.h	/^} list;$/;"	t	typeref:struct:list
list.c	src/list.c	1;"	F
list.h	src/list.h	1;"	F
list::back	src/list.h	/^    node *back;$/;"	m	struct:list
list::front	src/list.h	/^    node *front;$/;"	m	struct:list
list::size	src/list.h	/^    int size;$/;"	m	struct:list
list_file	build/darknet/x64/data/voc/voc_label.py	/^    list_file = open('%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_file	scripts/voc_label.py	/^    list_file = open('%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_file	scripts/voc_label_difficult.py	/^    list_file = open('difficult_%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_insert	src/list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	src/list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	src/list.c	/^void **list_to_array(list *l)$/;"	f
listen	src/httplib.h	/^inline bool Server::listen(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
listen_after_bind	src/httplib.h	/^inline bool Server::listen_after_bind() { return listen_internal(); }$/;"	f	class:httplib::Server
listen_internal	src/httplib.h	/^inline bool Server::listen_internal() {$/;"	f	class:httplib::Server
load_all_cifar10	src/data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	src/image.c	/^image **load_alphabet()$/;"	f
load_args	include/darknet.h	/^typedef struct load_args load_args;$/;"	t	typeref:struct:load_args
load_args	include/darknet.h	/^typedef struct load_args {$/;"	s
load_args	include/darknet.h	/^} load_args;$/;"	t	typeref:struct:load_args
load_args::angle	include/darknet.h	/^    float angle;$/;"	m	struct:load_args
load_args::aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:load_args
load_args::augment_speed	include/darknet.h	/^    int augment_speed;$/;"	m	struct:load_args
load_args::background	include/darknet.h	/^    int background;$/;"	m	struct:load_args
load_args::blur	include/darknet.h	/^    int blur;$/;"	m	struct:load_args
load_args::c	include/darknet.h	/^    int c; \/\/ color depth$/;"	m	struct:load_args
load_args::center	include/darknet.h	/^    int center;$/;"	m	struct:load_args
load_args::classes	include/darknet.h	/^    int classes;$/;"	m	struct:load_args
load_args::contrastive	include/darknet.h	/^    int contrastive;$/;"	m	struct:load_args
load_args::contrastive_color	include/darknet.h	/^    int contrastive_color;$/;"	m	struct:load_args
load_args::contrastive_jit_flip	include/darknet.h	/^    int contrastive_jit_flip;$/;"	m	struct:load_args
load_args::coords	include/darknet.h	/^    int coords;$/;"	m	struct:load_args
load_args::d	include/darknet.h	/^    data *d;$/;"	m	struct:load_args
load_args::dontuse_opencv	include/darknet.h	/^    int dontuse_opencv;$/;"	m	struct:load_args
load_args::exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:load_args
load_args::flip	include/darknet.h	/^    int flip;$/;"	m	struct:load_args
load_args::gaussian_noise	include/darknet.h	/^    int gaussian_noise;$/;"	m	struct:load_args
load_args::h	include/darknet.h	/^    int h;$/;"	m	struct:load_args
load_args::hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:load_args
load_args::hue	include/darknet.h	/^    float hue;$/;"	m	struct:load_args
load_args::im	include/darknet.h	/^    image *im;$/;"	m	struct:load_args
load_args::jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:load_args
load_args::label_smooth_eps	include/darknet.h	/^    float label_smooth_eps;$/;"	m	struct:load_args
load_args::labels	include/darknet.h	/^    char **labels;$/;"	m	struct:load_args
load_args::letter_box	include/darknet.h	/^    int letter_box;$/;"	m	struct:load_args
load_args::m	include/darknet.h	/^    int m;$/;"	m	struct:load_args
load_args::max	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
load_args::min	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
load_args::mini_batch	include/darknet.h	/^    int mini_batch;$/;"	m	struct:load_args
load_args::mixup	include/darknet.h	/^    int mixup;$/;"	m	struct:load_args
load_args::mosaic_bound	include/darknet.h	/^    int mosaic_bound;$/;"	m	struct:load_args
load_args::n	include/darknet.h	/^    int n;$/;"	m	struct:load_args
load_args::nh	include/darknet.h	/^    int nh;$/;"	m	struct:load_args
load_args::num_boxes	include/darknet.h	/^    int num_boxes;$/;"	m	struct:load_args
load_args::nw	include/darknet.h	/^    int nw;$/;"	m	struct:load_args
load_args::out_h	include/darknet.h	/^    int out_h;$/;"	m	struct:load_args
load_args::out_w	include/darknet.h	/^    int out_w;$/;"	m	struct:load_args
load_args::path	include/darknet.h	/^    char *path;$/;"	m	struct:load_args
load_args::paths	include/darknet.h	/^    char **paths;$/;"	m	struct:load_args
load_args::resize	include/darknet.h	/^    float resize;$/;"	m	struct:load_args
load_args::resized	include/darknet.h	/^    image *resized;$/;"	m	struct:load_args
load_args::saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:load_args
load_args::scale	include/darknet.h	/^    int scale;$/;"	m	struct:load_args
load_args::show_imgs	include/darknet.h	/^    int show_imgs;$/;"	m	struct:load_args
load_args::size	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
load_args::threads	include/darknet.h	/^    int threads;$/;"	m	struct:load_args
load_args::track	include/darknet.h	/^    int track;$/;"	m	struct:load_args
load_args::truth_size	include/darknet.h	/^    int truth_size;$/;"	m	struct:load_args
load_args::type	include/darknet.h	/^    data_type type;$/;"	m	struct:load_args
load_args::w	include/darknet.h	/^    int w;$/;"	m	struct:load_args
load_batchnorm_weights	src/parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_categorical_data_csv	src/data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	src/data.c	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	src/parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	src/parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	src/parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_data	src/data.c	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	src/data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int use_flip, int min, int max, int w, int h, float angle,$/;"	f
load_data_captcha	src/data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	src/data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	src/data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	src/data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int c, int boxes, int truth_size, int classes, int use_flip, int gaussian_noise, int use_blur, int use_mixup,$/;"	f
load_data_detection	src/data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int c, int boxes, int truth_size, int classes, int use_flip, int use_gaussian_noise, int use_blur, int use_mixup,$/;"	f
load_data_in_thread	src/data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_old	src/data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	src/data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_super	src/data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	src/data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	src/data.c	/^data load_data_tag(char **paths, int n, int m, int k, int use_flip, int min, int max, int w, int h, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	src/data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_go	src/data.c	/^data load_go(char *filename)$/;"	f
load_go_moves	src/go.c	/^moves load_go_moves(char *filename)$/;"	f
load_image	build/darknet/x64/darknet.py	/^load_image = lib.load_image_color$/;"	v
load_image	darknet.py	/^load_image = lib.load_image_color$/;"	v
load_image	src/image.c	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image	src/yolo_v2_class.cpp	/^LIB_API image_t Detector::load_image(std::string image_filename)$/;"	f	class:Detector
load_image_augment_paths	src/data.c	/^matrix load_image_augment_paths(char **paths, int n, int use_flip, int min, int max, int w, int h, float angle, float aspect, float hue, float saturation, float exposure, int dontuse_opencv, int contrastive)$/;"	f
load_image_color	src/image.c	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	src/image_opencv.cpp	/^extern "C" image load_image_cv(char *filename, int channels)$/;"	f
load_image_mat	src/image_opencv.cpp	/^cv::Mat load_image_mat(char *filename, int channels)$/;"	f
load_image_mat_cv	src/image_opencv.cpp	/^extern "C" mat_cv *load_image_mat_cv(const char *filename, int flag)$/;"	f
load_image_paths	src/data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	src/data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_resize	src/image_opencv.cpp	/^extern "C" image load_image_resize(char *filename, int w, int h, int c, image *im)$/;"	f
load_image_stb	src/image.c	/^image load_image_stb(char *filename, int channels)$/;"	f
load_image_stb	src/yolo_v2_class.cpp	/^static image load_image_stb(char *filename, int channels)$/;"	f	file:
load_image_stb_resize	src/image.c	/^image load_image_stb_resize(char *filename, int w, int h, int c)$/;"	f
load_images	darknet_images.py	/^def load_images(images_path):$/;"	f
load_implicit_weights	src/parser.c	/^void load_implicit_weights(layer l, FILE *fp)$/;"	f
load_jpeg_image	3rdparty/stb/include/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
load_labels_paths	src/data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy, float label_smooth_eps, int contrastive)$/;"	f
load_meta	build/darknet/x64/darknet.py	/^load_meta = lib.get_metadata$/;"	v
load_meta	darknet.py	/^load_meta = lib.get_metadata$/;"	v
load_net	build/darknet/x64/darknet.py	/^load_net = lib.load_network$/;"	v
load_net	darknet.py	/^load_net = lib.load_network$/;"	v
load_net_custom	build/darknet/x64/darknet.py	/^load_net_custom = lib.load_network_custom$/;"	v
load_net_custom	darknet.py	/^load_net_custom = lib.load_network_custom$/;"	v
load_network	build/darknet/x64/darknet.py	/^def load_network(config_file, data_file, weights, batch_size=1):$/;"	f
load_network	darknet.py	/^def load_network(config_file, data_file, weights, batch_size=1):$/;"	f
load_network	src/parser.c	/^network *load_network(char *cfg, char *weights, int clear)$/;"	f
load_network_custom	src/parser.c	/^network *load_network_custom(char *cfg, char *weights, int clear, int batch)$/;"	f
load_shortcut_weights	src/parser.c	/^void load_shortcut_weights(layer l, FILE *fp)$/;"	f
load_tags_paths	src/data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	src/data.c	/^void *load_thread(void *ptr)$/;"	f
load_threads	src/data.c	/^void *load_threads(void *ptr)$/;"	f
load_weights	src/parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	src/parser.c	/^void load_weights_upto(network *net, char *filename, int cutoff)$/;"	f
local_layer	src/local_layer.h	/^typedef layer local_layer;$/;"	t
local_layer.c	src/local_layer.c	1;"	F
local_layer.h	src/local_layer.h	1;"	F
local_out_height	src/local_layer.c	/^int local_out_height(local_layer l)$/;"	f
local_out_width	src/local_layer.c	/^int local_out_width(local_layer l)$/;"	f
lock	3rdparty/pthreads/include/pthread.h	/^  void *       lock;$/;"	m	struct:pthread_once_t_
locking_callback	src/httplib.h	/^  static void locking_callback(int mode, int type, const char * \/*file*\/,$/;"	f	class:httplib::detail::SSLThreadLocks
log	include/darknet.h	/^    int log;$/;"	m	struct:layer
log_parser	scripts/log_parser/log_parser.py	/^def log_parser(args):$/;"	f
log_parser.py	scripts/log_parser/log_parser.py	1;"	F
logger_	src/httplib.h	/^  Logger logger_;$/;"	m	class:httplib::Server
loggy_activate	src/activations.h	/^static inline float loggy_activate(float x){return 2.f\/(1.f + expf(-x)) - 1;}$/;"	f
loggy_activate_kernel	src/activation_kernels.cu	/^__device__ float loggy_activate_kernel(float x){return 2.f\/(1.f + expf(-x)) - 1;}$/;"	f
loggy_gradient	src/activations.h	/^static inline float loggy_gradient(float x)$/;"	f
loggy_gradient_kernel	src/activation_kernels.cu	/^__device__ float loggy_gradient_kernel(float x)$/;"	f
logistic_activate	src/activations.h	/^static inline float logistic_activate(float x){return 1.f\/(1.f + expf(-x));}$/;"	f
logistic_activate_kernel	src/activation_kernels.cu	/^__device__ float logistic_activate_kernel(float x){return 1.f\/(1.f + expf(-x));}$/;"	f
logistic_gradient	src/activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logistic_gradient_kernel	src/activation_kernels.cu	/^__device__ float logistic_gradient_kernel(float x){return (1-x)*x;}$/;"	f
logistic_x_ent_cpu	src/blas.c	/^void logistic_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
logit	src/region_layer.c	/^float logit(float x)$/;"	f
lookup	src/gemm.c	/^static unsigned char lookup[16] = {$/;"	v	file:
loss	include/darknet.h	/^    float * loss;$/;"	m	struct:layer
loss_gpu	include/darknet.h	/^    float * loss_gpu;$/;"	m	struct:layer
loss_scale	include/darknet.h	/^    float loss_scale;$/;"	m	struct:network
lpal	3rdparty/stb/include/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon20
lrelu	src/blas_kernels.cu	/^__device__ float lrelu(float src) {$/;"	f
lrelu	src/network.c	/^static float lrelu(float src) {$/;"	f	file:
lseek	src/darkunistd.h	36;"	d
lstm_activation	include/darknet.h	/^    ACTIVATION lstm_activation;$/;"	m	struct:layer
lstm_layer.c	src/lstm_layer.c	1;"	F
lstm_layer.h	src/lstm_layer.h	1;"	F
m	include/darknet.h	/^    float * m;$/;"	m	struct:layer
m	include/darknet.h	/^    int m;$/;"	m	struct:load_args
m_cbn_avg_gpu	include/darknet.h	/^    float * m_cbn_avg_gpu;$/;"	m	struct:layer
m_gpu	include/darknet.h	/^    float *m_gpu;$/;"	m	struct:layer
ma	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
mag_array	src/utils.c	/^float mag_array(float *a, int n)$/;"	f
mag_array_skip	src/utils.c	/^float mag_array_skip(float *a, int n, int * indices_to_skip)$/;"	f
main	build/darknet/x64/gen_anchors.py	/^def main(argv):$/;"	f
main	darknet_images.py	/^def main():$/;"	f
main	scripts/gen_anchors.py	/^def main(argv):$/;"	f
main	scripts/kitti2yolo.py	/^def main(args):$/;"	f
main	scripts/kmeansiou.c	/^int main(int argc, char *argv[])$/;"	f
main	src/darknet.c	/^int main(int argc, char **argv)$/;"	f
main	src/yolo_console_dll.cpp	/^int main(int argc, char *argv[])$/;"	f
make_activation_layer	src/activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_attention_image	src/image.c	/^image make_attention_image(int img_size, float *original_delta_cpu, float *original_input_cpu, int w, int h, int c, float alpha)$/;"	f
make_avgpool_layer	src/avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_basic_authentication_header	src/httplib.h	/^make_basic_authentication_header(const std::string &username,$/;"	f	namespace:httplib
make_batchnorm_layer	src/batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c, int train)$/;"	f
make_connected_layer	src/connected_layer.c	/^connected_layer make_connected_layer(int batch, int steps, int inputs, int outputs, ACTIVATION activation, int batch_normalize)$/;"	f
make_content_range_header_field	src/httplib.h	/^inline std::string make_content_range_header_field(size_t offset, size_t length,$/;"	f	namespace:httplib::detail
make_contrastive_layer	src/softmax_layer.c	/^contrastive_layer make_contrastive_layer(int batch, int w, int h, int c, int classes, int inputs, layer *yolo_layer)$/;"	f
make_conv_lstm_layer	src/conv_lstm_layer.c	/^layer make_conv_lstm_layer(int batch, int h, int w, int c, int output_filters, int groups, int steps, int size, int stride, int dilation, int pad, ACTIVATION activation, int batch_normalize, int peephole, int xnor, int bottleneck, int train)$/;"	f
make_convolutional_layer	src/convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int steps, int h, int w, int c, int n, int groups, int size, int stride_x, int stride_y, int dilation, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam, int use_bin_output, int index, int antialiasing, convolutional_layer *share_layer, int assisted_excitation, int deform, int train)$/;"	f
make_cost_layer	src/cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_crnn_layer	src/crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int groups, int steps, int size, int stride, int dilation, int pad, ACTIVATION activation, int batch_normalize, int xnor, int train)$/;"	f
make_crop_layer	src/crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_cscope.sh	make_cscope.sh	1;"	F
make_deconvolutional_layer	src/deconvolutional_layer.c	/^deconvolutional_layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, ACTIVATION activation)$/;"	f
make_detection_layer	src/detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_directory	src/utils.c	/^int make_directory(char *path, int mode)$/;"	f
make_dropout_layer	src/dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability, int dropblock, float dropblock_size_rel, int dropblock_size_abs, int w, int h, int c)$/;"	f
make_empty_image	include/yolo_v2_class.hpp	/^    static image_t make_empty_image(int w, int h, int c)$/;"	f	class:Detector
make_empty_image	src/image.c	/^image make_empty_image(int w, int h, int c)$/;"	f
make_float_array	src/http_stream.cpp	/^float *make_float_array(float* src, size_t size)$/;"	f
make_gaussian_yolo_layer	src/gaussian_yolo_layer.c	/^layer make_gaussian_yolo_layer(int batch, int w, int h, int n, int total, int *mask, int classes, int max_boxes)$/;"	f
make_gru_layer	src/gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize)$/;"	f
make_history_layer	src/conv_lstm_layer.c	/^layer make_history_layer(int batch, int h, int w, int c, int history_size, int steps, int train)$/;"	f
make_image	build/darknet/x64/darknet.py	/^make_image = lib.make_image$/;"	v
make_image	darknet.py	/^make_image = lib.make_image$/;"	v
make_image	src/image.c	/^image make_image(int w, int h, int c)$/;"	f
make_image_custom	include/yolo_v2_class.hpp	/^    static image_t make_image_custom(int w, int h, int c)$/;"	f	class:Detector
make_image_red	src/image.c	/^void make_image_red(image im)$/;"	f
make_implicit_layer	src/representation_layer.c	/^layer make_implicit_layer(int batch, int index, float mean_init, float std_init, int filters, int atoms)$/;"	f
make_labels	build/darknet/x64/data/labels/make_labels.py	/^def make_labels(s):$/;"	f
make_labels	data/labels/make_labels.py	/^def make_labels(s):$/;"	f
make_labels.py	build/darknet/x64/data/labels/make_labels.py	1;"	F
make_labels.py	data/labels/make_labels.py	1;"	F
make_list	src/list.c	/^list *make_list()$/;"	f
make_local_layer	src/local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_lstm_layer	src/lstm_layer.c	/^layer make_lstm_layer(int batch, int inputs, int outputs, int steps, int batch_normalize)$/;"	f
make_matrix	scripts/kmeansiou.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_matrix	src/matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	src/maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride_x, int stride_y, int padding, int maxpool_depth, int out_channels, int antialiasing, int avgpool, int train)$/;"	f
make_multipart_data_boundary	src/httplib.h	/^inline std::string make_multipart_data_boundary() {$/;"	f	namespace:httplib::detail
make_multipart_ranges_data	src/httplib.h	/^inline std::string make_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
make_network	src/network.c	/^network make_network(int n)$/;"	f
make_network_boxes	build/darknet/x64/darknet.py	/^make_network_boxes = lib.make_network_boxes$/;"	v
make_network_boxes	darknet.py	/^make_network_boxes = lib.make_network_boxes$/;"	v
make_network_boxes	src/network.c	/^detection *make_network_boxes(network *net, float thresh, int *num)$/;"	f
make_network_boxes_batch	src/network.c	/^detection *make_network_boxes_batch(network *net, float thresh, int *num, int batch)$/;"	f
make_normalization_layer	src/normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_random_image	src/image.c	/^image make_random_image(int w, int h, int c)$/;"	f
make_range_header	src/httplib.h	/^inline std::pair<std::string, std::string> make_range_header(Ranges ranges) {$/;"	f	namespace:httplib
make_region_layer	src/region_layer.c	/^region_layer make_region_layer(int batch, int w, int h, int n, int classes, int coords, int max_boxes)$/;"	f
make_reorg_layer	src/reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_reorg_old_layer	src/reorg_old_layer.c	/^layer make_reorg_old_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_rnn_layer	src/rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int hidden, int outputs, int steps, ACTIVATION activation, int batch_normalize, int log)$/;"	f
make_route_layer	src/route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes, int groups, int group_id)$/;"	f
make_sam_layer	src/sam_layer.c	/^layer make_sam_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_scale_channels_layer	src/scale_channels_layer.c	/^layer make_scale_channels_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2, int scale_wh)$/;"	f
make_shortcut_layer	src/shortcut_layer.c	/^layer make_shortcut_layer(int batch, int n, int *input_layers, int* input_sizes, int w, int h, int c,$/;"	f
make_softmax_layer	src/softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
make_upsample_layer	src/upsample_layer.c	/^layer make_upsample_layer(int batch, int w, int h, int c, int stride)$/;"	f
make_window	src/image_opencv.cpp	/^extern "C" void make_window(char *name, int w, int h, int fullscreen)$/;"	f
make_yolo_layer	src/yolo_layer.c	/^layer make_yolo_layer(int batch, int w, int h, int n, int total, int *mask, int classes, int max_boxes)$/;"	f
makes_safe_go	src/go.c	/^int makes_safe_go(float *b, int *lib, int p, int r, int c){$/;"	f
malloc_error	src/utils.c	/^void malloc_error(const size_t size, const char * const filename, const char * const funcname, const int line)$/;"	f
map	include/darknet.h	/^    int   * map;$/;"	m	struct:layer
marker	3rdparty/stb/include/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon9
mask	include/darknet.h	/^    float *mask;$/;"	m	struct:detection
mask	include/darknet.h	/^    int *mask;$/;"	m	struct:layer
mask_gpu_new_api	src/blas_kernels.cu	/^extern "C" void mask_gpu_new_api(int N, float * X, float mask_num, float * mask, float val)$/;"	f
mask_kernel	src/blas_kernels.cu	/^__global__ void mask_kernel(int n, float *x, float mask_num, float *mask)$/;"	f
mask_kernel_new_api	src/blas_kernels.cu	/^__global__ void mask_kernel_new_api(int n, float *x, float mask_num, float *mask, float val)$/;"	f
mask_ongpu	src/blas_kernels.cu	/^extern "C" void mask_ongpu(int N, float * X, float mask_num, float * mask)$/;"	f
mask_scale	include/darknet.h	/^    float mask_scale;$/;"	m	struct:layer
master	src/http_stream.cpp	/^    fd_set master;$/;"	m	class:JSON_sender	file:
master	src/http_stream.cpp	/^    fd_set master;$/;"	m	class:MJPG_sender	file:
mat_cv	src/image_opencv.h	/^typedef void* mat_cv;$/;"	t
mat_obj	include/yolo_v2_class.hpp	/^        cv::Mat mat_obj, mat_resized_obj;$/;"	m	struct:preview_boxes_t::preview_box_track_t
mat_resized_obj	include/yolo_v2_class.hpp	/^        cv::Mat mat_obj, mat_resized_obj;$/;"	m	struct:preview_boxes_t::preview_box_track_t
mat_to_image	include/yolo_v2_class.hpp	/^    static std::shared_ptr<image_t> mat_to_image(cv::Mat img_src)$/;"	f	class:Detector
mat_to_image	src/image_opencv.cpp	/^extern "C" image mat_to_image(cv::Mat mat)$/;"	f
mat_to_image_custom	include/yolo_v2_class.hpp	/^    static image_t mat_to_image_custom(cv::Mat mat)$/;"	f	class:Detector
mat_to_image_cv	src/image_opencv.cpp	/^image mat_to_image_cv(mat_cv *mat)$/;"	f
mat_to_image_resize	include/yolo_v2_class.hpp	/^    std::shared_ptr<image_t> mat_to_image_resize(cv::Mat mat) const$/;"	f	class:Detector
matches	src/httplib.h	/^  Match matches;$/;"	m	struct:httplib::Request
math_vector_length	src/blas.c	/^float math_vector_length(float *A, unsigned int feature_size)$/;"	f
matrix	include/darknet.h	/^typedef struct matrix {$/;"	s
matrix	include/darknet.h	/^} matrix;$/;"	t	typeref:struct:matrix
matrix	scripts/kmeansiou.c	/^typedef struct matrix{$/;"	s	file:
matrix	scripts/kmeansiou.c	/^} matrix;$/;"	t	typeref:struct:matrix	file:
matrix.c	src/matrix.c	1;"	F
matrix.h	src/matrix.h	1;"	F
matrix::cols	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
matrix::cols	scripts/kmeansiou.c	/^    int rows, cols;$/;"	m	struct:matrix	file:
matrix::rows	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
matrix::rows	scripts/kmeansiou.c	/^    int rows, cols;$/;"	m	struct:matrix	file:
matrix::vals	include/darknet.h	/^    float **vals;$/;"	m	struct:matrix
matrix::vals	scripts/kmeansiou.c	/^    double **vals;$/;"	m	struct:matrix	file:
matrix_add_matrix	src/matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	src/matrix.c	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	src/matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
max_batches	include/darknet.h	/^    int max_batches;$/;"	m	struct:network
max_boxes	include/darknet.h	/^    int max_boxes;$/;"	m	struct:layer
max_chart_loss	include/darknet.h	/^    float max_chart_loss;$/;"	m	struct:network
max_crop	include/darknet.h	/^    int max_crop;$/;"	m	struct:network
max_delta	include/darknet.h	/^    float max_delta;$/;"	m	struct:layer
max_delta_gpu_size	include/darknet.h	/^    size_t max_delta_gpu_size;$/;"	m	struct:network
max_dist	include/yolo_v2_class.hpp	/^    const float max_dist;   \/\/ max distance (in px) to track with the same ID$/;"	m	class:track_kalman_t
max_events	src/dark_cuda.c	/^static const int max_events = 1024;$/;"	v	file:
max_index	src/utils.c	/^int max_index(float *a, int n)$/;"	f
max_input16_size	include/darknet.h	/^    size_t *max_input16_size;$/;"	m	struct:network
max_int_index	src/utils.c	/^int max_int_index(int *a, int n)$/;"	f
max_objects	include/yolo_v2_class.hpp	/^    int max_objects;    \/\/ max objects for tracking$/;"	m	class:track_kalman_t
max_output16_size	include/darknet.h	/^    size_t *max_output16_size;$/;"	m	struct:network
max_ratio	include/darknet.h	/^    float max_ratio;$/;"	m	struct:network
max_val_cmp	src/utils.h	112;"	d
max_x	3rdparty/stb/include/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon20
max_y	3rdparty/stb/include/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon20
maxcode	3rdparty/stb/include/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon12
maxcode	3rdparty/stb/include/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon8
maxfd	src/http_stream.cpp	/^    SOCKET maxfd;$/;"	m	class:JSON_sender	file:
maxfd	src/http_stream.cpp	/^    SOCKET maxfd;$/;"	m	class:MJPG_sender	file:
maxpool_depth	include/darknet.h	/^    int maxpool_depth;$/;"	m	struct:layer
maxpool_layer	src/maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
maxpool_layer.c	src/maxpool_layer.c	1;"	F
maxpool_layer.h	src/maxpool_layer.h	1;"	F
maxpool_layer_kernels.cu	src/maxpool_layer_kernels.cu	1;"	F
maxpool_zero_nonmax	include/darknet.h	/^    int maxpool_zero_nonmax;$/;"	m	struct:layer
mb	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
mean	include/darknet.h	/^    float * mean;$/;"	m	struct:layer
mean_alpha	include/darknet.h	/^    float mean_alpha;$/;"	m	struct:layer
mean_arr	include/darknet.h	/^    float *mean_arr;$/;"	m	struct:layer
mean_arr_gpu	include/darknet.h	/^    float *mean_arr_gpu;$/;"	m	struct:layer
mean_array	src/utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_array_gpu	src/blas_kernels.cu	/^void mean_array_gpu(float *src, int size, float alpha, float *avg)$/;"	f
mean_array_kernel	src/blas_kernels.cu	/^__global__ void mean_array_kernel(float *src, int size, float alpha, float *avg)$/;"	f
mean_arrays	src/utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	src/blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta	include/darknet.h	/^    float * mean_delta;$/;"	m	struct:layer
mean_delta_cpu	src/batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_delta_gpu	include/darknet.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer
mean_delta_gpu	src/blas_kernels.cu	/^extern "C" void mean_delta_gpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_delta_kernel	src/blas_kernels.cu	/^__global__ void mean_delta_kernel(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_gpu	include/darknet.h	/^    float * mean_gpu;$/;"	m	struct:layer
mean_gpu	src/blas_kernels.cu	/^extern "C" void mean_gpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_kernel	src/blas_kernels.cu	/^__global__ void  mean_kernel(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
meas	include/yolo_v2_class.hpp	/^        cv::Mat meas;$/;"	m	struct:track_kalman_t::one_kalman_t
measSize	include/yolo_v2_class.hpp	/^        int measSize, stateSize, contrSize;$/;"	m	struct:track_kalman_t::one_kalman_t
memcpy_ongpu	src/blas_kernels.cu	/^extern "C" void memcpy_ongpu(void *dst, void *src, int size_bytes)$/;"	f
merge_updates	src/network_kernels.cu	/^void merge_updates(layer l, layer base)$/;"	f
merge_weights	src/network_kernels.cu	/^void merge_weights(layer l, layer base)$/;"	f
metadata	include/darknet.h	/^typedef struct metadata metadata;$/;"	t	typeref:struct:metadata
metadata	include/darknet.h	/^typedef struct metadata {$/;"	s
metadata	include/darknet.h	/^} metadata;$/;"	t	typeref:struct:metadata
metadata::classes	include/darknet.h	/^    int classes;$/;"	m	struct:metadata
metadata::names	include/darknet.h	/^    char **names;$/;"	m	struct:metadata
method	src/httplib.h	/^  std::string method;$/;"	m	struct:httplib::Request
mg	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
min	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
min_crop	include/darknet.h	/^    int min_crop;$/;"	m	struct:network
min_frames	include/yolo_v2_class.hpp	/^    int min_frames;     \/\/ min frames to consider an object as detected$/;"	m	class:track_kalman_t
min_ratio	include/darknet.h	/^    float min_ratio;$/;"	m	struct:network
min_val_cmp	src/utils.h	113;"	d
mini_batch	include/darknet.h	/^    int mini_batch;$/;"	m	struct:load_args
mish_njuffa	src/activation_kernels.cu	/^__device__ float mish_njuffa(float x)$/;"	f
mish_yashas	src/activation_kernels.cu	/^__device__ float mish_yashas(float x)$/;"	f
mish_yashas2	src/activation_kernels.cu	/^__device__ float mish_yashas2(float x)$/;"	f
mixup	include/darknet.h	/^    int mixup;$/;"	m	struct:load_args
mixup	include/darknet.h	/^    int mixup;$/;"	m	struct:network
mode_t	3rdparty/pthreads/include/semaphore.h	/^typedef unsigned int mode_t;$/;"	t
model	scripts/kmeansiou.c	/^} model;$/;"	t	typeref:struct:__anon41	file:
model	src/matrix.h	/^} model;$/;"	t	typeref:struct:__anon32
momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:network
momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:update_args
mosaic_bound	include/darknet.h	/^    int mosaic_bound;$/;"	m	struct:load_args
mosaic_bound	include/darknet.h	/^    int mosaic_bound;$/;"	m	struct:network
move_go	src/go.c	/^void move_go(float *b, int p, int r, int c)$/;"	f
move_window_cv	src/image_opencv.cpp	/^extern "C" void move_window_cv(char const* window_name, int x, int y)$/;"	f
moves	src/go.c	/^} moves;$/;"	t	typeref:struct:__anon29	file:
mr	3rdparty/stb/include/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon17
mse_array	src/utils.c	/^float mse_array(float *a, int n)$/;"	f
mtx	src/http_stream.cpp	/^static std::mutex mtx;$/;"	v	file:
mtx_load_data	src/data.c	/^pthread_mutex_t mtx_load_data = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mtx_mjpeg	src/http_stream.cpp	/^static std::mutex mtx_mjpeg;$/;"	v	file:
mul_cpu	src/blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mul_kernel	src/blas_kernels.cu	/^__global__ void mul_kernel(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mul_ongpu	src/blas_kernels.cu	/^extern "C" void mul_ongpu(int N, float * X, int INCX, float * Y, int INCY)$/;"	f
mult_add_into_cpu	src/blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
mult_add_into_gpu	src/blas_kernels.cu	/^extern "C" void mult_add_into_gpu(int num, float *a, float *b, float *c)$/;"	f
mult_add_into_kernel	src/blas_kernels.cu	/^__global__ void mult_add_into_kernel(int n, float *a, float *b, float *c)$/;"	f
mult_inverse_array_gpu	src/blas_kernels.cu	/^extern "C" void mult_inverse_array_gpu(const float *src_gpu, float *dst_gpu, int size, float eps, float divider, float clip, float abs_add)$/;"	f
mult_inverse_array_kernel	src/blas_kernels.cu	/^__global__  void mult_inverse_array_kernel(const float *src_gpu, float *dst_gpu, int size, const float eps,$/;"	f
mutex	src/data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mutex_	src/httplib.h	/^  std::mutex mutex_;$/;"	m	class:httplib::ThreadPool
mutex_pinned	src/dark_cuda.c	/^static pthread_mutex_t mutex_pinned = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
n	include/darknet.h	/^    int n;$/;"	m	struct:layer
n	include/darknet.h	/^    int n;$/;"	m	struct:load_args
n	include/darknet.h	/^    int n;$/;"	m	struct:network
n	include/darknet.h	/^    int n;$/;"	m	struct:tree
n	src/go.c	/^    int n;$/;"	m	struct:__anon29	file:
n	src/network_kernels.cu	/^    int n;$/;"	m	struct:__anon39	file:
n_ind	src/go.c	11;"	d	file:
name	include/darknet.h	/^    char **name;$/;"	m	struct:tree
name	src/getopt.c	/^  const char* name; \/* option name, without leading hyphens *\/$/;"	m	struct:option	file:
name	src/httplib.h	/^  std::string name;$/;"	m	struct:httplib::MultipartFormData
names	include/darknet.h	/^    char **names;$/;"	m	struct:metadata
nbiases	include/darknet.h	/^    int nbiases;$/;"	m	struct:layer
nboxes	src/demo.c	/^static int nboxes = 0;$/;"	v	file:
net	include/darknet.h	/^    network net;$/;"	m	struct:network_state
net	src/compare.c	/^    network net;$/;"	m	struct:__anon27	file:
net	src/demo.c	/^static network net;$/;"	v	file:
net	src/network_kernels.cu	/^    network net;$/;"	m	struct:__anon38	file:
net	src/parser.c	/^    network net;$/;"	m	struct:size_params	file:
net	src/yolo_v2_class.cpp	/^    network net;$/;"	m	struct:detector_gpu_t	file:
net_cam_v3.sh	net_cam_v3.sh	1;"	F
net_cam_v4.sh	net_cam_v4.sh	1;"	F
nets	src/network_kernels.cu	/^    network *nets;$/;"	m	struct:__anon39	file:
network	include/darknet.h	/^typedef struct network network;$/;"	t	typeref:struct:network
network	include/darknet.h	/^typedef struct network {$/;"	s
network	include/darknet.h	/^} network;$/;"	t	typeref:struct:network
network.c	src/network.c	1;"	F
network.h	src/network.h	1;"	F
network::B1	include/darknet.h	/^    float B1;$/;"	m	struct:network
network::B2	include/darknet.h	/^    float B2;$/;"	m	struct:network
network::adam	include/darknet.h	/^    int adam;$/;"	m	struct:network
network::adversarial	include/darknet.h	/^    int adversarial;$/;"	m	struct:network
network::adversarial_lr	include/darknet.h	/^    float adversarial_lr;$/;"	m	struct:network
network::angle	include/darknet.h	/^    float angle;$/;"	m	struct:network
network::aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:network
network::attention	include/darknet.h	/^    int attention;$/;"	m	struct:network
network::augment_speed	include/darknet.h	/^    int augment_speed;$/;"	m	struct:network
network::badlabels_reject_threshold	include/darknet.h	/^    float *badlabels_reject_threshold;$/;"	m	struct:network
network::badlabels_rejection_percentage	include/darknet.h	/^    float badlabels_rejection_percentage;$/;"	m	struct:network
network::batch	include/darknet.h	/^    int batch;$/;"	m	struct:network
network::batches_cycle_mult	include/darknet.h	/^    int batches_cycle_mult;$/;"	m	struct:network
network::batches_per_cycle	include/darknet.h	/^    int batches_per_cycle;$/;"	m	struct:network
network::benchmark_layers	include/darknet.h	/^    int benchmark_layers;$/;"	m	struct:network
network::blur	include/darknet.h	/^    int blur;$/;"	m	struct:network
network::burn_in	include/darknet.h	/^    int burn_in;$/;"	m	struct:network
network::c	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
network::center	include/darknet.h	/^    int center;$/;"	m	struct:network
network::clip	include/darknet.h	/^    float clip;$/;"	m	struct:network
network::contrastive	include/darknet.h	/^    int contrastive;$/;"	m	struct:network
network::contrastive_color	include/darknet.h	/^    int contrastive_color;$/;"	m	struct:network
network::contrastive_jit_flip	include/darknet.h	/^    int contrastive_jit_flip;$/;"	m	struct:network
network::cost	include/darknet.h	/^    float *cost;$/;"	m	struct:network
network::cuda_graph	include/darknet.h	/^    void *cuda_graph;$/;"	m	struct:network
network::cuda_graph_exec	include/darknet.h	/^    void *cuda_graph_exec;$/;"	m	struct:network
network::cuda_graph_ready	include/darknet.h	/^    int *cuda_graph_ready;$/;"	m	struct:network
network::cudnn_half	include/darknet.h	/^    int cudnn_half;$/;"	m	struct:network
network::cur_iteration	include/darknet.h	/^    int *cur_iteration;$/;"	m	struct:network
network::current_subdivision	include/darknet.h	/^    int current_subdivision;$/;"	m	struct:network
network::decay	include/darknet.h	/^    float decay;$/;"	m	struct:network
network::delta	include/darknet.h	/^    float *delta;$/;"	m	struct:network
network::delta_gpu	include/darknet.h	/^    float *delta_gpu;$/;"	m	struct:network
network::delta_rolling_avg	include/darknet.h	/^    float *delta_rolling_avg;$/;"	m	struct:network
network::delta_rolling_max	include/darknet.h	/^    float *delta_rolling_max;$/;"	m	struct:network
network::delta_rolling_std	include/darknet.h	/^    float *delta_rolling_std;$/;"	m	struct:network
network::dynamic_minibatch	include/darknet.h	/^    int dynamic_minibatch;$/;"	m	struct:network
network::ema_alpha	include/darknet.h	/^    float ema_alpha;$/;"	m	struct:network
network::epoch	include/darknet.h	/^    float epoch;$/;"	m	struct:network
network::eps	include/darknet.h	/^    float eps;$/;"	m	struct:network
network::equidistant_point	include/darknet.h	/^    int equidistant_point;$/;"	m	struct:network
network::exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:network
network::flip	include/darknet.h	/^    int flip; \/\/ horizontal flip 50% probability augmentaiont for classifier training (default = 1)$/;"	m	struct:network
network::gamma	include/darknet.h	/^    float gamma;$/;"	m	struct:network
network::gaussian_noise	include/darknet.h	/^    int gaussian_noise;$/;"	m	struct:network
network::global_delta_gpu	include/darknet.h	/^    float *global_delta_gpu;$/;"	m	struct:network
network::gpu_index	include/darknet.h	/^    int gpu_index;$/;"	m	struct:network
network::h	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
network::hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:network
network::hue	include/darknet.h	/^    float hue;$/;"	m	struct:network
network::index	include/darknet.h	/^    int index;$/;"	m	struct:network
network::init_sequential_subdivisions	include/darknet.h	/^    int init_sequential_subdivisions;$/;"	m	struct:network
network::input	include/darknet.h	/^    float *input;$/;"	m	struct:network
network::input16_gpu	include/darknet.h	/^    float **input16_gpu;$/;"	m	struct:network
network::input_gpu	include/darknet.h	/^    float **input_gpu;$/;"	m	struct:network
network::input_pinned_cpu	include/darknet.h	/^    float *input_pinned_cpu;$/;"	m	struct:network
network::input_pinned_cpu_flag	include/darknet.h	/^    int input_pinned_cpu_flag;$/;"	m	struct:network
network::input_state_gpu	include/darknet.h	/^    float *input_state_gpu;$/;"	m	struct:network
network::inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:network
network::label_smooth_eps	include/darknet.h	/^    float label_smooth_eps;$/;"	m	struct:network
network::layers	include/darknet.h	/^    layer *layers;$/;"	m	struct:network
network::learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:network
network::learning_rate_max	include/darknet.h	/^    float learning_rate_max;$/;"	m	struct:network
network::learning_rate_min	include/darknet.h	/^    float learning_rate_min;$/;"	m	struct:network
network::letter_box	include/darknet.h	/^    int letter_box;$/;"	m	struct:network
network::loss_scale	include/darknet.h	/^    float loss_scale;$/;"	m	struct:network
network::max_batches	include/darknet.h	/^    int max_batches;$/;"	m	struct:network
network::max_chart_loss	include/darknet.h	/^    float max_chart_loss;$/;"	m	struct:network
network::max_crop	include/darknet.h	/^    int max_crop;$/;"	m	struct:network
network::max_delta_gpu_size	include/darknet.h	/^    size_t max_delta_gpu_size;$/;"	m	struct:network
network::max_input16_size	include/darknet.h	/^    size_t *max_input16_size;$/;"	m	struct:network
network::max_output16_size	include/darknet.h	/^    size_t *max_output16_size;$/;"	m	struct:network
network::max_ratio	include/darknet.h	/^    float max_ratio;$/;"	m	struct:network
network::min_crop	include/darknet.h	/^    int min_crop;$/;"	m	struct:network
network::min_ratio	include/darknet.h	/^    float min_ratio;$/;"	m	struct:network
network::mixup	include/darknet.h	/^    int mixup;$/;"	m	struct:network
network::momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:network
network::mosaic_bound	include/darknet.h	/^    int mosaic_bound;$/;"	m	struct:network
network::n	include/darknet.h	/^    int n;$/;"	m	struct:network
network::notruth	include/darknet.h	/^    int notruth;$/;"	m	struct:network
network::num_boxes	include/darknet.h	/^    int num_boxes;$/;"	m	struct:network
network::num_sigmas_reject_badlabels	include/darknet.h	/^    float num_sigmas_reject_badlabels;$/;"	m	struct:network
network::num_steps	include/darknet.h	/^    int num_steps;$/;"	m	struct:network
network::optimized_memory	include/darknet.h	/^    int optimized_memory;$/;"	m	struct:network
network::output	include/darknet.h	/^    float *output;$/;"	m	struct:network
network::output16_gpu	include/darknet.h	/^    float **output16_gpu;$/;"	m	struct:network
network::output_gpu	include/darknet.h	/^    float *output_gpu;$/;"	m	struct:network
network::outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:network
network::policy	include/darknet.h	/^    learning_rate_policy policy;$/;"	m	struct:network
network::power	include/darknet.h	/^    float power;$/;"	m	struct:network
network::random	include/darknet.h	/^    int random;$/;"	m	struct:network
network::resize_step	include/darknet.h	/^    int resize_step;$/;"	m	struct:network
network::rewritten_bbox	include/darknet.h	/^    int *rewritten_bbox;$/;"	m	struct:network
network::saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:network
network::scale	include/darknet.h	/^    float scale;$/;"	m	struct:network
network::scales	include/darknet.h	/^    float *scales;$/;"	m	struct:network
network::seen	include/darknet.h	/^    uint64_t *seen;$/;"	m	struct:network
network::seq_scales	include/darknet.h	/^    float *seq_scales;$/;"	m	struct:network
network::sequential_subdivisions	include/darknet.h	/^    int sequential_subdivisions;$/;"	m	struct:network
network::state_delta_gpu	include/darknet.h	/^    float *state_delta_gpu;$/;"	m	struct:network
network::step	include/darknet.h	/^    int step;$/;"	m	struct:network
network::steps	include/darknet.h	/^    int   *steps;$/;"	m	struct:network
network::subdivisions	include/darknet.h	/^    int subdivisions;$/;"	m	struct:network
network::t	include/darknet.h	/^    int *t;$/;"	m	struct:network
network::time_steps	include/darknet.h	/^    int time_steps;$/;"	m	struct:network
network::total_bbox	include/darknet.h	/^    int *total_bbox;$/;"	m	struct:network
network::track	include/darknet.h	/^    int track;$/;"	m	struct:network
network::train	include/darknet.h	/^    int train;$/;"	m	struct:network
network::train_images_num	include/darknet.h	/^    int train_images_num;$/;"	m	struct:network
network::truth	include/darknet.h	/^    float *truth;$/;"	m	struct:network
network::truth_gpu	include/darknet.h	/^    float **truth_gpu;$/;"	m	struct:network
network::truths	include/darknet.h	/^    int truths;$/;"	m	struct:network
network::try_fix_nan	include/darknet.h	/^    int try_fix_nan;$/;"	m	struct:network
network::unsupervised	include/darknet.h	/^    int unsupervised;$/;"	m	struct:network
network::use_cuda_graph	include/darknet.h	/^    int use_cuda_graph;$/;"	m	struct:network
network::w	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
network::wait_stream	include/darknet.h	/^    int wait_stream;$/;"	m	struct:network
network::weights_reject_freq	include/darknet.h	/^    int weights_reject_freq;$/;"	m	struct:network
network::workspace	include/darknet.h	/^    float *workspace;$/;"	m	struct:network
network::workspace_size_limit	include/darknet.h	/^    size_t workspace_size_limit;$/;"	m	struct:network
network_accuracies	src/network.c	/^float *network_accuracies(network net, data d, int n)$/;"	f
network_accuracy	src/network.c	/^float network_accuracy(network net, data d)$/;"	f
network_accuracy_multi	src/network.c	/^float network_accuracy_multi(network net, data d, int n)$/;"	f
network_height	build/darknet/x64/darknet.py	/^def network_height(net):$/;"	f
network_height	darknet.py	/^def network_height(net):$/;"	f
network_height	src/network.c	/^int network_height(network *net) { return net->h; }$/;"	f
network_kernels.cu	src/network_kernels.cu	1;"	F
network_predict	build/darknet/x64/darknet.py	/^network_predict = lib.network_predict_ptr$/;"	v
network_predict	darknet.py	/^network_predict = lib.network_predict_ptr$/;"	v
network_predict	src/network.c	/^float *network_predict(network net, float *input)$/;"	f
network_predict_batch	build/darknet/x64/darknet.py	/^network_predict_batch = lib.network_predict_batch$/;"	v
network_predict_batch	darknet.py	/^network_predict_batch = lib.network_predict_batch$/;"	v
network_predict_batch	src/network.c	/^det_num_pair* network_predict_batch(network *net, image im, int batch_size, int w, int h, float thresh, float hier, int *map, int relative, int letter)$/;"	f
network_predict_data	src/network.c	/^matrix network_predict_data(network net, data test)$/;"	f
network_predict_data_multi	src/network.c	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f
network_predict_gpu	src/network_kernels.cu	/^float *network_predict_gpu(network net, float *input)$/;"	f
network_predict_image	src/network.c	/^float *network_predict_image(network *net, image im)$/;"	f
network_predict_image_letterbox	src/network.c	/^float *network_predict_image_letterbox(network *net, image im)$/;"	f
network_predict_ptr	src/network.c	/^float *network_predict_ptr(network *net, float *input)$/;"	f
network_state	include/darknet.h	/^typedef struct network_state network_state;$/;"	t	typeref:struct:network_state
network_state	include/darknet.h	/^typedef struct network_state {$/;"	s
network_state	include/darknet.h	/^} network_state;$/;"	t	typeref:struct:network_state
network_state::delta	include/darknet.h	/^    float *delta;$/;"	m	struct:network_state
network_state::index	include/darknet.h	/^    int index;$/;"	m	struct:network_state
network_state::input	include/darknet.h	/^    float *input;$/;"	m	struct:network_state
network_state::net	include/darknet.h	/^    network net;$/;"	m	struct:network_state
network_state::train	include/darknet.h	/^    int train;$/;"	m	struct:network_state
network_state::truth	include/darknet.h	/^    float *truth;$/;"	m	struct:network_state
network_state::workspace	include/darknet.h	/^    float *workspace;$/;"	m	struct:network_state
network_width	build/darknet/x64/darknet.py	/^def network_width(net):$/;"	f
network_width	darknet.py	/^def network_width(net):$/;"	f
network_width	src/network.c	/^int network_width(network *net) { return net->w; }$/;"	f
new_coords	include/darknet.h	/^    int new_coords;$/;"	m	struct:layer
new_id	src/http_stream.cpp	/^    int old_id, new_id;$/;"	m	struct:similarity_detections_t	file:
new_lda	include/darknet.h	/^    int new_lda;$/;"	m	struct:layer
new_state_id	include/yolo_v2_class.hpp	/^    tst_t new_state_id(std::vector<bool> &busy_vec)$/;"	f	class:track_kalman_t
new_task_queue	src/httplib.h	/^  std::function<TaskQueue *(void)> new_task_queue;$/;"	m	class:httplib::Server
next	src/list.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
nh	include/darknet.h	/^    int nh;$/;"	m	struct:load_args
nightmare.c	src/nightmare.c	1;"	F
nms	include/yolo_v2_class.hpp	/^    float nms = .4;$/;"	m	class:Detector
nms_comparator	src/box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
nms_comparator_v3	src/box.c	/^int nms_comparator_v3(const void *pa, const void *pb)$/;"	f
nms_kind	include/darknet.h	/^    NMS_KIND nms_kind;$/;"	m	struct:layer
no_argument	src/getopt.c	/^  no_argument = 0, \/* option never takes an argument	*\/$/;"	e	enum:__anon40	file:
noadjust	include/darknet.h	/^    int noadjust;$/;"	m	struct:layer
noarg	src/getopt.h	/^static const char noarg[] = "option doesn't take an argument -- %.*s";$/;"	v
node	src/list.h	/^typedef struct node{$/;"	s
node	src/list.h	/^} node;$/;"	t	typeref:struct:node
node::next	src/list.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
node::prev	src/list.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
node::val	src/list.h	/^    void *val;$/;"	m	struct:node
noexcept	src/httplib.h	/^  SSL_CTX *ssl_context() const noexcept;$/;"	m	class:httplib::SSLClient
noi	src/go.c	/^int noi = 1;$/;"	v
noloss	include/darknet.h	/^    int noloss;$/;"	m	struct:layer
nomore	3rdparty/stb/include/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon9
non_max_suppression_fast	darknet.py	/^def non_max_suppression_fast(detections, overlap_thresh):$/;"	f
nonopt_end	src/getopt.h	/^static int nonopt_end = -1; \/* first option after non options (for permute) *\/$/;"	v
nonopt_start	src/getopt.h	/^static int nonopt_start = -1; \/* first non option argument (for permute) *\/$/;"	v
noobject_scale	include/darknet.h	/^    float noobject_scale;$/;"	m	struct:layer
normDstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normDstTensorDesc	include/darknet.h	/^    void* normTensorDesc, *normDstTensorDesc, *normDstTensorDescF16;$/;"	m	struct:layer
normDstTensorDescF16	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normDstTensorDescF16	include/darknet.h	/^    void* normTensorDesc, *normDstTensorDesc, *normDstTensorDescF16;$/;"	m	struct:layer
normTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normTensorDesc	include/darknet.h	/^    void* normTensorDesc, *normDstTensorDesc, *normDstTensorDescF16;$/;"	m	struct:layer
normalization_layer.c	src/normalization_layer.c	1;"	F
normalization_layer.h	src/normalization_layer.h	1;"	F
normalize_array	src/utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	src/blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	src/data.c	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	src/batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_delta_gpu	src/blas_kernels.cu	/^extern "C" void normalize_delta_gpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_delta_kernel	src/blas_kernels.cu	/^__global__ void normalize_delta_kernel(int N, float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_gpu	src/blas_kernels.cu	/^extern "C" void normalize_gpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_image	src/image.c	/^void normalize_image(image p)$/;"	f
normalize_image2	src/image.c	/^void normalize_image2(image p)$/;"	f
normalize_kernel	src/blas_kernels.cu	/^__global__ void normalize_kernel(int N, float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_layer	src/darknet.c	/^layer normalize_layer(layer l, int n)$/;"	f
normalize_net	src/darknet.c	/^void normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
normalize_scale_bias_gpu	src/blas_kernels.cu	/^extern "C" void normalize_scale_bias_gpu(float *x, float *mean, float *variance, float *scales, float *biases, int batch, int filters, int spatial, int inverse_variance, float epsilon)$/;"	f
normalize_scale_bias_kernel	src/blas_kernels.cu	/^__global__ void normalize_scale_bias_kernel(int N, float *x, float *mean, float *variance, float *scales, float *biases, int batch, int filters, int spatial, int inverse_variance, float epsilon)$/;"	f
norms	include/darknet.h	/^    float * norms;$/;"	m	struct:layer
norms_gpu	include/darknet.h	/^    float * norms_gpu;$/;"	m	struct:layer
notruth	include/darknet.h	/^    int notruth;$/;"	m	struct:network
num	include/darknet.h	/^    int num;$/;"	m	struct:det_num_pair
num_bits	3rdparty/stb/include/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon13
num_boxes	include/darknet.h	/^    int *num_boxes;$/;"	m	struct:data
num_boxes	include/darknet.h	/^    int num_boxes;$/;"	m	struct:load_args
num_boxes	include/darknet.h	/^    int num_boxes;$/;"	m	struct:network
num_channels	3rdparty/stb/include/stb_image.h	/^   int num_channels;$/;"	m	struct:__anon6
num_detections	src/network.c	/^int num_detections(network *net, float thresh)$/;"	f
num_detections_batch	src/network.c	/^int num_detections_batch(network *net, float thresh, int batch)$/;"	f
num_sigmas_reject_badlabels	include/darknet.h	/^    float num_sigmas_reject_badlabels;$/;"	m	struct:network
num_steps	include/darknet.h	/^    int num_steps;$/;"	m	struct:network
numload	include/darknet.h	/^    int numload;$/;"	m	struct:layer
nw	include/darknet.h	/^    int nw;$/;"	m	struct:load_args
nweights	include/darknet.h	/^    int nweights;$/;"	m	struct:layer
o_cpu	include/darknet.h	/^    float *o_cpu;$/;"	m	struct:layer
o_gpu	include/darknet.h	/^    float *o_gpu;$/;"	m	struct:layer
obj	3rdparty/pthreads/include/pthread.h	/^          void    *       obj;$/;"	m	class:PThreadCleanup
obj_id	build/darknet/YoloWrapper.cs	/^            public UInt32 obj_id;        \/\/ class of object - from range [0, classes-1]$/;"	f	struct:Darknet.YoloWrapper.bbox_t
obj_id	include/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
obj_id	include/yolo_v2_class.hpp	/^    unsigned int obj_id;           \/\/ class of object - from range [0, classes-1]$/;"	m	struct:bbox_t
obj_id	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 obj_id;        \/\/ class of object - from range [0, classes-1]$/;"	f	struct:Darknet.YoloWrapper.bbox_t
obj_id_to_color	include/yolo_v2_class.hpp	/^static cv::Scalar obj_id_to_color(int obj_id) {$/;"	f
obj_normalizer	include/darknet.h	/^    float obj_normalizer;$/;"	m	struct:layer
object_scale	include/darknet.h	/^    float object_scale;$/;"	m	struct:layer
objectness	include/darknet.h	/^    float objectness;$/;"	m	struct:detection
objectness	include/darknet.h	/^    int objectness;$/;"	m	struct:layer
objectness_smooth	include/darknet.h	/^    int objectness_smooth;$/;"	m	struct:layer
objects_names_from_file	src/yolo_console_dll.cpp	/^std::vector<std::string> objects_names_from_file(std::string const filename) {$/;"	f
offset	3rdparty/stb/include/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
offset	src/httplib.h	/^  size_t offset = 0;$/;"	m	struct:httplib::MultipartFile
old_id	src/http_stream.cpp	/^    int old_id, new_id;$/;"	m	struct:similarity_detections_t	file:
old_out	3rdparty/stb/include/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon20
one_hot_encode	src/utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
one_kalman_t	include/yolo_v2_class.hpp	/^        one_kalman_t(int _stateSize = 6, int _measSize = 4, int _contrSize = 0) :$/;"	f	struct:track_kalman_t::one_kalman_t
one_kalman_t	include/yolo_v2_class.hpp	/^    struct one_kalman_t$/;"	s	class:track_kalman_t
one_off_detections	include/yolo_v2_class.hpp	/^    bool const one_off_detections;$/;"	m	class:preview_boxes_t
oneoff	src/darknet.c	/^void oneoff(char *cfgfile, char *weightfile, char *outfile)$/;"	f
onlyforward	include/darknet.h	/^    int onlyforward;$/;"	m	struct:layer
open	src/http_stream.cpp	/^    bool open(int port)$/;"	f	class:JSON_sender
open	src/http_stream.cpp	/^    bool open(int port)$/;"	f	class:MJPG_sender
openSSL_locks_	src/httplib.h	/^static std::shared_ptr<std::vector<std::mutex>> openSSL_locks_;$/;"	m	namespace:httplib::detail
operations	src/darknet.c	/^void operations(char *cfgfile)$/;"	f
operator ()	src/httplib.h	/^    void operator()() {$/;"	f	struct:httplib::ThreadPool::worker
operator ()	src/httplib.h	/^  bool operator()(const std::string &s1, const std::string &s2) const {$/;"	f	struct:httplib::detail::ci
optarg	src/getopt.c	/^char* optarg; \/* argument associated with option *\/$/;"	v
opterr	src/getopt.c	/^int opterr = 1; \/* if error message should be printed *\/$/;"	v
optimize_picture	src/nightmare.c	/^void optimize_picture(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)$/;"	f
optimized_memory	include/darknet.h	/^    int optimized_memory;$/;"	m	struct:layer
optimized_memory	include/darknet.h	/^    int optimized_memory;$/;"	m	struct:network
optind	src/getopt.c	/^int optind = 1; \/* index into parent argv vector *\/$/;"	v
option	src/getopt.c	/^struct option \/* specification for a long form option...	*\/$/;"	s	file:
option::flag	src/getopt.c	/^  int* flag; \/* where to save its status, or NULL	*\/$/;"	m	struct:option	file:
option::has_arg	src/getopt.c	/^  int has_arg; \/* does it take an argument?		*\/$/;"	m	struct:option	file:
option::name	src/getopt.c	/^  const char* name; \/* option name, without leading hyphens *\/$/;"	m	struct:option	file:
option::val	src/getopt.c	/^  int val; \/* its associated status value		*\/$/;"	m	struct:option	file:
option_find	src/option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	src/option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	src/option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	src/option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	src/option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	src/option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_find_str_quiet	src/option_list.c	/^char *option_find_str_quiet(list *l, char *key, char *def)$/;"	f
option_insert	src/option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_list.c	src/option_list.c	1;"	F
option_list.h	src/option_list.h	1;"	F
option_unused	src/option_list.c	/^void option_unused(list *l)$/;"	f
optional_argument	src/getopt.c	/^  optional_argument \/* option may take an argument		*\/$/;"	e	enum:__anon40	file:
options	src/parser.c	/^    list *options;$/;"	m	struct:__anon30	file:
options_handlers_	src/httplib.h	/^  Handlers options_handlers_;$/;"	m	class:httplib::Server
optopt	src/getopt.c	/^int optopt = '?'; \/* character checked for validity *\/$/;"	v
optreset	src/getopt.c	/^int optreset; \/* reset getopt *\/$/;"	v
optreset	src/getopt.c	12;"	d	file:
optreset	src/getopt.c	13;"	d	file:
optreset	src/getopt.h	164;"	d
order	3rdparty/stb/include/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon9
otb_get_labels.sh	scripts/windows/otb_get_labels.sh	1;"	F
out	3rdparty/stb/include/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
out	3rdparty/stb/include/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon20
out_c	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_channels	include/darknet.h	/^    int out_channels;$/;"	m	struct:layer
out_file	scripts/get_openimages_dataset.py	/^                    out_file = open("destination_path\\\\%s.txt"%bbox[0], 'w')$/;"	v
out_h	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_h	include/darknet.h	/^    int out_h;$/;"	m	struct:load_args
out_w	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_w	include/darknet.h	/^    int out_w;$/;"	m	struct:load_args
output	include/darknet.h	/^    float * output;$/;"	m	struct:layer
output	include/darknet.h	/^    float *output;$/;"	m	struct:network
output16_gpu	include/darknet.h	/^    float **output16_gpu;$/;"	m	struct:network
output_avg_gpu	include/darknet.h	/^    float * output_avg_gpu;$/;"	m	struct:layer
output_dir	build/darknet/x64/reval_voc_py3.py	/^    output_dir = os.path.abspath(args.output_dir[0])$/;"	v
output_dir	scripts/reval_voc.py	/^    output_dir = os.path.abspath(args.output_dir[0])$/;"	v
output_dir	scripts/reval_voc_py3.py	/^    output_dir = os.path.abspath(args.output_dir[0])$/;"	v
output_gpu	include/darknet.h	/^    float * output_gpu;$/;"	m	struct:layer
output_gpu	include/darknet.h	/^    float *output_gpu;$/;"	m	struct:network
output_layer	include/darknet.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
output_pinned	include/darknet.h	/^    int output_pinned;$/;"	m	struct:layer
outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:layer
outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:network
overlap	src/box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
override	src/httplib.h	/^  int read(char *ptr, size_t size) override;$/;"	m	class:httplib::BufferStream
override	src/httplib.h	/^  int read(char *ptr, size_t size) override;$/;"	m	class:httplib::SocketStream
override	src/httplib.h	/^  int write(const char *ptr) override;$/;"	m	class:httplib::BufferStream
override	src/httplib.h	/^  int write(const char *ptr) override;$/;"	m	class:httplib::SocketStream
override	src/httplib.h	/^  int write(const char *ptr, size_t size) override;$/;"	m	class:httplib::BufferStream
override	src/httplib.h	/^  int write(const char *ptr, size_t size) override;$/;"	m	class:httplib::SocketStream
override	src/httplib.h	/^  int write(const std::string &s) override;$/;"	m	class:httplib::BufferStream
override	src/httplib.h	/^  int write(const std::string &s) override;$/;"	m	class:httplib::SocketStream
override	src/httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::BufferStream
override	src/httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::SocketStream
override	src/httplib.h	/^  ~BufferStream() override = default;$/;"	m	class:httplib::BufferStream
override	src/httplib.h	/^  ~SocketStream() override;$/;"	m	class:httplib::SocketStream
override	src/httplib.h	/^  ~ThreadPool() override = default;$/;"	m	class:httplib::ThreadPool
p	3rdparty/pthreads/include/pthread.h	/^    void * p;                   \/* Pointer to actual object *\/$/;"	m	struct:__anon22
p	src/detector.c	/^    float p;$/;"	m	struct:__anon35	file:
p_constrastive	include/darknet.h	/^    float *p_constrastive;$/;"	m	struct:layer
pad	include/darknet.h	/^    int pad;$/;"	m	struct:layer
pal	3rdparty/stb/include/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon20
params	src/httplib.h	/^  Params params;$/;"	m	struct:httplib::Request
parent	include/darknet.h	/^    int *parent;$/;"	m	struct:tree
parse	3rdparty/stb/include/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon20
parse_activation	src/parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_args	build/darknet/x64/reval_voc_py3.py	/^def parse_args():$/;"	f
parse_args	scripts/log_parser/log_parser.py	/^def parse_args():$/;"	f
parse_args	scripts/reval_voc.py	/^def parse_args():$/;"	f
parse_args	scripts/reval_voc_py3.py	/^def parse_args():$/;"	f
parse_avgpool	src/parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	src/parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	src/parser.c	/^connected_layer parse_connected(list *options, size_params params)$/;"	f
parse_contrastive	src/parser.c	/^contrastive_layer parse_contrastive(list *options, size_params params)$/;"	f
parse_conv_lstm	src/parser.c	/^layer parse_conv_lstm(list *options, size_params params)$/;"	f
parse_convolutional	src/parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	src/parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	src/parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	src/parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	src/utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	src/parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_detection	src/parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	src/parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	scripts/kmeansiou.c	/^double *parse_fields(char *l, int n)$/;"	f
parse_fields	src/utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gaussian_yolo	src/parser.c	/^layer parse_gaussian_yolo(list *options, size_params params) \/\/ Gaussian_YOLOv3$/;"	f
parse_gaussian_yolo_mask	src/parser.c	/^int *parse_gaussian_yolo_mask(char *a, int *num) \/\/ Gaussian_YOLOv3$/;"	f
parse_gru	src/parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_history	src/parser.c	/^layer parse_history(list *options, size_params params)$/;"	f
parse_implicit	src/parser.c	/^layer parse_implicit(list *options, size_params params, network net)$/;"	f
parse_local	src/parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_local_avgpool	src/parser.c	/^maxpool_layer parse_local_avgpool(list *options, size_params params)$/;"	f
parse_long_options	src/getopt.c	/^parse_long_options(char* const* nargv, const char* options,$/;"	f	file:
parse_lstm	src/parser.c	/^layer parse_lstm(list *options, size_params params)$/;"	f
parse_maxpool	src/parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_multipart_boundary	src/httplib.h	/^inline bool parse_multipart_boundary(const std::string &content_type,$/;"	f	namespace:httplib::detail
parse_multipart_formdata	src/httplib.h	/^inline bool parse_multipart_formdata(const std::string &boundary,$/;"	f	namespace:httplib::detail
parse_net_options	src/parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	src/parser.c	/^network parse_network_cfg(char *filename)$/;"	f
parse_network_cfg_custom	src/parser.c	/^network parse_network_cfg_custom(char *filename, int batch, int time_steps)$/;"	f
parse_normalization	src/parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_query_text	src/httplib.h	/^inline void parse_query_text(const std::string &s, Params &params) {$/;"	f	namespace:httplib::detail
parse_range_header	src/httplib.h	/^inline bool parse_range_header(const std::string &s, Ranges &ranges) {$/;"	f	namespace:httplib::detail
parse_rec	build/darknet/x64/voc_eval_py3.py	/^def parse_rec(filename):$/;"	f
parse_rec	scripts/voc_eval.py	/^def parse_rec(filename):$/;"	f
parse_rec	scripts/voc_eval_py3.py	/^def parse_rec(filename):$/;"	f
parse_region	src/parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	src/parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_reorg_old	src/parser.c	/^layer parse_reorg_old(list *options, size_params params)$/;"	f
parse_request_line	src/httplib.h	/^inline bool Server::parse_request_line(const char *s, Request &req) {$/;"	f	class:httplib::Server
parse_rnn	src/parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	src/parser.c	/^route_layer parse_route(list *options, size_params params)$/;"	f
parse_sam	src/parser.c	/^layer parse_sam(list *options, size_params params, network net)$/;"	f
parse_scale_channels	src/parser.c	/^layer parse_scale_channels(list *options, size_params params, network net)$/;"	f
parse_shortcut	src/parser.c	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f
parse_softmax	src/parser.c	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f
parse_upsample	src/parser.c	/^layer parse_upsample(list *options, size_params params, network net)$/;"	f
parse_yolo	src/parser.c	/^layer parse_yolo(list *options, size_params params)$/;"	f
parse_yolo_mask	src/parser.c	/^int *parse_yolo_mask(char *a, int *num)$/;"	f
parser	build/darknet/x64/darknet_video.py	/^def parser():$/;"	f
parser	darknet_images.py	/^def parser():$/;"	f
parser	darknet_video.py	/^def parser():$/;"	f
parser.c	src/parser.c	1;"	F
parser.h	src/parser.h	1;"	F
partial	src/darknet.c	/^void partial(char *cfgfile, char *weightfile, char *outfile, int max)$/;"	f
partial.cmd	build/darknet/x64/partial.cmd	1;"	F
patch_handlers_	src/httplib.h	/^  Handlers patch_handlers_;$/;"	m	class:httplib::Server
patch_handlers_for_content_reader	src/httplib.h	/^  HandersForContentReader patch_handlers_for_content_reader;$/;"	m	class:httplib::Server
path	include/darknet.h	/^    char *path;$/;"	m	struct:load_args
path	src/httplib.h	/^  std::string path;$/;"	m	struct:httplib::Request
paths	include/darknet.h	/^    char **paths;$/;"	m	struct:load_args
payload_max_length_	src/httplib.h	/^  size_t payload_max_length_;$/;"	m	class:httplib::Server
pdet_num_pair	include/darknet.h	/^} det_num_pair, *pdet_num_pair;$/;"	t	typeref:struct:det_num_pair
peephole	include/darknet.h	/^    int peephole;$/;"	m	struct:layer
permute_args	src/getopt.c	/^permute_args(int panonopt_start, int panonopt_end, int opt_end,$/;"	f	file:
pid_t	3rdparty/pthreads/include/sched.h	/^   typedef int pid_t;$/;"	t
pid_t	3rdparty/pthreads/include/sched.h	/^ typedef int pid_t;$/;"	t
pinned_block_id	src/dark_cuda.c	/^static size_t pinned_block_id = 0;$/;"	v	file:
pinned_block_size	src/dark_cuda.c	/^static const size_t pinned_block_size = (size_t)1024 * 1024 * 1024 * 1;   \/\/ 1 GB block size$/;"	v	file:
pinned_index	src/dark_cuda.c	/^static size_t pinned_index = 0;$/;"	v	file:
pinned_num_of_blocks	src/dark_cuda.c	/^static size_t pinned_num_of_blocks = 0;$/;"	v	file:
pinned_ptr	src/dark_cuda.c	/^static float **pinned_ptr = NULL;$/;"	v	file:
place	src/getopt.h	/^static char* place = EMSG; \/* option letter processing *\/$/;"	v
plse_activate	src/activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_activate_kernel	src/activation_kernels.cu	/^__device__ float plse_activate_kernel(float x)$/;"	f
plse_gradient	src/activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01f : .125f;}$/;"	f
plse_gradient_kernel	src/activation_kernels.cu	/^__device__ float plse_gradient_kernel(float x){return (x < 0 || x > 1) ? .01f : .125f;}$/;"	f
pm	src/utils.c	/^void pm(int M, int N, float *A)$/;"	f
points	include/darknet.h	/^    int points; \/\/ bit-0 - center, bit-1 - top-left-corner, bit-2 - bottom-right-corner$/;"	m	struct:detection
policy	include/darknet.h	/^    learning_rate_policy policy;$/;"	m	struct:network
poll	src/httplib.h	110;"	d
pool_	src/httplib.h	/^    ThreadPool &pool_;$/;"	m	struct:httplib::ThreadPool::worker
poolingDesc	include/darknet.h	/^    cudnnPoolingDescriptor_t poolingDesc;$/;"	m	struct:layer
poolingDesc	include/darknet.h	/^    void* poolingDesc;$/;"	m	struct:layer
pop_column	src/matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f
popcnt	src/gemm.c	/^static inline uint32_t popcnt(uint32_t v) {$/;"	f	file:
popcnt128	src/gemm.c	/^static inline int popcnt128(__m128i n) {$/;"	f	file:
popcnt256	src/gemm.c	/^static inline int popcnt256(__m256i n) {$/;"	f	file:
popcnt256_custom	src/gemm.c	/^static inline int popcnt256_custom(__m256i n) {$/;"	f	file:
popcnt_64	src/gemm.c	/^static inline int popcnt_64(uint64_t val64) {$/;"	f	file:
port_	src/httplib.h	/^  const int port_;$/;"	m	class:httplib::Client
post_handlers_	src/httplib.h	/^  Handlers post_handlers_;$/;"	m	class:httplib::Server
post_handlers_for_content_reader	src/httplib.h	/^  HandersForContentReader post_handlers_for_content_reader;$/;"	m	class:httplib::Server
pow_cpu	src/blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
pow_kernel	src/blas_kernels.cu	/^__global__ void pow_kernel(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
pow_ongpu	src/blas_kernels.cu	/^extern "C" void pow_ongpu(int N, float ALPHA, float * X, int INCX, float * Y, int INCY)$/;"	f
power	include/darknet.h	/^    float power;$/;"	m	struct:network
pre_allocate_pinned_memory	src/dark_cuda.c	/^void pre_allocate_pinned_memory(const size_t size)$/;"	f
predict	build/darknet/x64/darknet.py	/^predict = lib.network_predict_ptr$/;"	v
predict	darknet.py	/^predict = lib.network_predict_ptr$/;"	v
predict	include/yolo_v2_class.hpp	/^        bbox_t predict() {$/;"	f	struct:track_kalman_t::one_kalman_t
predict	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> predict()$/;"	f	class:track_kalman_t
predict_classifier	src/classifier.c	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)$/;"	f
predict_image	build/darknet/x64/darknet.py	/^predict_image = lib.network_predict_image$/;"	v
predict_image	darknet.py	/^predict_image = lib.network_predict_image$/;"	v
predict_image_letterbox	build/darknet/x64/darknet.py	/^predict_image_letterbox = lib.network_predict_image_letterbox$/;"	v
predict_image_letterbox	darknet.py	/^predict_image_letterbox = lib.network_predict_image_letterbox$/;"	v
predict_move	src/go.c	/^void predict_move(network net, float *board, float *move, int multi)$/;"	f
predictions	src/yolo_v2_class.cpp	/^    float* predictions[NFRAMES];$/;"	m	struct:detector_gpu_t	file:
prefix	3rdparty/stb/include/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon19
prepare_batch	darknet_images.py	/^def prepare_batch(images, network, channels=3):$/;"	f
prev	3rdparty/pthreads/include/pthread.h	/^  struct ptw32_cleanup_t *prev;$/;"	m	struct:ptw32_cleanup_t	typeref:struct:ptw32_cleanup_t::ptw32_cleanup_t
prev	src/list.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
prev_bbox_vec_deque	include/yolo_v2_class.hpp	/^    std::deque<std::vector<bbox_t>> prev_bbox_vec_deque;$/;"	m	class:Detector
prev_cell_cpu	include/darknet.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer
prev_cell_gpu	include/darknet.h	/^    float *prev_cell_gpu;$/;"	m	struct:layer
prev_pts_flow	include/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow, cur_pts_flow;$/;"	m	class:Tracker_optflow
prev_pts_flow_cpu	include/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow_cpu;$/;"	m	class:Tracker_optflow
prev_pts_flow_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat prev_pts_flow_gpu, cur_pts_flow_gpu;$/;"	m	class:Tracker_optflow
prev_state	include/darknet.h	/^    float * prev_state;$/;"	m	struct:layer
prev_state_cpu	include/darknet.h	/^    float * prev_state_cpu;$/;"	m	struct:layer
prev_state_gpu	include/darknet.h	/^    float *prev_state_gpu;$/;"	m	struct:layer
preview_box_size	include/yolo_v2_class.hpp	/^    size_t const preview_box_size, bottom_offset;$/;"	m	class:preview_boxes_t
preview_box_track_id	include/yolo_v2_class.hpp	/^    std::vector<preview_box_track_t> preview_box_track_id;$/;"	m	class:preview_boxes_t
preview_box_track_t	include/yolo_v2_class.hpp	/^        preview_box_track_t() : track_id(0), obj_id(0), last_showed_frames_ago(frames_history), current_detection(false) {}$/;"	f	struct:preview_boxes_t::preview_box_track_t
preview_box_track_t	include/yolo_v2_class.hpp	/^    struct preview_box_track_t {$/;"	s	class:preview_boxes_t
preview_boxes_t	include/yolo_v2_class.hpp	/^    preview_boxes_t(size_t _preview_box_size = 100, size_t _bottom_offset = 100, bool _one_off_detections = false) :$/;"	f	class:preview_boxes_t
preview_boxes_t	include/yolo_v2_class.hpp	/^class preview_boxes_t {$/;"	c
preview_boxes_t::bottom_offset	include/yolo_v2_class.hpp	/^    size_t const preview_box_size, bottom_offset;$/;"	m	class:preview_boxes_t
preview_boxes_t::draw	include/yolo_v2_class.hpp	/^    void draw(cv::Mat draw_mat, bool show_small_boxes = false)$/;"	f	class:preview_boxes_t
preview_boxes_t::frames_history	include/yolo_v2_class.hpp	/^    enum { frames_history = 30 };    \/\/ how long to keep the history saved$/;"	e	enum:preview_boxes_t::__anon42
preview_boxes_t::one_off_detections	include/yolo_v2_class.hpp	/^    bool const one_off_detections;$/;"	m	class:preview_boxes_t
preview_boxes_t::preview_box_size	include/yolo_v2_class.hpp	/^    size_t const preview_box_size, bottom_offset;$/;"	m	class:preview_boxes_t
preview_boxes_t::preview_box_track_id	include/yolo_v2_class.hpp	/^    std::vector<preview_box_track_t> preview_box_track_id;$/;"	m	class:preview_boxes_t
preview_boxes_t::preview_box_track_t	include/yolo_v2_class.hpp	/^    struct preview_box_track_t {$/;"	s	class:preview_boxes_t
preview_boxes_t::preview_box_track_t::bbox	include/yolo_v2_class.hpp	/^        bbox_t bbox;$/;"	m	struct:preview_boxes_t::preview_box_track_t
preview_boxes_t::preview_box_track_t::current_detection	include/yolo_v2_class.hpp	/^        bool current_detection;$/;"	m	struct:preview_boxes_t::preview_box_track_t
preview_boxes_t::preview_box_track_t::last_showed_frames_ago	include/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
preview_boxes_t::preview_box_track_t::mat_obj	include/yolo_v2_class.hpp	/^        cv::Mat mat_obj, mat_resized_obj;$/;"	m	struct:preview_boxes_t::preview_box_track_t
preview_boxes_t::preview_box_track_t::mat_resized_obj	include/yolo_v2_class.hpp	/^        cv::Mat mat_obj, mat_resized_obj;$/;"	m	struct:preview_boxes_t::preview_box_track_t
preview_boxes_t::preview_box_track_t::obj_id	include/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
preview_boxes_t::preview_box_track_t::preview_box_track_t	include/yolo_v2_class.hpp	/^        preview_box_track_t() : track_id(0), obj_id(0), last_showed_frames_ago(frames_history), current_detection(false) {}$/;"	f	struct:preview_boxes_t::preview_box_track_t
preview_boxes_t::preview_box_track_t::track_id	include/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
preview_boxes_t::preview_boxes_t	include/yolo_v2_class.hpp	/^    preview_boxes_t(size_t _preview_box_size = 100, size_t _bottom_offset = 100, bool _one_off_detections = false) :$/;"	f	class:preview_boxes_t
preview_boxes_t::set	include/yolo_v2_class.hpp	/^    void set(cv::Mat src_mat, std::vector<bbox_t> result_vec)$/;"	f	class:preview_boxes_t
print_bdd_detections	src/detector.c	/^static void print_bdd_detections(FILE *fp, char *image_path, detection *dets, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_board	src/go.c	/^void print_board(float *board, int swap, int *indexes)$/;"	f
print_cocos	src/coco.c	/^void print_cocos(FILE *fp, int image_id, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f
print_cocos	src/detector.c	/^static void print_cocos(FILE *fp, char *image_path, detection *dets, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_detections	build/darknet/x64/darknet.py	/^def print_detections(detections, coordinates=False):$/;"	f
print_detections	darknet.py	/^def print_detections(detections, coordinates=False):$/;"	f
print_detector_detections	src/detector.c	/^void print_detector_detections(FILE **fps, char *id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_image	src/image.c	/^void print_image(image m)$/;"	f
print_imagenet_detections	src/detector.c	/^void print_imagenet_detections(FILE *fp, int id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_kitti_detections	src/detector.c	/^static void print_kitti_detections(FILE **fps, char *id, detection *dets, int total, int classes, int w, int h, char *outfile, char *prefix)$/;"	f	file:
print_letters	src/data.c	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	src/matrix.c	/^void print_matrix(matrix m)$/;"	f
print_network	src/network.c	/^void print_network(network net)$/;"	f
print_statistics	src/utils.c	/^void print_statistics(float *a, int n)$/;"	f
print_symbol	src/rnn.c	/^void print_symbol(int n, char **tokens){$/;"	f
print_yolo_detections	src/yolo.c	/^void print_yolo_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
prob	build/darknet/YoloWrapper.cs	/^            public float prob;           \/\/ confidence - probability that the object was found correctly$/;"	f	struct:Darknet.YoloWrapper.bbox_t
prob	include/darknet.h	/^    float *prob;$/;"	m	struct:detection
prob	include/yolo_v2_class.hpp	/^    float prob;                    \/\/ confidence - probability that the object was found correctly$/;"	m	struct:bbox_t
prob	src/csharp/YoloCSharpWrapper.cs	/^            public float prob;           \/\/ confidence - probability that the object was found correctly$/;"	f	struct:Darknet.YoloWrapper.bbox_t
probability	include/darknet.h	/^    float probability;$/;"	m	struct:layer
probs	src/box.c	/^    float **probs;$/;"	m	struct:__anon28	file:
process_and_close_socket	src/httplib.h	/^inline bool Client::process_and_close_socket($/;"	f	class:httplib::Client
process_and_close_socket	src/httplib.h	/^inline bool SSLClient::process_and_close_socket($/;"	f	class:httplib::SSLClient
process_and_close_socket	src/httplib.h	/^inline bool SSLServer::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::SSLServer
process_and_close_socket	src/httplib.h	/^inline bool Server::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::Server
process_and_close_socket	src/httplib.h	/^inline bool process_and_close_socket(bool is_client_request, socket_t sock,$/;"	f	namespace:httplib::detail
process_and_close_socket_ssl	src/httplib.h	/^inline bool process_and_close_socket_ssl($/;"	f	namespace:httplib::detail
process_batch	src/yolo_layer.c	/^void *process_batch(void* ptr)$/;"	f
process_multipart_ranges_data	src/httplib.h	/^bool process_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
process_request	src/httplib.h	/^Server::process_request(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
process_request	src/httplib.h	/^inline bool Client::process_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
progress	src/httplib.h	/^  Progress progress;$/;"	m	struct:httplib::Request
progressive	3rdparty/stb/include/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon9
propagate_liberty	src/go.c	/^void propagate_liberty(float *board, int *lib, int *visited, int row, int col, int side)$/;"	f
pthread.h	3rdparty/pthreads/include/pthread.h	1;"	F
pthread_attr_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_attr_t_ * pthread_attr_t;$/;"	t	typeref:struct:pthread_attr_t_
pthread_barrier_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_barrier_t_ * pthread_barrier_t;$/;"	t	typeref:struct:pthread_barrier_t_
pthread_barrierattr_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_barrierattr_t_ * pthread_barrierattr_t;$/;"	t	typeref:struct:pthread_barrierattr_t_
pthread_cleanup_pop	3rdparty/pthreads/include/pthread.h	763;"	d
pthread_cleanup_pop	3rdparty/pthreads/include/pthread.h	788;"	d
pthread_cleanup_pop	3rdparty/pthreads/include/pthread.h	866;"	d
pthread_cleanup_push	3rdparty/pthreads/include/pthread.h	754;"	d
pthread_cleanup_push	3rdparty/pthreads/include/pthread.h	782;"	d
pthread_cleanup_push	3rdparty/pthreads/include/pthread.h	861;"	d
pthread_cond_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_cond_t_ * pthread_cond_t;$/;"	t	typeref:struct:pthread_cond_t_
pthread_condattr_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_condattr_t_ * pthread_condattr_t;$/;"	t	typeref:struct:pthread_condattr_t_
pthread_key_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_key_t_ * pthread_key_t;$/;"	t	typeref:struct:pthread_key_t_
pthread_mutex_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_mutex_t_ * pthread_mutex_t;$/;"	t	typeref:struct:pthread_mutex_t_
pthread_mutexattr_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_mutexattr_t_ * pthread_mutexattr_t;$/;"	t	typeref:struct:pthread_mutexattr_t_
pthread_once_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_once_t_ pthread_once_t;$/;"	t	typeref:struct:pthread_once_t_
pthread_once_t_	3rdparty/pthreads/include/pthread.h	/^struct pthread_once_t_$/;"	s
pthread_once_t_::done	3rdparty/pthreads/include/pthread.h	/^  int          done;        \/* indicates if user function has been executed *\/$/;"	m	struct:pthread_once_t_
pthread_once_t_::lock	3rdparty/pthreads/include/pthread.h	/^  void *       lock;$/;"	m	struct:pthread_once_t_
pthread_once_t_::reserved1	3rdparty/pthreads/include/pthread.h	/^  int          reserved1;$/;"	m	struct:pthread_once_t_
pthread_once_t_::reserved2	3rdparty/pthreads/include/pthread.h	/^  int          reserved2;$/;"	m	struct:pthread_once_t_
pthread_rwlock_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_rwlock_t_ * pthread_rwlock_t;$/;"	t	typeref:struct:pthread_rwlock_t_
pthread_rwlockattr_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_rwlockattr_t_ * pthread_rwlockattr_t;$/;"	t	typeref:struct:pthread_rwlockattr_t_
pthread_spinlock_t	3rdparty/pthreads/include/pthread.h	/^typedef struct pthread_spinlock_t_ * pthread_spinlock_t;$/;"	t	typeref:struct:pthread_spinlock_t_
pthread_t	3rdparty/pthreads/include/pthread.h	/^typedef ptw32_handle_t pthread_t;$/;"	t
ptr	src/httplib.h	/^  const char *ptr() const {$/;"	f	class:httplib::detail::stream_line_reader
ptw32_cleanup_callback_t	3rdparty/pthreads/include/pthread.h	/^typedef void (* PTW32_CDECL ptw32_cleanup_callback_t)(void *);$/;"	t
ptw32_cleanup_t	3rdparty/pthreads/include/pthread.h	/^struct ptw32_cleanup_t$/;"	s
ptw32_cleanup_t	3rdparty/pthreads/include/pthread.h	/^typedef struct ptw32_cleanup_t ptw32_cleanup_t;$/;"	t	typeref:struct:ptw32_cleanup_t
ptw32_cleanup_t::arg	3rdparty/pthreads/include/pthread.h	/^  void *arg;$/;"	m	struct:ptw32_cleanup_t
ptw32_cleanup_t::prev	3rdparty/pthreads/include/pthread.h	/^  struct ptw32_cleanup_t *prev;$/;"	m	struct:ptw32_cleanup_t	typeref:struct:ptw32_cleanup_t::ptw32_cleanup_t
ptw32_cleanup_t::routine	3rdparty/pthreads/include/pthread.h	/^  ptw32_cleanup_callback_t routine;$/;"	m	struct:ptw32_cleanup_t
ptw32_exception	3rdparty/pthreads/include/pthread.h	/^class ptw32_exception {};$/;"	c
ptw32_exception_cancel	3rdparty/pthreads/include/pthread.h	/^class ptw32_exception_cancel : public ptw32_exception {};$/;"	c
ptw32_exception_exit	3rdparty/pthreads/include/pthread.h	/^class ptw32_exception_exit   : public ptw32_exception {};$/;"	c
ptw32_features	3rdparty/pthreads/include/pthread.h	/^enum ptw32_features {$/;"	g
ptw32_handle_t	3rdparty/pthreads/include/pthread.h	/^} ptw32_handle_t;$/;"	t	typeref:struct:__anon22
pull_batchnorm_layer	src/batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	src/connected_layer.c	/^void pull_connected_layer(connected_layer l)$/;"	f
pull_contrastive_layer_output	src/softmax_layer.c	/^void pull_contrastive_layer_output(const contrastive_layer l)$/;"	f
pull_conv_lstm_layer	src/conv_lstm_layer.c	/^void pull_conv_lstm_layer(layer l)$/;"	f
pull_convolutional_layer	src/convolutional_kernels.cu	/^void pull_convolutional_layer(convolutional_layer l)$/;"	f
pull_cost_layer	src/cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	src/crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f
pull_deconvolutional_layer	src/deconvolutional_kernels.cu	/^extern "C" void pull_deconvolutional_layer(deconvolutional_layer layer)$/;"	f
pull_gru_layer	src/gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f
pull_implicit_layer	src/representation_layer.c	/^void pull_implicit_layer(layer l)$/;"	f
pull_local_layer	src/local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f
pull_rnn_layer	src/rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f
pull_shortcut_layer	src/shortcut_layer.c	/^void pull_shortcut_layer(layer l)$/;"	f
pull_softmax_layer_output	src/softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
pull_updates	src/network_kernels.cu	/^void pull_updates(layer l)$/;"	f
pull_weights	src/network_kernels.cu	/^void pull_weights(layer l)$/;"	f
push_batchnorm_layer	src/batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	src/connected_layer.c	/^void push_connected_layer(connected_layer l)$/;"	f
push_contrastive_layer_output	src/softmax_layer.c	/^void push_contrastive_layer_output(const contrastive_layer l)$/;"	f
push_conv_lstm_layer	src/conv_lstm_layer.c	/^void push_conv_lstm_layer(layer l)$/;"	f
push_convolutional_layer	src/convolutional_kernels.cu	/^void push_convolutional_layer(convolutional_layer l)$/;"	f
push_cost_layer	src/cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	src/crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f
push_deconvolutional_layer	src/deconvolutional_kernels.cu	/^extern "C" void push_deconvolutional_layer(deconvolutional_layer layer)$/;"	f
push_gru_layer	src/gru_layer.c	/^void push_gru_layer(layer l)$/;"	f
push_implicit_layer	src/representation_layer.c	/^void push_implicit_layer(layer l)$/;"	f
push_local_layer	src/local_layer.c	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	src/rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f
push_shortcut_layer	src/shortcut_layer.c	/^void push_shortcut_layer(layer l)$/;"	f
push_updates	src/network_kernels.cu	/^void push_updates(layer l)$/;"	f
push_weights	src/network_kernels.cu	/^void push_weights(layer l)$/;"	f
put_handlers_	src/httplib.h	/^  Handlers put_handlers_;$/;"	m	class:httplib::Server
put_handlers_for_content_reader	src/httplib.h	/^  HandersForContentReader put_handlers_for_content_reader;$/;"	m	class:httplib::Server
quality	src/http_stream.cpp	/^    int quality; \/\/ jpeg compression [1..100]$/;"	m	class:MJPG_sender	file:
quantize_image	src/image.c	/^void quantize_image(image im)$/;"	f
r_cpu	include/darknet.h	/^    float *r_cpu;$/;"	m	struct:layer
r_gpu	include/darknet.h	/^    float *r_gpu;$/;"	m	struct:layer
ramp_activate	src/activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1f*x;}$/;"	f
ramp_activate_kernel	src/activation_kernels.cu	/^__device__ float ramp_activate_kernel(float x){return x*(x>0)+.1f*x;}$/;"	f
ramp_gradient	src/activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1f;}$/;"	f
ramp_gradient_kernel	src/activation_kernels.cu	/^__device__ float ramp_gradient_kernel(float x){return (x>0)+.1f;}$/;"	f
rand	include/darknet.h	/^    float * rand;$/;"	m	struct:layer
rand_gpu	include/darknet.h	/^    float * rand_gpu;$/;"	m	struct:layer
rand_int	src/utils.c	/^int rand_int(int min, int max)$/;"	f
rand_int_fast	src/utils.c	/^int rand_int_fast(int min, int max)$/;"	f
rand_normal	src/utils.c	/^float rand_normal()$/;"	f
rand_precalc_random	src/utils.c	/^float rand_precalc_random(float min, float max, float random_part)$/;"	f
rand_scale	src/utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	src/utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	src/utils.c	/^float rand_uniform(float min, float max)$/;"	f
rand_uniform_strong	src/utils.c	/^float rand_uniform_strong(float min, float max)$/;"	f
random	include/darknet.h	/^    float random;$/;"	m	struct:layer
random	include/darknet.h	/^    int random;$/;"	m	struct:network
random	src/darkunistd.h	18;"	d
random_augment_image	src/image.c	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int size)$/;"	f
random_centers	scripts/kmeansiou.c	/^void random_centers(matrix data, matrix centers){$/;"	f
random_centers	src/matrix.c	/^void random_centers(matrix data, matrix centers) {$/;"	f
random_crop_image	src/image.c	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	src/image.c	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_float	src/utils.c	/^float random_float()$/;"	f
random_float_fast	src/utils.c	/^float random_float_fast()$/;"	f
random_gen	src/utils.c	/^unsigned int random_gen()$/;"	f
random_gen_fast	src/utils.c	/^unsigned int random_gen_fast(void)$/;"	f
random_go_moves	src/go.c	/^void random_go_moves(moves m, float *boards, float *labels, int n)$/;"	f
random_index_order	src/utils.c	/^int *random_index_order(int min, int max)$/;"	f
random_matrix	src/gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f
randomize_boxes	src/data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	src/data.c	/^void randomize_data(data d)$/;"	f
randomize_network_recurrent_state	src/network.c	/^void randomize_network_recurrent_state(network net)$/;"	f
randomize_state_conv_lstm	src/conv_lstm_layer.c	/^void randomize_state_conv_lstm(layer l)$/;"	f
ranges	src/httplib.h	/^  Ranges ranges;$/;"	m	struct:httplib::Request
ratio	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
ratio	include/darknet.h	/^    float ratio;$/;"	m	struct:layer
raw_coeff	3rdparty/stb/include/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon9::__anon10
raw_data	3rdparty/stb/include/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon9::__anon10
read	3rdparty/stb/include/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon3
read	src/httplib.h	/^inline int BufferStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::BufferStream
read	src/httplib.h	/^inline int SSLSocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::SSLSocketStream
read	src/httplib.h	/^inline int SocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::SocketStream
read_all	src/utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	src/utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	src/data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_cfg	src/parser.c	/^list *read_cfg(char *filename)$/;"	f
read_content	src/httplib.h	/^bool read_content(Stream &strm, T &x, size_t payload_max_length, int &status,$/;"	f	namespace:httplib::detail
read_content	src/httplib.h	/^inline bool Server::read_content(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
read_content_chunked	src/httplib.h	/^inline bool read_content_chunked(Stream &strm, ContentReceiver out) {$/;"	f	namespace:httplib::detail
read_content_with_content_receiver	src/httplib.h	/^Server::read_content_with_content_receiver(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
read_content_with_length	src/httplib.h	/^inline bool read_content_with_length(Stream &strm, uint64_t len,$/;"	f	namespace:httplib::detail
read_content_without_length	src/httplib.h	/^inline bool read_content_without_length(Stream &strm, ContentReceiver out) {$/;"	f	namespace:httplib::detail
read_data_cfg	src/option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_file	src/httplib.h	/^inline void read_file(const std::string &path, std::string &out) {$/;"	f	namespace:httplib::detail
read_from_callbacks	3rdparty/stb/include/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon4
read_headers	src/httplib.h	/^inline bool read_headers(Stream &strm, Headers &headers) {$/;"	f	namespace:httplib::detail
read_int	src/utils.c	/^int read_int(int fd)$/;"	f
read_map	src/utils.c	/^int *read_map(char *filename)$/;"	f
read_option	src/option_list.c	/^int read_option(char *s, list *options)$/;"	f
read_response_line	src/httplib.h	/^inline bool Client::read_response_line(Stream &strm, Response &res) {$/;"	f	class:httplib::Client
read_timeout_sec_	src/httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::Client
read_timeout_sec_	src/httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::SSLSocketStream
read_timeout_sec_	src/httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::Server
read_timeout_sec_	src/httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::SocketStream
read_timeout_usec_	src/httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::Client
read_timeout_usec_	src/httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::SSLSocketStream
read_timeout_usec_	src/httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::Server
read_timeout_usec_	src/httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::SocketStream
read_tokenized_data	src/rnn.c	/^int *read_tokenized_data(char *filename, size_t *read)$/;"	f
read_tokens	src/rnn.c	/^char **read_tokens(char *filename, size_t *read)$/;"	f
read_tree	src/tree.c	/^tree *read_tree(char *filename)$/;"	f
realloc_error	src/utils.c	/^void realloc_error(const size_t size, const char * const filename, const char * const funcname, const int line)$/;"	f
recalculate_workspace_size	src/network.c	/^int recalculate_workspace_size(network *net)$/;"	f
recargchar	src/getopt.h	/^static const char recargchar[] = "option requires an argument -- %c";$/;"	v
recargstring	src/getopt.h	/^static const char recargstring[] = "option requires an argument -- %s";$/;"	v
receive	src/yolo_console_dll.cpp	/^    T receive() {$/;"	f	class:send_one_replaceable_object_t
receptive_h	include/darknet.h	/^    int receptive_h;$/;"	m	struct:layer
receptive_h_scale	include/darknet.h	/^    int receptive_h_scale;$/;"	m	struct:layer
receptive_w	include/darknet.h	/^    int receptive_w;$/;"	m	struct:layer
receptive_w_scale	include/darknet.h	/^    int receptive_w_scale;$/;"	m	struct:layer
reconstruct_picture	src/nightmare.c	/^void reconstruct_picture(network net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)$/;"	f
redirect	src/httplib.h	/^inline bool Client::redirect(const Request &req, Response &res) {$/;"	f	class:httplib::Client
redirect	src/httplib.h	/^inline bool redirect(T &cli, const Request &req, Response &res,$/;"	f	namespace:httplib::detail
redirect_count	src/httplib.h	/^  size_t redirect_count = CPPHTTPLIB_REDIRECT_MAX_COUNT;$/;"	m	struct:httplib::Request
reduce_and_expand_array_gpu	src/blas_kernels.cu	/^extern "C" void reduce_and_expand_array_gpu(const float *src_gpu, float *dst_gpu, int size, int groups)$/;"	f
reduce_and_expand_array_kernel	src/blas_kernels.cu	/^__global__  void reduce_and_expand_array_kernel(const float *src_gpu, float *dst_gpu, int current_size, int groups)$/;"	f
reduce_kernel	src/convolutional_kernels.cu	/^__global__ void reduce_kernel(float *weights, int n, int size, float *mean_arr_gpu)$/;"	f
region_layer	src/region_layer.h	/^typedef layer region_layer;$/;"	t
region_layer.c	src/region_layer.c	1;"	F
region_layer.h	src/region_layer.h	1;"	F
reject_similar_weights	src/network.c	/^void reject_similar_weights(network net, float sim_threshold)$/;"	f
release	src/http_stream.cpp	/^    bool release()$/;"	f	class:JSON_sender
release	src/http_stream.cpp	/^    bool release()$/;"	f	class:MJPG_sender
release_capture	src/image_opencv.cpp	/^extern "C" void release_capture(cap_cv* cap)$/;"	f
release_mat	src/image_opencv.cpp	/^extern "C" void release_mat(mat_cv **mat)$/;"	f
release_video_writer	src/image_opencv.cpp	/^extern "C" void release_video_writer(write_cv **output_video_writer)$/;"	f
relie_activate	src/activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01f*x;}$/;"	f
relie_activate_kernel	src/activation_kernels.cu	/^__device__ float relie_activate_kernel(float x){return (x>0) ? x : .01f*x;}$/;"	f
relie_gradient	src/activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01f;}$/;"	f
relie_gradient_kernel	src/activation_kernels.cu	/^__device__ float relie_gradient_kernel(float x){return (x>0) ? 1 : .01f;}$/;"	f
relu	src/blas.c	/^static float relu(float src) {$/;"	f	file:
relu	src/blas_kernels.cu	/^__device__ float relu(float src) {$/;"	f
relu	src/network.c	/^static float relu(float src) {$/;"	f	file:
relu6_activate	src/activations.h	/^static inline float relu6_activate(float x) { return min_val_cmp(max_val_cmp(x, 0), 6); }$/;"	f
relu6_activate_kernel	src/activation_kernels.cu	/^__device__ float relu6_activate_kernel(float x) { return min_val_cmp(max_val_cmp(x, 0), 6); }$/;"	f
relu6_gradient	src/activations.h	/^static inline float relu6_gradient(float x) { return (x > 0 && x < 6); }$/;"	f
relu6_gradient_kernel	src/activation_kernels.cu	/^__device__ float relu6_gradient_kernel(float x) { return (x > 0 && x < 6); }$/;"	f
relu_activate	src/activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_activate_kernel	src/activation_kernels.cu	/^__device__ float relu_activate_kernel(float x){return x*(x>0);}$/;"	f
relu_gradient	src/activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
relu_gradient_kernel	src/activation_kernels.cu	/^__device__ float relu_gradient_kernel(float x){return (x>0);}$/;"	f
remember_network_recurrent_state	src/network.c	/^void remember_network_recurrent_state(network net)$/;"	f
remember_state_conv_lstm	src/conv_lstm_layer.c	/^void remember_state_conv_lstm(layer l)$/;"	f
remove_connected	src/go.c	/^void remove_connected(float *b, int *lib, int p, int r, int c)$/;"	f
remove_negatives	build/darknet/x64/darknet.py	/^def remove_negatives(detections, class_names, num):$/;"	f
remove_negatives	darknet.py	/^def remove_negatives(detections, class_names, num):$/;"	f
remove_negatives_faster	darknet.py	/^def remove_negatives_faster(detections, class_names, num):$/;"	f
reorg	include/darknet.h	/^    int reorg;$/;"	m	struct:layer
reorg_cpu	src/blas.c	/^void reorg_cpu(float *x, int out_w, int out_h, int out_c, int batch, int stride, int forward, float *out)$/;"	f
reorg_kernel	src/blas_kernels.cu	/^__global__ void reorg_kernel(int N, float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
reorg_layer.c	src/reorg_layer.c	1;"	F
reorg_layer.h	src/reorg_layer.h	1;"	F
reorg_old_layer.c	src/reorg_old_layer.c	1;"	F
reorg_old_layer.h	src/reorg_old_layer.h	1;"	F
reorg_ongpu	src/blas_kernels.cu	/^extern "C" void reorg_ongpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
repack_input	src/gemm.c	/^void repack_input(float *input, float *re_packed_input, int w, int h, int c)$/;"	f
repack_input_gpu	src/im2col_kernels.cu	/^void repack_input_gpu(float *input, float *re_packed_input, int w, int h, int c)$/;"	f
repack_input_gpu_2	src/im2col_kernels.cu	/^void repack_input_gpu_2(float *input, float *re_packed_input, int w, int h, int c)$/;"	f
repack_input_gpu_bin	src/im2col_kernels.cu	/^void repack_input_gpu_bin(float *input, uint32_t *re_packed_input_bin, int w, int h, int c)$/;"	f
repack_input_kernel	src/im2col_kernels.cu	/^__global__ void repack_input_kernel(float *input, float *re_packed_input, int w, int h, int c)$/;"	f
repack_input_kernel_2	src/im2col_kernels.cu	/^__global__ void repack_input_kernel_2(float *input, float *re_packed_input, int w, int h, int c)$/;"	f
repack_input_kernel_bin	src/im2col_kernels.cu	/^__global__ void repack_input_kernel_bin(float *input, uint32_t *re_packed_input_bin, int w, int h, int c)$/;"	f
replace_image_to_label	src/utils.c	/^void replace_image_to_label(const char* input_path, char* output_path)$/;"	f
representation_layer.c	src/representation_layer.c	1;"	F
representation_layer.h	src/representation_layer.h	1;"	F
requested_cuda_version.sh	scripts/requested_cuda_version.sh	1;"	F
required_argument	src/getopt.c	/^  required_argument, \/* option always requires an argument	*\/$/;"	e	enum:__anon40	file:
resample	3rdparty/stb/include/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon11
resample_row_1	3rdparty/stb/include/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	3rdparty/stb/include/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	3rdparty/stb/include/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon9
rescale_net	src/darknet.c	/^void rescale_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rescale_weights	src/convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
rescore	include/darknet.h	/^    int rescore;$/;"	m	struct:layer
reserved1	3rdparty/pthreads/include/pthread.h	/^  int          reserved1;$/;"	m	struct:pthread_once_t_
reserved2	3rdparty/pthreads/include/pthread.h	/^  int          reserved2;$/;"	m	struct:pthread_once_t_
reset_layer	include/darknet.h	/^    struct layer *reset_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
reset_nan_and_inf	src/blas_kernels.cu	/^extern "C" void reset_nan_and_inf(float *input, size_t size)$/;"	f
reset_nan_and_inf_kernel	src/blas_kernels.cu	/^__global__ void reset_nan_and_inf_kernel(float *input, size_t size)$/;"	f
reset_network_state	src/network.c	/^void reset_network_state(network *net, int b)$/;"	f
reset_normalize_net	src/darknet.c	/^void reset_normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
reset_rnn	build/darknet/x64/darknet.py	/^reset_rnn = lib.reset_rnn$/;"	v
reset_rnn	darknet.py	/^reset_rnn = lib.reset_rnn$/;"	v
reset_rnn	src/network.c	/^void reset_rnn(network *net)$/;"	f
reset_rnn_state	src/rnn.c	/^void reset_rnn_state(network net, int b)$/;"	f
reset_wait_stream_events	src/dark_cuda.c	/^void reset_wait_stream_events() {$/;"	f
resize	include/darknet.h	/^    float resize;$/;"	m	struct:layer
resize	include/darknet.h	/^    float resize;$/;"	m	struct:load_args
resize_avgpool_layer	src/avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	src/batchnorm_layer.c	/^void resize_batchnorm_layer(layer *l, int w, int h)$/;"	f
resize_conv_lstm_layer	src/conv_lstm_layer.c	/^void resize_conv_lstm_layer(layer *l, int w, int h)$/;"	f
resize_convolutional_layer	src/convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	src/cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crnn_layer	src/crnn_layer.c	/^void resize_crnn_layer(layer *l, int w, int h)$/;"	f
resize_crop_layer	src/crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_deconvolutional_layer	src/deconvolutional_layer.c	/^void resize_deconvolutional_layer(deconvolutional_layer *l, int h, int w)$/;"	f
resize_dropout_layer	src/dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_gaussian_yolo_layer	src/gaussian_yolo_layer.c	/^void resize_gaussian_yolo_layer(layer *l, int w, int h)$/;"	f
resize_image	src/image.c	/^image resize_image(image im, int w, int h)$/;"	f
resize_implicit_layer	src/representation_layer.c	/^void resize_implicit_layer(layer *l, int w, int h)$/;"	f
resize_matrix	src/matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	src/image.c	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	src/maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_min	src/image.c	/^image resize_min(image im, int min)$/;"	f
resize_network	src/network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	src/normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	src/region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	src/reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_reorg_old_layer	src/reorg_old_layer.c	/^void resize_reorg_old_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	src/route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
resize_sam_layer	src/sam_layer.c	/^void resize_sam_layer(layer *l, int w, int h)$/;"	f
resize_scale_channels_layer	src/scale_channels_layer.c	/^void resize_scale_channels_layer(layer *l, network *net)$/;"	f
resize_shortcut_layer	src/shortcut_layer.c	/^void resize_shortcut_layer(layer *l, int w, int h, network *net)$/;"	f
resize_step	include/darknet.h	/^    int resize_step;$/;"	m	struct:network
resize_upsample_layer	src/upsample_layer.c	/^void resize_upsample_layer(layer *l, int w, int h)$/;"	f
resize_window_cv	src/image_opencv.cpp	/^extern "C" void resize_window_cv(char const* window_name, int width, int height) {}$/;"	f
resize_window_cv	src/image_opencv.cpp	/^extern "C" void resize_window_cv(char const* window_name, int width, int height)$/;"	f
resize_yolo_layer	src/yolo_layer.c	/^void resize_yolo_layer(layer *l, int w, int h)$/;"	f
resized	include/darknet.h	/^    image *resized;$/;"	m	struct:load_args
response_handler	src/httplib.h	/^  ResponseHandler response_handler;$/;"	m	struct:httplib::Request
restart_interval	3rdparty/stb/include/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon9
restore_network_recurrent_state	src/network.c	/^void restore_network_recurrent_state(network net)$/;"	f
restore_state_conv_lstm	src/conv_lstm_layer.c	/^void restore_state_conv_lstm(layer l)$/;"	f
result_vec_pred	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> result_vec_pred;$/;"	m	class:track_kalman_t
reval_voc.py	scripts/reval_voc.py	1;"	F
reval_voc_py3.py	build/darknet/x64/reval_voc_py3.py	1;"	F
reval_voc_py3.py	scripts/reval_voc_py3.py	1;"	F
reverse	include/darknet.h	/^    float reverse;$/;"	m	struct:layer
reverse_32_bit	src/gemm.c	/^uint32_t reverse_32_bit(uint32_t a)$/;"	f
reverse_32_bit	src/im2col_kernels.cu	/^__device__ uint32_t reverse_32_bit(uint32_t a)$/;"	f
reverse_8_bit	src/gemm.c	/^uint8_t reverse_8_bit(uint8_t a) {$/;"	f
reverse_8_bit	src/im2col_kernels.cu	/^__device__ __host__ uint8_t reverse_8_bit(uint8_t a) {$/;"	f
reverse_byte	src/gemm.c	/^unsigned char reverse_byte(unsigned char a)$/;"	f
reverse_byte	src/im2col_kernels.cu	/^__device__ __host__ unsigned char reverse_byte(unsigned char a)$/;"	f
reverse_byte_1	src/gemm.c	/^unsigned char reverse_byte_1(char a)$/;"	f
reverse_byte_2	src/im2col_kernels.cu	/^__device__ __host__ unsigned char reverse_byte_2(unsigned char a)$/;"	f
reverse_byte_3	src/gemm.c	/^unsigned char reverse_byte_3(unsigned char n) {$/;"	f
reverse_byte_CUDA	src/im2col_kernels.cu	/^__device__ unsigned char reverse_byte_CUDA(unsigned char a)$/;"	f
rewritten_bbox	include/darknet.h	/^    int *rewritten_bbox;$/;"	m	struct:network
rgb	3rdparty/stb/include/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon9
rgb_to_hsv	src/image.c	/^void rgb_to_hsv(image im)$/;"	f
rgb_to_hsv_kernel	src/crop_layer_kernels.cu	/^__device__ float3 rgb_to_hsv_kernel(float3 rgb)$/;"	f
rgbgr_image	build/darknet/x64/darknet.py	/^rgbgr_image = lib.rgbgr_image$/;"	v
rgbgr_image	darknet.py	/^rgbgr_image = lib.rgbgr_image$/;"	v
rgbgr_image	src/image.c	/^void rgbgr_image(image im)$/;"	f
rgbgr_net	src/darknet.c	/^void rgbgr_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rgbgr_weights	src/convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f
right	include/darknet.h	/^    float left, right, top, bot;$/;"	m	struct:boxabs
right	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:box_label
rnn.c	src/rnn.c	1;"	F
rnn_layer.c	src/rnn_layer.c	1;"	F
rnn_layer.h	src/rnn_layer.h	1;"	F
rnn_lstm.cmd	build/darknet/x64/rnn_lstm.cmd	1;"	F
rnn_tolstoy.cmd	build/darknet/x64/rnn_tolstoy.cmd	1;"	F
rnn_vid.c	src/rnn_vid.c	1;"	F
rolling_mean	include/darknet.h	/^    float * rolling_mean;$/;"	m	struct:layer
rolling_mean_gpu	include/darknet.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer
rolling_variance	include/darknet.h	/^    float * rolling_variance;$/;"	m	struct:layer
rolling_variance_gpu	include/darknet.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer
rotate	include/darknet.h	/^    int rotate;$/;"	m	struct:layer
rotate_crop_image	src/image.c	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	src/image.c	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	src/image.c	/^void rotate_image_cw(image im, int times)$/;"	f
rotate_weights_gpu	src/blas_kernels.cu	/^extern "C" void rotate_weights_gpu(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int size, int reverse)$/;"	f
rotate_weights_kernel	src/blas_kernels.cu	/^__global__  void rotate_weights_kernel(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int kernel_size, int reverse)$/;"	f
route_layer	src/route_layer.h	/^typedef layer route_layer;$/;"	t
route_layer.c	src/route_layer.c	1;"	F
route_layer.h	src/route_layer.h	1;"	F
routine	3rdparty/pthreads/include/pthread.h	/^  ptw32_cleanup_callback_t routine;$/;"	m	struct:ptw32_cleanup_t
routing	src/httplib.h	/^inline bool Server::routing(Request &req, Response &res, Stream &strm, bool last_connection) {$/;"	f	class:httplib::Server
rows	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
rows	scripts/kmeansiou.c	/^    int rows, cols;$/;"	m	struct:matrix	file:
run_art	src/art.c	/^void run_art(int argc, char **argv)$/;"	f
run_captcha	src/captcha.c	/^void run_captcha(int argc, char **argv)$/;"	f
run_char_rnn	src/rnn.c	/^void run_char_rnn(int argc, char **argv)$/;"	f
run_cifar	src/cifar.c	/^void run_cifar(int argc, char **argv)$/;"	f
run_classifier	src/classifier.c	/^void run_classifier(int argc, char **argv)$/;"	f
run_coco	src/coco.c	/^void run_coco(int argc, char **argv)$/;"	f
run_compare	src/compare.c	/^void run_compare(int argc, char **argv)$/;"	f
run_detect_in_thread	src/demo.c	/^static volatile int run_detect_in_thread = 0;$/;"	v	file:
run_detector	src/detector.c	/^void run_detector(int argc, char **argv)$/;"	f
run_dice	src/dice.c	/^void run_dice(int argc, char **argv)$/;"	f
run_fetch_in_thread	src/demo.c	/^static volatile int run_fetch_in_thread = 0;$/;"	v	file:
run_go	src/go.c	/^void run_go(int argc, char **argv)$/;"	f
run_load_data	src/data.c	/^static volatile int * run_load_data = NULL;$/;"	v	file:
run_log_parser_windows.cmd	scripts/log_parser/run_log_parser_windows.cmd	1;"	F
run_nightmare	src/nightmare.c	/^void run_nightmare(int argc, char **argv)$/;"	f
run_super	src/super.c	/^void run_super(int argc, char **argv)$/;"	f
run_swag	src/swag.c	/^void run_swag(int argc, char **argv)$/;"	f
run_tag	src/tag.c	/^void run_tag(int argc, char **argv)$/;"	f
run_thread_loop	src/data.c	/^void *run_thread_loop(void *ptr)$/;"	f
run_vid_rnn	src/rnn_vid.c	/^void run_vid_rnn(int argc, char **argv)$/;"	f
run_vid_rnn	src/rnn_vid.c	/^void run_vid_rnn(int argc, char **argv){}$/;"	f
run_voxel	src/voxel.c	/^void run_voxel(int argc, char **argv)$/;"	f
run_writing	src/writing.c	/^void run_writing(int argc, char **argv)$/;"	f
run_yolo	src/yolo.c	/^void run_yolo(int argc, char **argv)$/;"	f
running_threads_	src/httplib.h	/^  int running_threads_;$/;"	m	class:httplib::Threads
running_threads_mutex_	src/httplib.h	/^  std::mutex running_threads_mutex_;$/;"	m	class:httplib::Threads
s	3rdparty/stb/include/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon15
s	3rdparty/stb/include/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon9
sam_gpu	src/blas_kernels.cu	/^extern "C" void sam_gpu(float *in_w_h_c, int size, int channel_size, float *scales_c, float *out)$/;"	f
sam_kernel	src/blas_kernels.cu	/^__global__ void sam_kernel(float *in_w_h_c, int size, int channel_size, float *scales_c, float *out)$/;"	f
sam_layer.c	src/sam_layer.c	1;"	F
sam_layer.h	src/sam_layer.h	1;"	F
sample	scripts/kmeansiou.c	/^int *sample(int n)$/;"	f
sample	src/matrix.c	/^int *sample(int n)$/;"	f
sample_array	src/utils.c	/^int sample_array(float *a, int n)$/;"	f
sample_array_custom	src/utils.c	/^int sample_array_custom(float *a, int n)$/;"	f
saturate_exposure_image	src/image.c	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	src/image.c	/^void saturate_image(image im, float sat)$/;"	f
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:layer
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:load_args
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:network
save_annotations	darknet_images.py	/^def save_annotations(name, image, detections, class_names):$/;"	f
save_batchnorm_weights	src/parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	src/parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	src/parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	src/parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_convolutional_weights_ema	src/parser.c	/^void save_convolutional_weights_ema(layer l, FILE *fp)$/;"	f
save_cv_jpg	src/image_opencv.cpp	/^extern "C" void save_cv_jpg(mat_cv *img_src, const char *name)$/;"	f
save_cv_png	src/image_opencv.cpp	/^extern "C" void save_cv_png(mat_cv *img_src, const char *name)$/;"	f
save_delta_gpu	include/darknet.h	/^    float * save_delta_gpu;$/;"	m	struct:layer
save_gpu	include/darknet.h	/^    float * save_gpu;$/;"	m	struct:layer
save_image	src/image.c	/^void save_image(image im, const char *name)$/;"	f
save_image_jpg	src/image.c	/^void save_image_jpg(image p, const char *name)$/;"	f
save_image_options	src/image.c	/^void save_image_options(image im, const char *name, IMTYPE f, int quality)$/;"	f
save_image_png	src/image.c	/^void save_image_png(image im, const char *name)$/;"	f
save_implicit_weights	src/parser.c	/^void save_implicit_weights(layer l, FILE *fp)$/;"	f
save_mat_jpg	src/image_opencv.cpp	/^extern "C" void save_mat_jpg(cv::Mat img_src, const char *name)$/;"	f
save_mat_png	src/image_opencv.cpp	/^extern "C" void save_mat_png(cv::Mat img_src, const char *name)$/;"	f
save_reconstruction	src/rnn_vid.c	/^image save_reconstruction(network net, image *init, float *feat, char *name, int i)$/;"	f
save_shortcut_weights	src/parser.c	/^void save_shortcut_weights(layer l, FILE *fp)$/;"	f
save_weights	src/parser.c	/^void save_weights(network net, char *filename)$/;"	f
save_weights_upto	src/parser.c	/^void save_weights_upto(network net, char *filename, int cutoff, int save_ema)$/;"	f
scal_add_cpu	src/blas.c	/^void scal_add_cpu(int N, float ALPHA, float BETA, float *X, int INCX)$/;"	f
scal_add_kernel	src/blas_kernels.cu	/^__global__ void scal_add_kernel(int N, float ALPHA, float BETA, float *X, int INCX)$/;"	f
scal_add_ongpu	src/blas_kernels.cu	/^extern "C" void scal_add_ongpu(int N, float ALPHA, float BETA, float * X, int INCX)$/;"	f
scal_cpu	src/blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scal_kernel	src/blas_kernels.cu	/^__global__ void scal_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f
scal_ongpu	src/blas_kernels.cu	/^extern "C" void scal_ongpu(int N, float ALPHA, float * X, int INCX)$/;"	f
scale	include/darknet.h	/^    float scale;$/;"	m	struct:layer
scale	include/darknet.h	/^    float scale;$/;"	m	struct:network
scale	include/darknet.h	/^    int scale;$/;"	m	struct:load_args
scale_array	src/utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	src/convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_bias_gpu	src/blas_kernels.cu	/^void scale_bias_gpu(float *output, float *scale, int batch, int filters, int spatial)$/;"	f
scale_bias_kernel	src/blas_kernels.cu	/^__global__ void scale_bias_kernel(float *output, float *scale, int batch, int filters, int spatial, int current_size)$/;"	f
scale_change_gpu	include/darknet.h	/^    float * scale_change_gpu;$/;"	m	struct:layer
scale_channels_gpu	src/blas_kernels.cu	/^extern "C" void scale_channels_gpu(float *in_w_h_c, int size, int channel_size, int batch_size, int scale_wh, float *scales_c, float *out)$/;"	f
scale_channels_kernel	src/blas_kernels.cu	/^__global__ void scale_channels_kernel(float *in_w_h_c, int size, int channel_size, int batch_size, int scale_wh, float *scales_c, float *out)$/;"	f
scale_channels_layer.c	src/scale_channels_layer.c	1;"	F
scale_channels_layer.h	src/scale_channels_layer.h	1;"	F
scale_data_rows	src/data.c	/^void scale_data_rows(data d, float s)$/;"	f
scale_dropblock_kernel	src/dropout_layer_kernels.cu	/^__global__ void scale_dropblock_kernel(float *output, int size, int outputs, float *drop_blocks_scale)$/;"	f
scale_image	src/image.c	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	src/image.c	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_m	include/darknet.h	/^    float * scale_m;$/;"	m	struct:layer
scale_m_gpu	include/darknet.h	/^    float *scale_m_gpu;$/;"	m	struct:layer
scale_matrix	src/matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f
scale_updates	include/darknet.h	/^    float *scale_updates;$/;"	m	struct:layer
scale_updates_gpu	include/darknet.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer
scale_v	include/darknet.h	/^    float * scale_v;$/;"	m	struct:layer
scale_v_gpu	include/darknet.h	/^    float *scale_v_gpu;$/;"	m	struct:layer
scale_weights	src/network_kernels.cu	/^void scale_weights(layer l, float s)$/;"	f
scale_wh	include/darknet.h	/^    int scale_wh;$/;"	m	struct:layer
scale_x_y	include/darknet.h	/^    float scale_x_y;$/;"	m	struct:layer
scales	include/darknet.h	/^    float *scales;$/;"	m	struct:layer
scales	include/darknet.h	/^    float *scales;$/;"	m	struct:network
scales_ema	include/darknet.h	/^    float *scales_ema;$/;"	m	struct:layer
scales_gpu	include/darknet.h	/^    float * scales_gpu;$/;"	m	struct:layer
scan_n	3rdparty/stb/include/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon9
sched.h	3rdparty/pthreads/include/sched.h	1;"	F
sched_param	3rdparty/pthreads/include/sched.h	/^struct sched_param {$/;"	s
sched_param::sched_priority	3rdparty/pthreads/include/sched.h	/^  int sched_priority;$/;"	m	struct:sched_param
sched_priority	3rdparty/pthreads/include/sched.h	/^  int sched_priority;$/;"	m	struct:sched_param
sched_rr_get_interval	3rdparty/pthreads/include/sched.h	171;"	d
score_game	src/go.c	/^float score_game(float *board)$/;"	f
sec	src/utils.c	/^float sec(clock_t clocks)$/;"	f
sech	src/activations.h	/^static inline float sech(float x) { return 2 \/ (expf(x) + expf(-x)); }$/;"	f
sech_gpu	src/activation_kernels.cu	/^__device__ float sech_gpu(float x) { return 2 \/ (expf(x) + expf(-x)); }$/;"	f
section	src/parser.c	/^}section;$/;"	t	typeref:struct:__anon30	file:
seen	include/darknet.h	/^    uint64_t *seen;$/;"	m	struct:network
select_read	src/httplib.h	/^inline int select_read(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
selected	src/image_opencv.cpp	/^std::atomic<bool> draw_select, selected;$/;"	v
self_go	src/go.c	/^void self_go(char *filename, char *weightfile, char *f2, char *w2, int multi)$/;"	f
self_layer	include/darknet.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
selu_activate	src/activations.h	/^static inline float selu_activate(float x) { return (x >= 0)*1.0507f*x + (x < 0)*1.0507f*1.6732f*(expf(x) - 1); }$/;"	f
selu_activate_kernel	src/activation_kernels.cu	/^__device__ float selu_activate_kernel(float x) { return (x >= 0)*1.0507f*x + (x < 0)*1.0507f*1.6732f*(expf(x) - 1); }$/;"	f
selu_gradient	src/activations.h	/^static inline float selu_gradient(float x) { return (x >= 0)*1.0507f + (x < 0)*(x + 1.0507f*1.6732f); }$/;"	f
selu_gradient_kernel	src/activation_kernels.cu	/^__device__ float selu_gradient_kernel(float x) { return (x >= 0)*1.0507f + (x < 0)*(x + 1.0507f*1.6732f); }$/;"	f
sem_t	3rdparty/pthreads/include/semaphore.h	/^typedef struct sem_t_ * sem_t;$/;"	t	typeref:struct:sem_t_
semaphore.h	3rdparty/pthreads/include/semaphore.h	1;"	F
send	src/httplib.h	/^inline bool Client::send(const Request &req, Response &res) {$/;"	f	class:httplib::Client
send	src/httplib.h	/^inline bool Client::send(const std::vector<Request> &requests,$/;"	f	class:httplib::Client
send	src/yolo_console_dll.cpp	/^    void send(T const& _obj) {$/;"	f	class:send_one_replaceable_object_t
send_http_post_request	src/http_stream.cpp	/^int send_http_post_request(char *http_post_host, int server_port, const char *videosource,$/;"	f
send_json	src/http_stream.cpp	/^void send_json(detection *dets, int nboxes, int classes, char **names, long long int frame_id, int port, int timeout)$/;"	f
send_json_custom	src/http_stream.cpp	/^void send_json_custom(char const* send_buf, int port, int timeout)$/;"	f
send_json_http	include/yolo_v2_class.hpp	/^    bool send_json_http(std::vector<bbox_t> cur_bbox_vec, std::vector<std::string> obj_names, int frame_id,$/;"	f	class:Detector
send_mjpeg	src/http_stream.cpp	/^void send_mjpeg(mat_cv* mat, int port, int timeout, int quality)$/;"	f
send_one_replaceable_object_t	src/yolo_console_dll.cpp	/^    send_one_replaceable_object_t(bool _sync) : sync(_sync), a_ptr(NULL)$/;"	f	class:send_one_replaceable_object_t
send_one_replaceable_object_t	src/yolo_console_dll.cpp	/^class send_one_replaceable_object_t {$/;"	c	file:
send_one_replaceable_object_t::a_ptr	src/yolo_console_dll.cpp	/^    std::atomic<T *> a_ptr;$/;"	m	class:send_one_replaceable_object_t	file:
send_one_replaceable_object_t::is_object_present	src/yolo_console_dll.cpp	/^    bool is_object_present() {$/;"	f	class:send_one_replaceable_object_t
send_one_replaceable_object_t::receive	src/yolo_console_dll.cpp	/^    T receive() {$/;"	f	class:send_one_replaceable_object_t
send_one_replaceable_object_t::send	src/yolo_console_dll.cpp	/^    void send(T const& _obj) {$/;"	f	class:send_one_replaceable_object_t
send_one_replaceable_object_t::send_one_replaceable_object_t	src/yolo_console_dll.cpp	/^    send_one_replaceable_object_t(bool _sync) : sync(_sync), a_ptr(NULL)$/;"	f	class:send_one_replaceable_object_t
send_one_replaceable_object_t::sync	src/yolo_console_dll.cpp	/^    const bool sync;$/;"	m	class:send_one_replaceable_object_t	file:
send_with_content_provider	src/httplib.h	/^inline std::shared_ptr<Response> Client::send_with_content_provider($/;"	f	class:httplib::Client
seq_scales	include/darknet.h	/^    float *seq_scales;$/;"	m	struct:network
sequential_subdivisions	include/darknet.h	/^    int sequential_subdivisions;$/;"	m	struct:network
server_certificate_verification_	src/httplib.h	/^  bool server_certificate_verification_ = false;$/;"	m	class:httplib::SSLClient
set	include/yolo_v2_class.hpp	/^        void set(bbox_t box)$/;"	f	struct:track_kalman_t::one_kalman_t
set	include/yolo_v2_class.hpp	/^    void set(cv::Mat src_mat, std::vector<bbox_t> result_vec)$/;"	f	class:preview_boxes_t
set_base_dir	src/httplib.h	/^inline bool Server::set_base_dir(const char *dir, const char *mount_point) {$/;"	f	class:httplib::Server
set_batch_network	src/network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_bit	src/gemm.h	/^static inline void set_bit(unsigned char *const dst, size_t index) {$/;"	f
set_ca_cert_path	src/httplib.h	/^inline void SSLClient::set_ca_cert_path(const char *ca_cert_file_path,$/;"	f	class:httplib::SSLClient
set_capture_position_frame_cv	src/image_opencv.cpp	/^extern "C" int set_capture_position_frame_cv(cap_cv *cap, int index)$/;"	f
set_capture_property_cv	src/image_opencv.cpp	/^extern "C" int set_capture_property_cv(cap_cv *cap, int property_id, double value)$/;"	f
set_chunked_content_provider	src/httplib.h	/^inline void Response::set_chunked_content_provider($/;"	f	class:httplib::Response
set_content	src/httplib.h	/^inline void Response::set_content(const char *s, size_t n,$/;"	f	class:httplib::Response
set_content	src/httplib.h	/^inline void Response::set_content(const std::string &s,$/;"	f	class:httplib::Response
set_content_provider	src/httplib.h	/^inline void Response::set_content_provider($/;"	f	class:httplib::Response
set_delta_time	include/yolo_v2_class.hpp	/^        void set_delta_time(float dT) {$/;"	f	struct:track_kalman_t::one_kalman_t
set_error_handler	src/httplib.h	/^inline void Server::set_error_handler(Handler handler) {$/;"	f	class:httplib::Server
set_file_request_handler	src/httplib.h	/^inline void Server::set_file_request_handler(Handler handler) {$/;"	f	class:httplib::Server
set_gpu	build/darknet/x64/darknet.py	/^    set_gpu = lib.cuda_set_device$/;"	v
set_gpu	darknet.py	/^set_gpu = lib.cuda_set_device$/;"	v
set_header	src/httplib.h	/^inline void Request::set_header(const char *key, const char *val) {$/;"	f	class:httplib::Request
set_header	src/httplib.h	/^inline void Request::set_header(const char *key, const std::string &val) {$/;"	f	class:httplib::Request
set_header	src/httplib.h	/^inline void Response::set_header(const char *key, const char *val) {$/;"	f	class:httplib::Response
set_header	src/httplib.h	/^inline void Response::set_header(const char *key, const std::string &val) {$/;"	f	class:httplib::Response
set_keep_alive_max_count	src/httplib.h	/^inline void Client::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Client
set_keep_alive_max_count	src/httplib.h	/^inline void Server::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Server
set_logger	src/httplib.h	/^inline void Server::set_logger(Logger logger) { logger_ = std::move(logger); }$/;"	f	class:httplib::Server
set_nonblocking	src/httplib.h	/^inline void set_nonblocking(socket_t sock, bool nonblocking) {$/;"	f	namespace:httplib::detail
set_payload_max_length	src/httplib.h	/^inline void Server::set_payload_max_length(size_t length) {$/;"	f	class:httplib::Server
set_pixel	src/image.c	/^static void set_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
set_read_timeout	src/httplib.h	/^inline void Client::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Client
set_read_timeout	src/httplib.h	/^inline void Server::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Server
set_redirect	src/httplib.h	/^inline void Response::set_redirect(const char *url) {$/;"	f	class:httplib::Response
set_saved_video	build/darknet/x64/darknet_video.py	/^def set_saved_video(input_video, output_video, size):$/;"	f
set_saved_video	darknet_video.py	/^def set_saved_video(input_video, output_video, size):$/;"	f
set_scales_dropblock_kernel	src/dropout_layer_kernels.cu	/^__global__ void set_scales_dropblock_kernel(float *drop_blocks_scale, int block_size_w, int block_size_h, int outputs, int batch)$/;"	f
set_specified_workspace_limit	src/convolutional_layer.c	/^void set_specified_workspace_limit(convolutional_layer *l, size_t workspace_size_limit)$/;"	f
set_track_id	src/http_stream.cpp	/^void set_track_id(detection *new_dets, int new_dets_num, float thresh, float sim_thresh, float track_ciou_norm, int deque_size, int dets_for_track, int dets_for_show)$/;"	f
set_train_only_bn	src/parser.c	/^void set_train_only_bn(network net)$/;"	f
set_zero_kernel	src/convolutional_kernels.cu	/^__global__ void set_zero_kernel(float *src, int size)$/;"	f
sets	build/darknet/x64/data/voc/voc_label.py	/^sets=[('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test')]$/;"	v
sets	scripts/voc_label.py	/^sets=[('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test')]$/;"	v
sets	scripts/voc_label_difficult.py	/^sets=[('2012', 'val'),('2007', 'test')]$/;"	v
setup.sh	scripts/setup.sh	1;"	F
shallow	include/darknet.h	/^    int shallow;$/;"	m	struct:data
share_layer	include/darknet.h	/^    layer *share_layer;$/;"	m	struct:layer
shift	include/darknet.h	/^    float shift;$/;"	m	struct:layer
shortcut	include/darknet.h	/^    int shortcut;$/;"	m	struct:layer
shortcut_cpu	src/blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
shortcut_gpu	src/blas_kernels.cu	/^extern "C" void shortcut_gpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
shortcut_kernel	src/blas_kernels.cu	/^__global__ void shortcut_kernel(int size, int minw, int minh, int minc, int stride, int sample, int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
shortcut_layer.c	src/shortcut_layer.c	1;"	F
shortcut_layer.h	src/shortcut_layer.h	1;"	F
shortcut_multilayer_cpu	src/blas.c	/^void shortcut_multilayer_cpu(int size, int src_outputs, int batch, int n, int *outputs_of_layers, float **layers_output, float *out, float *in, float *weights, int nweights, WEIGHTS_NORMALIZATION_T weights_normalization)$/;"	f
shortcut_multilayer_gpu	src/blas_kernels.cu	/^extern "C" void shortcut_multilayer_gpu(int src_outputs, int batch, int n, int *outputs_of_layers_gpu, float **layers_output_gpu, float *out, float *in, float *weights_gpu, int nweights, WEIGHTS_NORMALIZATION_T weights_normalization)$/;"	f
shortcut_multilayer_kernel	src/blas_kernels.cu	/^__global__ void shortcut_multilayer_kernel(int size, int src_outputs, int batch, int n, int *outputs_of_layers_gpu, float **layers_output_gpu, float *out, float *in, float *weights_gpu, int nweights, WEIGHTS_NORMALIZATION_T weights_normalization)$/;"	f
shortcut_singlelayer_simple_kernel	src/blas_kernels.cu	/^__global__ void shortcut_singlelayer_simple_kernel(int size, int src_outputs, int batch, int n, int *outputs_of_layers_gpu, float **layers_output_gpu, float *out, float *in, float *weights_gpu, int nweights, WEIGHTS_NORMALIZATION_T weights_normalization)$/;"	f
show_acnhors	src/image_opencv.cpp	/^extern "C" void show_acnhors(int number_of_boxes, int num_of_clusters, float *rel_width_height_array, model anchors_data, int width, int height)$/;"	f
show_console_result	src/yolo_console_dll.cpp	/^void show_console_result(std::vector<bbox_t> const result_vec, std::vector<std::string> const obj_names, int frame_id = -1) {$/;"	f
show_cuda_cudnn_info	src/dark_cuda.c	/^void show_cuda_cudnn_info()$/;"	f
show_details	include/darknet.h	/^    int show_details;$/;"	m	struct:layer
show_image	src/image.c	/^void show_image(image p, const char *name)$/;"	f
show_image_collapsed	src/image.c	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	src/image_opencv.cpp	/^extern "C" void show_image_cv(image p, const char *name)$/;"	f
show_image_layers	src/image.c	/^void show_image_layers(image p, char *name)$/;"	f
show_image_mat	src/image_opencv.cpp	/^extern "C" void show_image_mat(mat_cv *mat_ptr, const char *name)$/;"	f
show_image_normalized	src/image.c	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	src/image.c	/^void show_images(image *ims, int n, char *window)$/;"	f
show_img	src/demo.c	/^mat_cv* show_img;$/;"	v
show_imgs	include/darknet.h	/^    int show_imgs;$/;"	m	struct:load_args
show_message	scripts/log_parser/log_parser.py	/^def show_message(message, stop=False):$/;"	f
show_opencv_info	src/image_opencv.cpp	/^extern "C" void show_opencv_info()$/;"	f
show_opencv_info	src/image_opencv.cpp	/^void show_opencv_info()$/;"	f
show_total_time	src/http_stream.cpp	/^void show_total_time() {$/;"	f
shuffle	src/utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
shutdown_	src/httplib.h	/^  bool shutdown_;$/;"	m	class:httplib::ThreadPool
shutdown_socket	src/httplib.h	/^inline int shutdown_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
side	include/darknet.h	/^    int side;$/;"	m	struct:layer
sim	include/darknet.h	/^    float sim;$/;"	m	struct:contrastive_params
sim	include/darknet.h	/^    float sim;$/;"	m	struct:detection
sim	src/http_stream.cpp	/^    float sim;$/;"	m	struct:similarity_detections_t	file:
sim_thresh	include/darknet.h	/^    float sim_thresh;$/;"	m	struct:layer
similarity_detections_t	src/http_stream.cpp	/^struct similarity_detections_t {$/;"	s	file:
similarity_detections_t::new_id	src/http_stream.cpp	/^    int old_id, new_id;$/;"	m	struct:similarity_detections_t	file:
similarity_detections_t::old_id	src/http_stream.cpp	/^    int old_id, new_id;$/;"	m	struct:similarity_detections_t	file:
similarity_detections_t::sim	src/http_stream.cpp	/^    float sim;$/;"	m	struct:similarity_detections_t	file:
simple_copy_kernel	src/blas_kernels.cu	/^__global__ void simple_copy_kernel(int size, float *src, float *dst)$/;"	f
simple_copy_ongpu	src/blas_kernels.cu	/^extern "C" void simple_copy_ongpu(int size, float *src, float *dst)$/;"	f
simple_input_shortcut_kernel	src/blas_kernels.cu	/^__global__ void simple_input_shortcut_kernel(float *in, int size, float *add, float *out)$/;"	f
size	3rdparty/stb/include/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon8
size	3rdparty/stb/include/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon12
size	3rdparty/stb/include/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
size	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
size	include/darknet.h	/^    int size;$/;"	m	struct:layer
size	src/httplib.h	/^  size_t size() const {$/;"	f	class:httplib::detail::stream_line_reader
size	src/list.h	/^    int size;$/;"	m	struct:list
size_params	src/parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	src/parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
size_params::batch	src/parser.c	/^    int batch;$/;"	m	struct:size_params	file:
size_params::c	src/parser.c	/^    int c;$/;"	m	struct:size_params	file:
size_params::h	src/parser.c	/^    int h;$/;"	m	struct:size_params	file:
size_params::index	src/parser.c	/^    int index;$/;"	m	struct:size_params	file:
size_params::inputs	src/parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
size_params::net	src/parser.c	/^    network net;$/;"	m	struct:size_params	file:
size_params::time_steps	src/parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
size_params::train	src/parser.c	/^    int train;$/;"	m	struct:size_params	file:
size_params::w	src/parser.c	/^    int w;$/;"	m	struct:size_params	file:
size_to_IEC_string	src/utils.c	/^const char * size_to_IEC_string(const size_t size)$/;"	f
skip	3rdparty/stb/include/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon3
skip_content_with_length	src/httplib.h	/^inline void skip_content_with_length(Stream &strm, uint64_t len) {$/;"	f	namespace:httplib::detail
slMat2cvMat	src/yolo_console_dll.cpp	/^cv::Mat slMat2cvMat(sl::Mat &input) {$/;"	f
smart_centers	scripts/kmeansiou.c	/^void smart_centers(matrix data, matrix centers) {$/;"	f
smooth	include/darknet.h	/^    float smooth;$/;"	m	struct:layer
smooth	src/nightmare.c	/^void smooth(image recon, image update, float lambda, int num)$/;"	f
smooth_data	src/data.c	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	src/blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
smooth_l1_gpu	src/blas_kernels.cu	/^extern "C" void smooth_l1_gpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
smooth_l1_kernel	src/blas_kernels.cu	/^__global__ void smooth_l1_kernel(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
smooth_rotate_weights_gpu	src/blas_kernels.cu	/^extern "C" void smooth_rotate_weights_gpu(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int size, int angle, int reverse)$/;"	f
smooth_rotate_weights_kernel	src/blas_kernels.cu	/^__global__  void smooth_rotate_weights_kernel(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int kernel_size, int angle, int reverse)$/;"	f
snprintf	src/httplib.h	76;"	d
sock	src/http_stream.cpp	/^    SOCKET sock;$/;"	m	class:JSON_sender	file:
sock	src/http_stream.cpp	/^    SOCKET sock;$/;"	m	class:MJPG_sender	file:
sock_	src/httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::SSLSocketStream
sock_	src/httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::SocketStream
softmax	include/darknet.h	/^    int softmax;$/;"	m	struct:layer
softmax	src/blas.c	/^void softmax(float *input, int n, float temp, float *output, int stride)$/;"	f
softmax_cpu	src/blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_device	src/blas_kernels.cu	/^__device__ void softmax_device(int n, float *input, float temp, float *output)$/;"	f
softmax_device_new_api	src/blas_kernels.cu	/^__device__ void softmax_device_new_api(float *input, int n, float temp, int stride, float *output)$/;"	f
softmax_gpu	src/blas_kernels.cu	/^extern "C" void softmax_gpu(float *input, int n, int offset, int groups, float temp, float *output)$/;"	f
softmax_gpu_new_api	src/blas_kernels.cu	/^extern "C" void softmax_gpu_new_api(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_kernel	src/blas_kernels.cu	/^__global__ void softmax_kernel(int n, int offset, int batch, float *input, float temp, float *output)$/;"	f
softmax_kernel_new_api	src/blas_kernels.cu	/^__global__ void softmax_kernel_new_api(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_layer	src/softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_layer.c	src/softmax_layer.c	1;"	F
softmax_layer.h	src/softmax_layer.h	1;"	F
softmax_tree	include/darknet.h	/^    tree *softmax_tree;$/;"	m	struct:layer
softmax_tree	src/softmax_layer.c	/^void softmax_tree(float *input, int batch, int inputs, float temp, tree *hierarchy, float *output)$/;"	f
softmax_tree_gpu	src/blas_kernels.cu	/^extern "C" void softmax_tree_gpu(float *input, int spatial, int batch, int stride, float temp, float *output, tree hier)$/;"	f
softmax_tree_kernel	src/blas_kernels.cu	/^__global__ void softmax_tree_kernel(float *input, int spatial, int batch, int stride, float temp, float *output, int groups, int *group_size, int *group_offset)$/;"	f
softmax_x_ent_cpu	src/blas.c	/^void softmax_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax_x_ent_gpu	src/blas_kernels.cu	/^extern "C" void softmax_x_ent_gpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax_x_ent_kernel	src/blas_kernels.cu	/^__global__ void softmax_x_ent_kernel(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softplus_activate	src/activations.h	/^static inline float softplus_activate(float x, float threshold) {$/;"	f
softplus_kernel	src/activation_kernels.cu	/^__device__ float softplus_kernel(float x, float threshold = 20) {$/;"	f
sort_class	include/darknet.h	/^    int sort_class;$/;"	m	struct:detection
sorta_shuffle	src/utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
sortable_bbox	src/box.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon28	file:
sortable_bbox	src/compare.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon27	file:
spatial	include/darknet.h	/^    int spatial;$/;"	m	struct:layer
spatial_mean	include/darknet.h	/^    float * spatial_mean;$/;"	m	struct:layer
spec_end	3rdparty/stb/include/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon9
spec_start	3rdparty/stb/include/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon9
speed	src/darknet.c	/^void speed(char *cfgfile, int tics)$/;"	f
split	src/httplib.h	/^template <class Fn> void split(const char *b, const char *e, char d, Fn fn) {$/;"	f	namespace:httplib::detail
split_data	src/data.c	/^data *split_data(data d, int part, int total)$/;"	f
split_str	src/utils.c	/^list *split_str(char *s, char delim)$/;"	f
sqrt	include/darknet.h	/^    int sqrt;$/;"	m	struct:layer
squared	include/darknet.h	/^    float * squared;$/;"	m	struct:layer
squared_gpu	include/darknet.h	/^    float * squared_gpu;$/;"	m	struct:layer
srandom	src/darkunistd.h	17;"	d
srcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
srcTensorDesc	include/darknet.h	/^    void* srcTensorDesc, *dstTensorDesc;$/;"	m	struct:layer
srcTensorDesc16	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc16, dstTensorDesc16;$/;"	m	struct:layer
srcTensorDesc16	include/darknet.h	/^    void* srcTensorDesc16, *dstTensorDesc16;$/;"	m	struct:layer
src_grey	include/yolo_v2_class.hpp	/^    cv::Mat src_grey;    \/\/ used in both functions$/;"	m	class:Tracker_optflow
src_grey_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat src_grey_gpu;    \/\/ used in both functions$/;"	m	class:Tracker_optflow
src_mat_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat src_mat_gpu;$/;"	m	class:Tracker_optflow
ssize_t	src/darkunistd.h	39;"	d
ssl	src/httplib.h	/^  const SSL *ssl;$/;"	m	struct:httplib::Request
ssl_	src/httplib.h	/^  SSL *ssl_;$/;"	m	class:httplib::SSLSocketStream
sslinit_	src/httplib.h	/^static SSLInit sslinit_;$/;"	m	namespace:httplib::detail
stair_activate	src/activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_activate_kernel	src/activation_kernels.cu	/^__device__ float stair_activate_kernel(float x)$/;"	f
stair_gradient	src/activations.h	/^static inline float stair_gradient(float x)$/;"	f
stair_gradient_kernel	src/activation_kernels.cu	/^__device__ float stair_gradient_kernel(float x)$/;"	f
start_timer	src/http_stream.cpp	/^void start_timer() {$/;"	f
start_timer	src/http_stream.cpp	/^void start_timer() {}$/;"	f
start_x	3rdparty/stb/include/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon20
start_y	3rdparty/stb/include/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon20
state	include/darknet.h	/^    float * state;$/;"	m	struct:layer
state	include/yolo_v2_class.hpp	/^        cv::Mat state;$/;"	m	struct:track_kalman_t::one_kalman_t
state	src/yolo_layer.c	/^    network_state state;$/;"	m	struct:train_yolo_args	file:
stateSize	include/yolo_v2_class.hpp	/^        int measSize, stateSize, contrSize;$/;"	m	struct:track_kalman_t::one_kalman_t
state_constrain	include/darknet.h	/^    int state_constrain;$/;"	m	struct:layer
state_delta	include/darknet.h	/^    float * state_delta;$/;"	m	struct:layer
state_delta_gpu	include/darknet.h	/^    float * state_delta_gpu;$/;"	m	struct:layer
state_delta_gpu	include/darknet.h	/^    float *state_delta_gpu;$/;"	m	struct:network
state_gate_layer	include/darknet.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_gpu	include/darknet.h	/^    float * state_gpu;$/;"	m	struct:layer
state_h_layer	include/darknet.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_id	include/yolo_v2_class.hpp	/^        int state_id;$/;"	m	struct:track_kalman_t::tst_t
state_layer	include/darknet.h	/^    struct layer *state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_r_layer	include/darknet.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_save_layer	include/darknet.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_state_layer	include/darknet.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_z_layer	include/darknet.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
statistics_connected_layer	src/connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f
statistics_net	src/darknet.c	/^void statistics_net(char *cfgfile, char *weightfile)$/;"	f
status	include/yolo_v2_class.hpp	/^    cv::Mat status, err;$/;"	m	class:Tracker_optflow
status	src/httplib.h	/^  int status;$/;"	m	struct:httplib::Response
status_gpu	include/yolo_v2_class.hpp	/^    cv::cuda::GpuMat status_gpu, err_gpu;$/;"	m	class:Tracker_optflow
status_message	src/httplib.h	/^inline const char *status_message(int status) {$/;"	f	namespace:httplib::detail
stb_image.h	3rdparty/stb/include/stb_image.h	1;"	F
stb_image_write.h	3rdparty/stb/include/stb_image_write.h	1;"	F
stb_image_write_test	3rdparty/stb/include/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	3rdparty/stb/include/stb_image.h	3035;"	d
stbi__EOI	3rdparty/stb/include/stb_image.h	3037;"	d
stbi__SOF	3rdparty/stb/include/stb_image.h	3038;"	d
stbi__SOF_progressive	3rdparty/stb/include/stb_image.h	3041;"	d
stbi__SOI	3rdparty/stb/include/stb_image.h	3036;"	d
stbi__SOS	3rdparty/stb/include/stb_image.h	3039;"	d
stbi__YCbCr_to_RGB_row	3rdparty/stb/include/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	3rdparty/stb/include/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__addsizes_valid	3rdparty/stb/include/stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f
stbi__at_eof	3rdparty/stb/include/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	3rdparty/stb/include/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	3rdparty/stb/include/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	3rdparty/stb/include/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__blinn_8x8	3rdparty/stb/include/stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f
stbi__bmask	3rdparty/stb/include/stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	3rdparty/stb/include/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon17
stbi__bmp_info	3rdparty/stb/include/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	3rdparty/stb/include/stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__bmp_parse_header	3rdparty/stb/include/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_test	3rdparty/stb/include/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	3rdparty/stb/include/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	3rdparty/stb/include/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	3rdparty/stb/include/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	3rdparty/stb/include/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	3rdparty/stb/include/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	3rdparty/stb/include/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	3rdparty/stb/include/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	3rdparty/stb/include/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_transparency16	3rdparty/stb/include/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f
stbi__compute_y	3rdparty/stb/include/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__compute_y_16	3rdparty/stb/include/stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f
stbi__context	3rdparty/stb/include/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon4
stbi__convert_16_to_8	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f
stbi__convert_8_to_16	3rdparty/stb/include/stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f
stbi__convert_format	3rdparty/stb/include/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__convert_format16	3rdparty/stb/include/stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	3rdparty/stb/include/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	3rdparty/stb/include/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	3rdparty/stb/include/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	3rdparty/stb/include/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	3rdparty/stb/include/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	3rdparty/stb/include/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	3rdparty/stb/include/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	3rdparty/stb/include/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	3rdparty/stb/include/stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	3rdparty/stb/include/stb_image.h	3162;"	d
stbi__div4	3rdparty/stb/include/stb_image.h	3113;"	d
stbi__do_png	3rdparty/stb/include/stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)$/;"	f
stbi__do_zlib	3rdparty/stb/include/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__end_write_file	3rdparty/stb/include/stb_image_write.h	/^static void stbi__end_write_file(stbi__write_context *s)$/;"	f
stbi__err	3rdparty/stb/include/stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	3rdparty/stb/include/stb_image.h	926;"	d
stbi__err	3rdparty/stb/include/stb_image.h	928;"	d
stbi__err	3rdparty/stb/include/stb_image.h	930;"	d
stbi__errpf	3rdparty/stb/include/stb_image.h	933;"	d
stbi__errpuc	3rdparty/stb/include/stb_image.h	934;"	d
stbi__expand_png_palette	3rdparty/stb/include/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	3rdparty/stb/include/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	3rdparty/stb/include/stb_image.h	2114;"	d
stbi__fill_bits	3rdparty/stb/include/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	3rdparty/stb/include/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1)$/;"	f
stbi__float2fixed	3rdparty/stb/include/stb_image.h	3318;"	d
stbi__float2int	3rdparty/stb/include/stb_image.h	1586;"	d
stbi__float_postprocess	3rdparty/stb/include/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	3rdparty/stb/include/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__free_jpeg_components	3rdparty/stb/include/stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f
stbi__fsh	3rdparty/stb/include/stb_image.h	2115;"	d
stbi__g_failure_reason	3rdparty/stb/include/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	3rdparty/stb/include/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	3rdparty/stb/include/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	3rdparty/stb/include/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	3rdparty/stb/include/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	3rdparty/stb/include/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	3rdparty/stb/include/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	3rdparty/stb/include/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	3rdparty/stb/include/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	3rdparty/stb/include/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon20
stbi__gif_header	3rdparty/stb/include/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	3rdparty/stb/include/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	3rdparty/stb/include/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	3rdparty/stb/include/stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__gif_load_next	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	3rdparty/stb/include/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon19
stbi__gif_parse_colortable	3rdparty/stb/include/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	3rdparty/stb/include/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	3rdparty/stb/include/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	3rdparty/stb/include/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	3rdparty/stb/include/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	3rdparty/stb/include/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	3rdparty/stb/include/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	3rdparty/stb/include/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	3rdparty/stb/include/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	3rdparty/stb/include/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__hdr_test	3rdparty/stb/include/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	3rdparty/stb/include/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f
stbi__hdr_to_ldr	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	3rdparty/stb/include/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	3rdparty/stb/include/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon8
stbi__idct_block	3rdparty/stb/include/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	3rdparty/stb/include/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	3rdparty/stb/include/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__int16	3rdparty/stb/include/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	3rdparty/stb/include/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	3rdparty/stb/include/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	3rdparty/stb/include/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	3rdparty/stb/include/stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	3rdparty/stb/include/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon9
stbi__jpeg_decode_block	3rdparty/stb/include/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	3rdparty/stb/include/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	3rdparty/stb/include/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	3rdparty/stb/include/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_dezigzag	3rdparty/stb/include/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	3rdparty/stb/include/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	3rdparty/stb/include/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	3rdparty/stb/include/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	3rdparty/stb/include/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	3rdparty/stb/include/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	3rdparty/stb/include/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	3rdparty/stb/include/stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__jpeg_reset	3rdparty/stb/include/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	3rdparty/stb/include/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	3rdparty/stb/include/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	3rdparty/stb/include/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	3rdparty/stb/include/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_and_postprocess_16bit	3rdparty/stb/include/stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_and_postprocess_8bit	3rdparty/stb/include/stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_main	3rdparty/stb/include/stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__loadf_main	3rdparty/stb/include/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__mad2sizes_valid	3rdparty/stb/include/stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f
stbi__mad3sizes_valid	3rdparty/stb/include/stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f
stbi__mad4sizes_valid	3rdparty/stb/include/stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f
stbi__malloc	3rdparty/stb/include/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__malloc_mad2	3rdparty/stb/include/stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f
stbi__malloc_mad3	3rdparty/stb/include/stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f
stbi__malloc_mad4	3rdparty/stb/include/stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f
stbi__mul2sizes_valid	3rdparty/stb/include/stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f
stbi__out_gif_code	3rdparty/stb/include/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	3rdparty/stb/include/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	3rdparty/stb/include/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	3rdparty/stb/include/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	3rdparty/stb/include/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncompressed_block	3rdparty/stb/include/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	3rdparty/stb/include/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	3rdparty/stb/include/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	3rdparty/stb/include/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	3rdparty/stb/include/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	3rdparty/stb/include/stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)$/;"	f
stbi__pic_load_core	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	3rdparty/stb/include/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon18
stbi__pic_test	3rdparty/stb/include/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	3rdparty/stb/include/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	3rdparty/stb/include/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon15
stbi__png_info	3rdparty/stb/include/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	3rdparty/stb/include/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	3rdparty/stb/include/stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__png_test	3rdparty/stb/include/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	3rdparty/stb/include/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon14
stbi__pnm_getinteger	3rdparty/stb/include/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	3rdparty/stb/include/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	3rdparty/stb/include/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	3rdparty/stb/include/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	3rdparty/stb/include/stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__pnm_skip_whitespace	3rdparty/stb/include/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	3rdparty/stb/include/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	3rdparty/stb/include/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	3rdparty/stb/include/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	3rdparty/stb/include/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_decode_rle	3rdparty/stb/include/stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f
stbi__psd_info	3rdparty/stb/include/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	3rdparty/stb/include/stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__psd_test	3rdparty/stb/include/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	3rdparty/stb/include/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	3rdparty/stb/include/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon11
stbi__resample_row_generic	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	3rdparty/stb/include/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	3rdparty/stb/include/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	3rdparty/stb/include/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__result_info	3rdparty/stb/include/stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon6
stbi__rewind	3rdparty/stb/include/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	3rdparty/stb/include/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	3rdparty/stb/include/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	3rdparty/stb/include/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	3rdparty/stb/include/stb_image.h	/^static int stbi__sse2_available(void)$/;"	f
stbi__start_callbacks	3rdparty/stb/include/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	3rdparty/stb/include/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	3rdparty/stb/include/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__start_write_callbacks	3rdparty/stb/include/stb_image_write.h	/^static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context)$/;"	f
stbi__start_write_file	3rdparty/stb/include/stb_image_write.h	/^static int stbi__start_write_file(stbi__write_context *s, const char *filename)$/;"	f
stbi__stdio_callbacks	3rdparty/stb/include/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	3rdparty/stb/include/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	3rdparty/stb/include/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	3rdparty/stb/include/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__stdio_write	3rdparty/stb/include/stb_image_write.h	/^static void stbi__stdio_write(void *context, void *data, int size)$/;"	f
stbi__tga_get_comp	3rdparty/stb/include/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	3rdparty/stb/include/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	3rdparty/stb/include/stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__tga_read_rgb16	3rdparty/stb/include/stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	3rdparty/stb/include/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	3rdparty/stb/include/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	3rdparty/stb/include/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	3rdparty/stb/include/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	3rdparty/stb/include/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	3rdparty/stb/include/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertical_flip	3rdparty/stb/include/stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f
stbi__vertically_flip_on_load	3rdparty/stb/include/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__write_context	3rdparty/stb/include/stb_image_write.h	/^} stbi__write_context;$/;"	t	typeref:struct:__anon1
stbi__zbuf	3rdparty/stb/include/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon13
stbi__zbuild_huffman	3rdparty/stb/include/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	3rdparty/stb/include/stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v
stbi__zdefault_length	3rdparty/stb/include/stb_image.h	/^static const stbi_uc stbi__zdefault_length[288] =$/;"	v
stbi__zdist_base	3rdparty/stb/include/stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	3rdparty/stb/include/stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	3rdparty/stb/include/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	3rdparty/stb/include/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	3rdparty/stb/include/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon12
stbi__zhuffman_decode	3rdparty/stb/include/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	3rdparty/stb/include/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	3rdparty/stb/include/stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	3rdparty/stb/include/stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	3rdparty/stb/include/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	3rdparty/stb/include/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	3rdparty/stb/include/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	3rdparty/stb/include/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	3rdparty/stb/include/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	3rdparty/stb/include/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	3rdparty/stb/include/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	3rdparty/stb/include/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	3rdparty/stb/include/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	3rdparty/stb/include/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	3rdparty/stb/include/stb_image.h	522;"	d
stbi_inline	3rdparty/stb/include/stb_image.h	524;"	d
stbi_inline	3rdparty/stb/include/stb_image.h	527;"	d
stbi_io_callbacks	3rdparty/stb/include/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon3
stbi_is_hdr	3rdparty/stb/include/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	3rdparty/stb/include/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	3rdparty/stb/include/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	3rdparty/stb/include/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	3rdparty/stb/include/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	3rdparty/stb/include/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	3rdparty/stb/include/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16	3rdparty/stb/include/stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16_from_callbacks	3rdparty/stb/include/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_16_from_memory	3rdparty/stb/include/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_from_callbacks	3rdparty/stb/include/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	3rdparty/stb/include/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file_16	3rdparty/stb/include/stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	3rdparty/stb/include/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	3rdparty/stb/include/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	3rdparty/stb/include/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	3rdparty/stb/include/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	3rdparty/stb/include/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	3rdparty/stb/include/stb_image.h	558;"	d
stbi_lrot	3rdparty/stb/include/stb_image.h	560;"	d
stbi_set_flip_vertically_on_load	3rdparty/stb/include/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	3rdparty/stb/include/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	3rdparty/stb/include/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_us	3rdparty/stb/include/stb_image.h	/^typedef unsigned short stbi_us;$/;"	t
stbi_write_bmp	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_core	3rdparty/stb/include/stb_image_write.h	/^static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_to_func	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_func	3rdparty/stb/include/stb_image_write.h	/^typedef void stbi_write_func(void *context, void *data, int size);$/;"	t
stbi_write_hdr	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_hdr_core	3rdparty/stb/include/stb_image_write.h	/^static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data)$/;"	f
stbi_write_hdr_to_func	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const float *data)$/;"	f
stbi_write_jpg	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_jpg(char const *filename, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_jpg_core	3rdparty/stb/include/stb_image_write.h	/^static int stbi_write_jpg_core(stbi__write_context *s, int width, int height, int comp, const void* data, int quality) {$/;"	f
stbi_write_jpg_to_func	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_png	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_func	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	3rdparty/stb/include/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_core	3rdparty/stb/include/stb_image_write.h	/^static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data)$/;"	f
stbi_write_tga_to_func	3rdparty/stb/include/stb_image_write.h	/^STBIWDEF int stbi_write_tga_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_with_rle	3rdparty/stb/include/stb_image_write.h	/^int stbi_write_tga_with_rle = 1;$/;"	v
stbi_write_tga_with_rle	3rdparty/stb/include/stb_image_write.h	/^static int stbi_write_tga_with_rle = 1;$/;"	v
stbi_zlib_compress	3rdparty/stb/include/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	3rdparty/stb/include/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	3rdparty/stb/include/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	3rdparty/stb/include/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	3rdparty/stb/include/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	3rdparty/stb/include/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	3rdparty/stb/include/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	3rdparty/stb/include/stb_image_write.h	743;"	d
stbiw__crc32	3rdparty/stb/include/stb_image_write.h	/^static unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__jpg_DCT	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__jpg_DCT(float *d0p, float *d1p, float *d2p, float *d3p, float *d4p, float *d5p, float *d6p, float *d7p) {$/;"	f
stbiw__jpg_ZigZag	3rdparty/stb/include/stb_image_write.h	/^static const unsigned char stbiw__jpg_ZigZag[] = { 0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,$/;"	v
stbiw__jpg_calcBits	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__jpg_calcBits(int val, unsigned short bits[2]) {$/;"	f
stbiw__jpg_processDU	3rdparty/stb/include/stb_image_write.h	/^static int stbiw__jpg_processDU(stbi__write_context *s, int *bitBuf, int *bitCnt, float *CDU, float *fdtbl, int DC, const unsigned short HTDC[256][2], const unsigned short HTAC[256][2]) {$/;"	f
stbiw__jpg_writeBits	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__jpg_writeBits(stbi__write_context *s, int *bitBufP, int *bitCntP, const unsigned short *bs) {$/;"	f
stbiw__linear_to_rgbe	3rdparty/stb/include/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	3rdparty/stb/include/stb_image_write.h	493;"	d
stbiw__outfile	3rdparty/stb/include/stb_image_write.h	/^static int stbiw__outfile(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
stbiw__paeth	3rdparty/stb/include/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__putc	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__putc(stbi__write_context *s, unsigned char c)$/;"	f
stbiw__sbcount	3rdparty/stb/include/stb_image_write.h	675;"	d
stbiw__sbfree	3rdparty/stb/include/stb_image_write.h	676;"	d
stbiw__sbgrow	3rdparty/stb/include/stb_image_write.h	672;"	d
stbiw__sbgrowf	3rdparty/stb/include/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	3rdparty/stb/include/stb_image_write.h	667;"	d
stbiw__sbmaybegrow	3rdparty/stb/include/stb_image_write.h	671;"	d
stbiw__sbn	3rdparty/stb/include/stb_image_write.h	668;"	d
stbiw__sbneedgrow	3rdparty/stb/include/stb_image_write.h	670;"	d
stbiw__sbpush	3rdparty/stb/include/stb_image_write.h	674;"	d
stbiw__sbraw	3rdparty/stb/include/stb_image_write.h	666;"	d
stbiw__wp32	3rdparty/stb/include/stb_image_write.h	896;"	d
stbiw__wpcrc	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	3rdparty/stb/include/stb_image_write.h	895;"	d
stbiw__wptag	3rdparty/stb/include/stb_image_write.h	897;"	d
stbiw__write3	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c)$/;"	f
stbiw__write_dump_data	3rdparty/stb/include/stb_image_write.h	/^void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	3rdparty/stb/include/stb_image_write.h	/^void stbiw__write_hdr_scanline(stbi__write_context *s, int width, int ncomp, unsigned char *scratch, float *scanline)$/;"	f
stbiw__write_pixel	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__write_pixel(stbi__write_context *s, int rgb_dir, int comp, int write_alpha, int expand_mono, unsigned char *d)$/;"	f
stbiw__write_pixels	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__write_pixels(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
stbiw__write_run_data	3rdparty/stb/include/stb_image_write.h	/^void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte)$/;"	f
stbiw__writef	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__writef(stbi__write_context *s, const char *fmt, ...)$/;"	f
stbiw__writefv	3rdparty/stb/include/stb_image_write.h	/^static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v)$/;"	f
stbiw__zhash	3rdparty/stb/include/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	3rdparty/stb/include/stb_image_write.h	732;"	d
stbiw__zlib_bitrev	3rdparty/stb/include/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	3rdparty/stb/include/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	3rdparty/stb/include/stb_image_write.h	731;"	d
stbiw__zlib_flushf	3rdparty/stb/include/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	3rdparty/stb/include/stb_image_write.h	740;"	d
stbiw__zlib_huff1	3rdparty/stb/include/stb_image_write.h	736;"	d
stbiw__zlib_huff2	3rdparty/stb/include/stb_image_write.h	737;"	d
stbiw__zlib_huff3	3rdparty/stb/include/stb_image_write.h	738;"	d
stbiw__zlib_huff4	3rdparty/stb/include/stb_image_write.h	739;"	d
stbiw__zlib_huffa	3rdparty/stb/include/stb_image_write.h	734;"	d
stbiw__zlib_huffb	3rdparty/stb/include/stb_image_write.h	741;"	d
stbiw_uint32	3rdparty/stb/include/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
steady_end	src/http_stream.cpp	/^static std::chrono::steady_clock::time_point steady_start, steady_end;$/;"	v	file:
steady_start	src/http_stream.cpp	/^static std::chrono::steady_clock::time_point steady_start, steady_end;$/;"	v	file:
step	3rdparty/stb/include/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon20
step	include/darknet.h	/^    int step;$/;"	m	struct:network
steps	include/darknet.h	/^    int   *steps;$/;"	m	struct:network
steps	include/darknet.h	/^    int steps;$/;"	m	struct:layer
stop	src/httplib.h	/^inline void Server::stop() {$/;"	f	class:httplib::Server
stop_timer	src/http_stream.cpp	/^void stop_timer() {$/;"	f
stop_timer	src/http_stream.cpp	/^void stop_timer() {}$/;"	f
stop_timer_and_show	src/http_stream.cpp	/^void stop_timer_and_show() {$/;"	f
stop_timer_and_show_name	src/http_stream.cpp	/^void stop_timer_and_show_name(char *name) { stop_timer_and_show(); }$/;"	f
stop_timer_and_show_name	src/http_stream.cpp	/^void stop_timer_and_show_name(char *name) {$/;"	f
stopbackward	include/darknet.h	/^    int stopbackward;$/;"	m	struct:layer
stored_c_cpu	include/darknet.h	/^    float *stored_c_cpu;$/;"	m	struct:layer
stored_c_gpu	include/darknet.h	/^    float *stored_c_gpu;$/;"	m	struct:layer
stored_h_cpu	include/darknet.h	/^    float *stored_h_cpu;$/;"	m	struct:layer
stored_h_gpu	include/darknet.h	/^    float *stored_h_gpu;$/;"	m	struct:layer
str2int	build/darknet/x64/darknet_video.py	/^def str2int(video_path):$/;"	f
str2int	darknet_video.py	/^def str2int(video_path):$/;"	f
strcasecmp	src/httplib.h	105;"	d
stream	include/darknet.h	/^    int stream;$/;"	m	struct:layer
stream	include/yolo_v2_class.hpp	/^    cv::cuda::Stream stream;$/;"	m	class:Tracker_optflow
streamInit	src/dark_cuda.c	/^static int streamInit[16] = { 0 };$/;"	v	file:
stream_line_reader	src/httplib.h	/^  stream_line_reader(Stream &strm, char *fixed_buffer, size_t fixed_buffer_size)$/;"	f	class:httplib::detail::stream_line_reader
stream_line_reader	src/httplib.h	/^class stream_line_reader {$/;"	c	namespace:httplib::detail
streamsArray	src/dark_cuda.c	/^static cudaStream_t streamsArray[16];    \/\/ cudaStreamSynchronize( get_cuda_stream() );$/;"	v	file:
stretch	include/darknet.h	/^    int stretch;$/;"	m	struct:layer
stretch_sway	include/darknet.h	/^    int stretch_sway;$/;"	m	struct:layer
stretch_sway_flip_weights_gpu	src/blas_kernels.cu	/^extern "C" void stretch_sway_flip_weights_gpu(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int size, int angle, int reverse)$/;"	f
stretch_sway_flip_weights_kernel	src/blas_kernels.cu	/^__global__  void stretch_sway_flip_weights_kernel(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int kernel_size, float angle, int reverse)$/;"	f
stretch_weights_gpu	src/blas_kernels.cu	/^extern "C" void stretch_weights_gpu(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int size, float scale, int reverse)$/;"	f
stretch_weights_kernel	src/blas_kernels.cu	/^__global__  void stretch_weights_kernel(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int kernel_size, float scale, int reverse)$/;"	f
stride	include/darknet.h	/^    int stride;$/;"	m	struct:layer
stride_x	include/darknet.h	/^    int stride_x;$/;"	m	struct:layer
stride_y	include/darknet.h	/^    int stride_y;$/;"	m	struct:layer
string_to_board	src/go.c	/^void string_to_board(char *s, float *board)$/;"	f
string_to_layer_type	src/parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	src/utils.c	/^void strip(char *s)$/;"	f
strip_args	src/utils.c	/^void strip_args(char *s)$/;"	f
strip_char	src/utils.c	/^void strip_char(char *s, char bad)$/;"	f
strm	src/httplib.h	/^  z_stream strm;$/;"	m	class:httplib::detail::decompressor
strm_	src/httplib.h	/^  Stream &strm_;$/;"	m	class:httplib::detail::stream_line_reader
subdivisions	include/darknet.h	/^    int subdivisions;$/;"	m	struct:network
succ_high	3rdparty/stb/include/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon9
succ_low	3rdparty/stb/include/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon9
suffix	3rdparty/stb/include/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon19
suicide_go	src/go.c	/^int suicide_go(float *b, int p, int r, int c)$/;"	f
sum_array	src/utils.c	/^float sum_array(float *a, int n)$/;"	f
sum_of_mults	src/blas_kernels.cu	/^extern "C" void sum_of_mults(float *a1, float *a2, float *b1, float *b2,  size_t size, float *dst)$/;"	f
sum_of_mults_kernel	src/blas_kernels.cu	/^__global__ void sum_of_mults_kernel(float *a1, float *a2, float *b1, float *b2, size_t size, float *dst)$/;"	f
sums	include/darknet.h	/^    float ** sums;$/;"	m	struct:layer
super.c	src/super.c	1;"	F
supp_kernel	src/blas_kernels.cu	/^__global__ void supp_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f
supp_ongpu	src/blas_kernels.cu	/^extern "C" void supp_ongpu(int N, float ALPHA, float * X, int INCX)$/;"	f
svr_sock_	src/httplib.h	/^  std::atomic<socket_t> svr_sock_;$/;"	m	class:httplib::Server
swag.c	src/swag.c	1;"	F
swap	src/gemm.c	370;"	d	file:
swap	src/im2col_kernels.cu	555;"	d	file:
swap_binary	src/convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f
sway	include/darknet.h	/^    int sway;$/;"	m	struct:layer
sway_and_flip_weights_gpu	src/blas_kernels.cu	/^extern "C" void sway_and_flip_weights_gpu(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int size, int angle, int reverse)$/;"	f
sway_and_flip_weights_kernel	src/blas_kernels.cu	/^__global__  void sway_and_flip_weights_kernel(const float *src_weight_gpu, float *weight_deform_gpu, int nweights, int n, int kernel_size, int angle, int reverse)$/;"	f
switchBlasHandle	src/dark_cuda.c	/^static cublasHandle_t switchBlasHandle[16];$/;"	v	file:
switchBlasInit	src/dark_cuda.c	/^static int switchBlasInit[16] = { 0 };$/;"	v	file:
switchCudnnHandle	src/dark_cuda.c	/^static cudnnHandle_t switchCudnnHandle[16];$/;"	v	file:
switchCudnnInit	src/dark_cuda.c	/^static int switchCudnnInit[16];$/;"	v	file:
switchEventsArray	src/dark_cuda.c	/^static cudaEvent_t switchEventsArray[1024];$/;"	v	file:
switchStreamInit	src/dark_cuda.c	/^static int switchStreamInit[16] = { 0 };$/;"	v	file:
switchStreamsArray	src/dark_cuda.c	/^static cudaStream_t switchStreamsArray[16];$/;"	v	file:
switch_stream	src/dark_cuda.c	/^cudaStream_t switch_stream(int i) {$/;"	f
sync	src/yolo_console_dll.cpp	/^    const bool sync;$/;"	m	class:send_one_replaceable_object_t	file:
sync_PyrLKOpticalFlow	include/yolo_v2_class.hpp	/^    cv::Ptr<cv::SparsePyrLKOpticalFlow> sync_PyrLKOpticalFlow;$/;"	m	class:Tracker_optflow
sync_PyrLKOpticalFlow_gpu	include/yolo_v2_class.hpp	/^    cv::Ptr<cv::cuda::SparsePyrLKOpticalFlow> sync_PyrLKOpticalFlow_gpu;$/;"	m	class:Tracker_optflow
sync_args	src/network_kernels.cu	/^} sync_args;$/;"	t	typeref:struct:__anon39	file:
sync_layer	src/network_kernels.cu	/^void sync_layer(network *nets, int n, int j)$/;"	f
sync_layer_in_thread	src/network_kernels.cu	/^pthread_t sync_layer_in_thread(network *nets, int n, int j)$/;"	f
sync_layer_thread	src/network_kernels.cu	/^void *sync_layer_thread(void *ptr)$/;"	f
sync_nets	src/network_kernels.cu	/^void sync_nets(network *nets, int n, int interval)$/;"	f
t	include/darknet.h	/^    int *t;$/;"	m	struct:network
t	include/darknet.h	/^    int t;$/;"	m	struct:layer
t	include/darknet.h	/^    int t;$/;"	m	struct:update_args
t_bit_input	include/darknet.h	/^    char *t_bit_input;$/;"	m	struct:layer
tag.c	src/tag.c	1;"	F
tanh	include/darknet.h	/^    int tanh;$/;"	m	struct:layer
tanh_activate	src/activations.h	/^static inline float tanh_activate(float x) { return (2 \/ (1 + expf(-2 * x)) - 1); }$/;"	f
tanh_activate_kernel	src/activation_kernels.cu	/^__device__ float tanh_activate_kernel(float x){return (2\/(1 + expf(-2*x)) - 1);}$/;"	f
tanh_gradient	src/activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
tanh_gradient_kernel	src/activation_kernels.cu	/^__device__ float tanh_gradient_kernel(float x){return 1-x*x;}$/;"	f
target	src/httplib.h	/^  std::string target;$/;"	m	struct:httplib::Request
temp2_cpu	include/darknet.h	/^    float *temp2_cpu;$/;"	m	struct:layer
temp2_gpu	include/darknet.h	/^    float *temp2_gpu;$/;"	m	struct:layer
temp3_cpu	include/darknet.h	/^    float *temp3_cpu;$/;"	m	struct:layer
temp3_gpu	include/darknet.h	/^    float *temp3_gpu;$/;"	m	struct:layer
temp_cpu	include/darknet.h	/^    float *temp_cpu;$/;"	m	struct:layer
temp_gpu	include/darknet.h	/^    float *temp_gpu;$/;"	m	struct:layer
temperature	include/darknet.h	/^    float temperature;$/;"	m	struct:layer
test_box	src/box.c	/^void test_box()$/;"	f
test_captcha	src/captcha.c	/^void test_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_char_rnn	src/rnn.c	/^void test_char_rnn(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)$/;"	f
test_cifar	src/cifar.c	/^void test_cifar(char *filename, char *weightfile)$/;"	f
test_cifar_csv	src/cifar.c	/^void test_cifar_csv(char *filename, char *weightfile)$/;"	f
test_cifar_csvtrain	src/cifar.c	/^void test_cifar_csvtrain(char *filename, char *weightfile)$/;"	f
test_cifar_multi	src/cifar.c	/^void test_cifar_multi(char *filename, char *weightfile)$/;"	f
test_classifier	src/classifier.c	/^void test_classifier(char *datacfg, char *cfgfile, char *weightfile, int target_layer)$/;"	f
test_coco	src/coco.c	/^void test_coco(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
test_convolutional_layer	src/convolutional_layer.c	/^void test_convolutional_layer()$/;"	f
test_detector	src/detector.c	/^void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh,$/;"	f
test_dice	src/dice.c	/^void test_dice(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_dintersect	src/box.c	/^void test_dintersect()$/;"	f
test_dunion	src/box.c	/^void test_dunion()$/;"	f
test_go	src/go.c	/^void test_go(char *cfg, char *weights, int multi)$/;"	f
test_gpu_accuracy	src/gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	src/gemm.c	/^int test_gpu_blas()$/;"	f
test_resize	src/image.c	/^void test_resize(char *filename)$/;"	f
test_super	src/super.c	/^void test_super(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_tactic_rnn	src/rnn.c	/^void test_tactic_rnn(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f
test_tag	src/tag.c	/^void test_tag(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_voxel	src/voxel.c	/^void test_voxel(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_writing	src/writing.c	/^void test_writing(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_yolo	src/yolo.c	/^void test_yolo(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
this_thread_sleep_for	src/http_stream.cpp	/^void this_thread_sleep_for(int ms_time)$/;"	f
this_thread_yield	src/http_stream.cpp	/^void this_thread_yield()$/;"	f
thread_init_	src/httplib.h	/^  SSLThreadLocks thread_init_;$/;"	m	class:httplib::detail::SSLInit
thread_wait_ms	src/data.c	/^static const int thread_wait_ms = 5;$/;"	v	file:
thread_wait_ms	src/demo.c	/^static const int thread_wait_ms = 1;$/;"	v	file:
threads	include/darknet.h	/^    int threads;$/;"	m	struct:load_args
threads	src/data.c	/^static pthread_t* threads = NULL;$/;"	v	file:
threads_	src/httplib.h	/^  std::vector<std::thread> threads_;$/;"	m	class:httplib::ThreadPool
threat_classifier	src/classifier.c	/^void threat_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
three_way_max	src/image.c	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	src/image.c	/^float three_way_min(float a, float b, float c)$/;"	f
thresh	include/darknet.h	/^    float thresh;$/;"	m	struct:layer
threshold_image	src/image.c	/^image threshold_image(image im, float thresh)$/;"	f
tile_images	src/image.c	/^image tile_images(image a, image b, int dx)$/;"	f
time	src/network_kernels.cu	/^    float time;$/;"	m	struct:time_benchmark_layers	file:
time_benchmark_layers	src/network_kernels.cu	/^typedef struct time_benchmark_layers {$/;"	s	file:
time_benchmark_layers	src/network_kernels.cu	/^} time_benchmark_layers;$/;"	t	typeref:struct:time_benchmark_layers	file:
time_benchmark_layers::layer_id	src/network_kernels.cu	/^    int layer_id, layer_type;$/;"	m	struct:time_benchmark_layers	file:
time_benchmark_layers::layer_type	src/network_kernels.cu	/^    int layer_id, layer_type;$/;"	m	struct:time_benchmark_layers	file:
time_benchmark_layers::time	src/network_kernels.cu	/^    float time;$/;"	m	struct:time_benchmark_layers	file:
time_comparator	src/network_kernels.cu	/^int time_comparator(const void *pa, const void *pb)$/;"	f
time_gpu_random_matrix	src/gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_normalizer	include/darknet.h	/^    float time_normalizer;$/;"	m	struct:layer
time_ongpu	src/gemm.c	/^void time_ongpu(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	src/gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_step_i	include/darknet.h	/^    int time_step_i, time_step_j;$/;"	m	struct:contrastive_params
time_step_j	include/darknet.h	/^    int time_step_i, time_step_j;$/;"	m	struct:contrastive_params
time_steps	include/darknet.h	/^    int time_steps;$/;"	m	struct:network
time_steps	src/parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
timeout	src/http_stream.cpp	/^    int timeout; \/\/ master sock timeout, shutdown after timeout usec.$/;"	m	class:JSON_sender	file:
timeout	src/http_stream.cpp	/^    int timeout; \/\/ master sock timeout, shutdown after timeout usec.$/;"	m	class:MJPG_sender	file:
timeout_sec_	src/httplib.h	/^  time_t timeout_sec_;$/;"	m	class:httplib::Client
timersub	src/gettimeofday.h	13;"	d
timespec	3rdparty/pthreads/include/pthread.h	/^struct timespec {$/;"	s
timespec::tv_nsec	3rdparty/pthreads/include/pthread.h	/^        long tv_nsec;$/;"	m	struct:timespec
timespec::tv_sec	3rdparty/pthreads/include/pthread.h	/^        time_t tv_sec;$/;"	m	struct:timespec
tisnan	src/region_layer.c	/^float tisnan(float x)$/;"	f
tmp	build/darknet/x64/darknet.py	/^            tmp = os.environ["FORCE_CPU"].lower()$/;"	v
to_lower	src/httplib.h	/^inline std::string to_lower(const char *beg, const char *end) {$/;"	f	namespace:httplib::detail
to_tblr	src/box.c	/^boxabs to_tblr(box a) {$/;"	f
to_utf8	src/httplib.h	/^inline size_t to_utf8(int code, char *buff) {$/;"	f	namespace:httplib::detail
todo	3rdparty/stb/include/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon9
top	include/darknet.h	/^    float left, right, top, bot;$/;"	m	struct:boxabs
top	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:box_label
top_k	src/utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_max_index	src/utils.c	/^int top_max_index(float *a, int n, int k)$/;"	f
top_predictions	src/network.c	/^void top_predictions(network net, int k, int *index)$/;"	f
tot_giou_loss	src/yolo_layer.c	/^    float tot_giou_loss;$/;"	m	struct:train_yolo_args	file:
tot_iou	src/yolo_layer.c	/^    float tot_iou;$/;"	m	struct:train_yolo_args	file:
tot_iou_loss	src/yolo_layer.c	/^    float tot_iou_loss;$/;"	m	struct:train_yolo_args	file:
total	include/darknet.h	/^    int total;$/;"	m	struct:layer
total_bbox	include/darknet.h	/^    int *total_bbox;$/;"	m	struct:network
total_compares	src/compare.c	/^int total_compares = 0;$/;"	v
total_time	src/http_stream.cpp	/^static double total_time;$/;"	v	file:
total_time	src/http_stream.cpp	/^void total_time() {}$/;"	f
tq	3rdparty/stb/include/stb_image.h	/^      int tq;$/;"	m	struct:__anon9::__anon10
track	include/darknet.h	/^    int track;$/;"	m	struct:load_args
track	include/darknet.h	/^    int track;$/;"	m	struct:network
track_ciou_norm	include/darknet.h	/^    float track_ciou_norm;$/;"	m	struct:layer
track_history_size	include/darknet.h	/^    int track_history_size;$/;"	m	struct:layer
track_id	build/darknet/YoloWrapper.cs	/^            public UInt32 track_id;      \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	f	struct:Darknet.YoloWrapper.bbox_t
track_id	include/darknet.h	/^    int track_id;$/;"	m	struct:box_label
track_id	include/darknet.h	/^    int track_id;$/;"	m	struct:detection
track_id	include/yolo_v2_class.hpp	/^        int track_id;$/;"	m	struct:track_kalman_t::tst_t
track_id	include/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
track_id	include/yolo_v2_class.hpp	/^    unsigned int track_id;         \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	m	struct:bbox_t
track_id	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 track_id;      \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	f	struct:Darknet.YoloWrapper.bbox_t
track_id	src/yolo_v2_class.cpp	/^    unsigned int *track_id;$/;"	m	struct:detector_gpu_t	file:
track_id_counter	include/yolo_v2_class.hpp	/^    int track_id_counter;$/;"	m	class:track_kalman_t
track_id_state_id_time	include/yolo_v2_class.hpp	/^    std::vector<tst_t> track_id_state_id_time;$/;"	m	class:track_kalman_t
track_kalman_t	include/yolo_v2_class.hpp	/^    track_kalman_t(int _max_objects = 1000, int _min_frames = 3, float _max_dist = 40, cv::Size _img_size = cv::Size(10000, 10000)) :$/;"	f	class:track_kalman_t
track_kalman_t	include/yolo_v2_class.hpp	/^class track_kalman_t$/;"	c
track_kalman_t::calc_dt	include/yolo_v2_class.hpp	/^    float calc_dt() {$/;"	f	class:track_kalman_t
track_kalman_t::clear_old_states	include/yolo_v2_class.hpp	/^    void clear_old_states() {$/;"	f	class:track_kalman_t
track_kalman_t::correct	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> correct(std::vector<bbox_t> result_vec)$/;"	f	class:track_kalman_t
track_kalman_t::dT	include/yolo_v2_class.hpp	/^    float dT;$/;"	m	class:track_kalman_t
track_kalman_t::find_state_ids	include/yolo_v2_class.hpp	/^    std::vector<tst_t> find_state_ids(std::vector<bbox_t> result_vec)$/;"	f	class:track_kalman_t
track_kalman_t::get_distance	include/yolo_v2_class.hpp	/^    static float get_distance(float src_x, float src_y, float dst_x, float dst_y) {$/;"	f	class:track_kalman_t
track_kalman_t::get_state_id	include/yolo_v2_class.hpp	/^    tst_t get_state_id(bbox_t find_box, std::vector<bool> &busy_vec)$/;"	f	class:track_kalman_t
track_kalman_t::global_last_time	include/yolo_v2_class.hpp	/^    std::chrono::steady_clock::time_point global_last_time;$/;"	m	class:track_kalman_t
track_kalman_t::img_size	include/yolo_v2_class.hpp	/^    cv::Size img_size;  \/\/ max value of x,y,w,h$/;"	m	class:track_kalman_t
track_kalman_t::kalman_vec	include/yolo_v2_class.hpp	/^    std::vector<one_kalman_t> kalman_vec;$/;"	m	class:track_kalman_t
track_kalman_t::max_dist	include/yolo_v2_class.hpp	/^    const float max_dist;   \/\/ max distance (in px) to track with the same ID$/;"	m	class:track_kalman_t
track_kalman_t::max_objects	include/yolo_v2_class.hpp	/^    int max_objects;    \/\/ max objects for tracking$/;"	m	class:track_kalman_t
track_kalman_t::min_frames	include/yolo_v2_class.hpp	/^    int min_frames;     \/\/ min frames to consider an object as detected$/;"	m	class:track_kalman_t
track_kalman_t::new_state_id	include/yolo_v2_class.hpp	/^    tst_t new_state_id(std::vector<bool> &busy_vec)$/;"	f	class:track_kalman_t
track_kalman_t::one_kalman_t	include/yolo_v2_class.hpp	/^    struct one_kalman_t$/;"	s	class:track_kalman_t
track_kalman_t::one_kalman_t::contrSize	include/yolo_v2_class.hpp	/^        int measSize, stateSize, contrSize;$/;"	m	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::correct	include/yolo_v2_class.hpp	/^        void correct(bbox_t box) {$/;"	f	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::initialize_kalman	include/yolo_v2_class.hpp	/^        void initialize_kalman()$/;"	f	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::kf	include/yolo_v2_class.hpp	/^        cv::KalmanFilter kf;$/;"	m	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::meas	include/yolo_v2_class.hpp	/^        cv::Mat meas;$/;"	m	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::measSize	include/yolo_v2_class.hpp	/^        int measSize, stateSize, contrSize;$/;"	m	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::one_kalman_t	include/yolo_v2_class.hpp	/^        one_kalman_t(int _stateSize = 6, int _measSize = 4, int _contrSize = 0) :$/;"	f	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::predict	include/yolo_v2_class.hpp	/^        bbox_t predict() {$/;"	f	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::set	include/yolo_v2_class.hpp	/^        void set(bbox_t box)$/;"	f	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::set_delta_time	include/yolo_v2_class.hpp	/^        void set_delta_time(float dT) {$/;"	f	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::state	include/yolo_v2_class.hpp	/^        cv::Mat state;$/;"	m	struct:track_kalman_t::one_kalman_t
track_kalman_t::one_kalman_t::stateSize	include/yolo_v2_class.hpp	/^        int measSize, stateSize, contrSize;$/;"	m	struct:track_kalman_t::one_kalman_t
track_kalman_t::predict	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> predict()$/;"	f	class:track_kalman_t
track_kalman_t::result_vec_pred	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> result_vec_pred;$/;"	m	class:track_kalman_t
track_kalman_t::track_id_counter	include/yolo_v2_class.hpp	/^    int track_id_counter;$/;"	m	class:track_kalman_t
track_kalman_t::track_id_state_id_time	include/yolo_v2_class.hpp	/^    std::vector<tst_t> track_id_state_id_time;$/;"	m	class:track_kalman_t
track_kalman_t::track_kalman_t	include/yolo_v2_class.hpp	/^    track_kalman_t(int _max_objects = 1000, int _min_frames = 3, float _max_dist = 40, cv::Size _img_size = cv::Size(10000, 10000)) :$/;"	f	class:track_kalman_t
track_kalman_t::tst_t	include/yolo_v2_class.hpp	/^    struct tst_t {$/;"	s	class:track_kalman_t
track_kalman_t::tst_t::detection_count	include/yolo_v2_class.hpp	/^        int detection_count;$/;"	m	struct:track_kalman_t::tst_t
track_kalman_t::tst_t::last_time	include/yolo_v2_class.hpp	/^        std::chrono::steady_clock::time_point last_time;$/;"	m	struct:track_kalman_t::tst_t
track_kalman_t::tst_t::state_id	include/yolo_v2_class.hpp	/^        int state_id;$/;"	m	struct:track_kalman_t::tst_t
track_kalman_t::tst_t::track_id	include/yolo_v2_class.hpp	/^        int track_id;$/;"	m	struct:track_kalman_t::tst_t
track_kalman_t::tst_t::tst_t	include/yolo_v2_class.hpp	/^        tst_t() : track_id(-1), state_id(-1) {}$/;"	f	struct:track_kalman_t::tst_t
tracking_flow	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> tracking_flow(cv::Mat dst_mat, bool check_error = true)$/;"	f	class:Tracker_optflow
tracking_flow	include/yolo_v2_class.hpp	/^    std::vector<bbox_t> tracking_flow(cv::Mat new_dst_mat, bool check_error = true)$/;"	f	class:Tracker_optflow
tracking_id	src/yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::tracking_id(std::vector<bbox_t> cur_bbox_vec, bool const change_history,$/;"	f	class:Detector
train	include/darknet.h	/^    int train;$/;"	m	struct:layer
train	include/darknet.h	/^    int train;$/;"	m	struct:network
train	include/darknet.h	/^    int train;$/;"	m	struct:network_state
train	src/parser.c	/^    int train;$/;"	m	struct:size_params	file:
train_args	src/network_kernels.cu	/^} train_args;$/;"	t	typeref:struct:__anon38	file:
train_captcha	src/captcha.c	/^void train_captcha(char *cfgfile, char *weightfile)$/;"	f
train_char_rnn	src/rnn.c	/^void train_char_rnn(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)$/;"	f
train_cifar	src/cifar.c	/^void train_cifar(char *cfgfile, char *weightfile)$/;"	f
train_cifar_distill	src/cifar.c	/^void train_cifar_distill(char *cfgfile, char *weightfile)$/;"	f
train_classifier	src/classifier.c	/^void train_classifier(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int dontuse_opencv, int dont_show, int mjpeg_port, int calc_topk, int show_imgs, char* chart_path)$/;"	f
train_coco	src/coco.c	/^void train_coco(char *cfgfile, char *weightfile)$/;"	f
train_compare	src/compare.c	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f
train_detector	src/detector.c	/^void train_detector(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int dont_show, int calc_map, float thresh, float iou_thresh, int mjpeg_port, int show_imgs, int benchmark_layers, char* chart_path)$/;"	f
train_dice	src/dice.c	/^void train_dice(char *cfgfile, char *weightfile)$/;"	f
train_go	src/go.c	/^void train_go(char *cfgfile, char *weightfile)$/;"	f
train_images_num	include/darknet.h	/^    int train_images_num;$/;"	m	struct:network
train_network	src/network.c	/^float train_network(network net, data d)$/;"	f
train_network_batch	src/network.c	/^float train_network_batch(network net, data d, int n)$/;"	f
train_network_datum	src/network.c	/^float train_network_datum(network net, float *x, float *y)$/;"	f
train_network_datum_gpu	src/network_kernels.cu	/^float train_network_datum_gpu(network net, float *x, float *y)$/;"	f
train_network_in_thread	src/network_kernels.cu	/^pthread_t train_network_in_thread(network net, data d, float *err)$/;"	f
train_network_sgd	src/network.c	/^float train_network_sgd(network net, data d, int n)$/;"	f
train_network_waitkey	src/network.c	/^float train_network_waitkey(network net, data d, int wait_key)$/;"	f
train_networks	src/network_kernels.cu	/^float train_networks(network *nets, int n, data d, int interval)$/;"	f
train_only_bn	include/darknet.h	/^    int train_only_bn;$/;"	m	struct:layer
train_super	src/super.c	/^void train_super(char *cfgfile, char *weightfile)$/;"	f
train_swag	src/swag.c	/^void train_swag(char *cfgfile, char *weightfile)$/;"	f
train_tag	src/tag.c	/^void train_tag(char *cfgfile, char *weightfile, int clear)$/;"	f
train_thread	src/network_kernels.cu	/^void *train_thread(void *ptr)$/;"	f
train_vid_rnn	src/rnn_vid.c	/^void train_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
train_voc.cmd	build/darknet/x64/train_voc.cmd	1;"	F
train_voxel	src/voxel.c	/^void train_voxel(char *cfgfile, char *weightfile)$/;"	f
train_writing	src/writing.c	/^void train_writing(char *cfgfile, char *weightfile)$/;"	f
train_yolo	src/yolo.c	/^void train_yolo(char *cfgfile, char *weightfile)$/;"	f
train_yolo_args	src/yolo_layer.c	/^typedef struct train_yolo_args {$/;"	s	file:
train_yolo_args	src/yolo_layer.c	/^} train_yolo_args;$/;"	t	typeref:struct:train_yolo_args	file:
train_yolo_args::b	src/yolo_layer.c	/^    int b;$/;"	m	struct:train_yolo_args	file:
train_yolo_args::class_count	src/yolo_layer.c	/^    int class_count;$/;"	m	struct:train_yolo_args	file:
train_yolo_args::count	src/yolo_layer.c	/^    int count;$/;"	m	struct:train_yolo_args	file:
train_yolo_args::l	src/yolo_layer.c	/^    layer l;$/;"	m	struct:train_yolo_args	file:
train_yolo_args::state	src/yolo_layer.c	/^    network_state state;$/;"	m	struct:train_yolo_args	file:
train_yolo_args::tot_giou_loss	src/yolo_layer.c	/^    float tot_giou_loss;$/;"	m	struct:train_yolo_args	file:
train_yolo_args::tot_iou	src/yolo_layer.c	/^    float tot_iou;$/;"	m	struct:train_yolo_args	file:
train_yolo_args::tot_iou_loss	src/yolo_layer.c	/^    float tot_iou_loss;$/;"	m	struct:train_yolo_args	file:
translate_array	src/utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	src/data.c	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	src/image.c	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	src/image.c	/^void translate_image_channel(image im, int c, float v)$/;"	f
transparent	3rdparty/stb/include/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
transpose32_optimized	src/gemm.c	/^void transpose32_optimized(uint32_t A[32]) {$/;"	f
transpose32_optimized	src/im2col_kernels.cu	/^__device__ void transpose32_optimized(uint32_t A[32]) {$/;"	f
transpose4x4_SSE	src/gemm.c	/^static inline void transpose4x4_SSE(float *A, float *B, const int lda, const int ldb)$/;"	f	file:
transpose8rS32_reversed_diagonale	src/gemm.c	/^void transpose8rS32_reversed_diagonale(unsigned char* A, unsigned char* B, int m, int n)$/;"	f
transpose8rS32_reversed_diagonale	src/im2col_kernels.cu	/^__device__ void transpose8rS32_reversed_diagonale(unsigned char* A, unsigned char* B, int m, int n)$/;"	f
transpose_32x32_bits_reversed_diagonale	src/gemm.c	/^void transpose_32x32_bits_reversed_diagonale(uint32_t *A, uint32_t *B, int m, int n)$/;"	f
transpose_32x32_bits_reversed_diagonale	src/im2col_kernels.cu	/^__device__ void transpose_32x32_bits_reversed_diagonale(uint32_t *A, uint32_t *B, int m, int n)$/;"	f
transpose_8x8_bits_my	src/gemm.c	/^void transpose_8x8_bits_my(unsigned char *A, unsigned char *B, int lda, int ldb)$/;"	f
transpose_bin	src/gemm.c	/^void transpose_bin(uint32_t *A, uint32_t *B, const int n, const int m,$/;"	f
transpose_bin_gpu	src/im2col_kernels.cu	/^void transpose_bin_gpu(unsigned char *A, unsigned char *B, const int n, const int m,$/;"	f
transpose_bin_gpu_kernel	src/im2col_kernels.cu	/^__global__ void transpose_bin_gpu_kernel(unsigned char *A, unsigned char *B, const int n, const int m,$/;"	f
transpose_bin_gpu_kernel_32	src/im2col_kernels.cu	/^__global__ void transpose_bin_gpu_kernel_32(uint32_t *A, uint32_t *B, const int n, const int m,$/;"	f
transpose_block_SSE4x4	src/gemm.c	/^void transpose_block_SSE4x4(float *A, float *B, const int n, const int m,$/;"	f
transpose_image	src/image.c	/^void transpose_image(image im)$/;"	f
transpose_matrix	src/parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
transpose_scalar_block	src/gemm.c	/^static inline void transpose_scalar_block(float *A, float *B, const int lda, const int ldb, const int block_size)$/;"	f	file:
transpose_uint32	src/gemm.c	/^void transpose_uint32(uint32_t *src, uint32_t *dst, int src_h, int src_w, int src_align, int dst_align)$/;"	f
transpose_uint32_gpu	src/im2col_kernels.cu	/^void transpose_uint32_gpu(uint32_t *src, uint32_t *dst, int src_h, int src_w, int src_align, int dst_align)$/;"	f
transpose_uint32_gpu_2	src/im2col_kernels.cu	/^void transpose_uint32_gpu_2(uint32_t *src, uint32_t *dst, int src_h, int src_w, int src_align, int dst_align)$/;"	f
transpose_uint32_kernel	src/im2col_kernels.cu	/^__global__ void transpose_uint32_kernel(uint32_t *src, uint32_t *dst, int src_h, int src_w, int src_align, int dst_align)$/;"	f
transpose_uint32_kernel_2	src/im2col_kernels.cu	/^__global__ void transpose_uint32_kernel_2(uint32_t *src, uint32_t *dst, int src_h, int src_w, int src_align, int dst_align)$/;"	f
transposed_align_workspace_gpu	include/darknet.h	/^    float *transposed_align_workspace_gpu;$/;"	m	struct:layer
tree	include/darknet.h	/^typedef struct tree tree;$/;"	t	typeref:struct:tree
tree	include/darknet.h	/^typedef struct tree {$/;"	s
tree	include/darknet.h	/^} tree;$/;"	t	typeref:struct:tree
tree.c	src/tree.c	1;"	F
tree.h	src/tree.h	1;"	F
tree::child	include/darknet.h	/^    int *child;$/;"	m	struct:tree
tree::group	include/darknet.h	/^    int *group;$/;"	m	struct:tree
tree::group_offset	include/darknet.h	/^    int *group_offset;$/;"	m	struct:tree
tree::group_size	include/darknet.h	/^    int *group_size;$/;"	m	struct:tree
tree::groups	include/darknet.h	/^    int groups;$/;"	m	struct:tree
tree::leaf	include/darknet.h	/^    int *leaf;$/;"	m	struct:tree
tree::n	include/darknet.h	/^    int n;$/;"	m	struct:tree
tree::name	include/darknet.h	/^    char **name;$/;"	m	struct:tree
tree::parent	include/darknet.h	/^    int *parent;$/;"	m	struct:tree
trim	src/utils.c	/^void trim(char *str)$/;"	f
truth	include/darknet.h	/^    float *truth;$/;"	m	struct:network
truth	include/darknet.h	/^    float *truth;$/;"	m	struct:network_state
truth	include/darknet.h	/^    int truth;$/;"	m	struct:layer
truth_flag	src/detector.c	/^    int truth_flag;$/;"	m	struct:__anon35	file:
truth_gpu	include/darknet.h	/^    float **truth_gpu;$/;"	m	struct:network
truth_size	include/darknet.h	/^    int truth_size;$/;"	m	struct:layer
truth_size	include/darknet.h	/^    int truth_size;$/;"	m	struct:load_args
truth_thresh	include/darknet.h	/^    float truth_thresh;$/;"	m	struct:layer
truths	include/darknet.h	/^    int truths;$/;"	m	struct:layer
truths	include/darknet.h	/^    int truths;$/;"	m	struct:network
try_classifier	src/classifier.c	/^void try_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)$/;"	f
try_fix_nan	include/darknet.h	/^    int try_fix_nan;$/;"	m	struct:network
tst_t	include/yolo_v2_class.hpp	/^        tst_t() : track_id(-1), state_id(-1) {}$/;"	f	struct:track_kalman_t::tst_t
tst_t	include/yolo_v2_class.hpp	/^    struct tst_t {$/;"	s	class:track_kalman_t
tv_nsec	3rdparty/pthreads/include/pthread.h	/^        long tv_nsec;$/;"	m	struct:timespec
tv_sec	3rdparty/pthreads/include/pthread.h	/^        time_t tv_sec;$/;"	m	struct:timespec
type	3rdparty/stb/include/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon14
type	3rdparty/stb/include/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
type	include/darknet.h	/^    LAYER_TYPE type;$/;"	m	struct:layer
type	include/darknet.h	/^    data_type type;$/;"	m	struct:load_args
type	src/parser.c	/^    char *type;$/;"	m	struct:__anon30	file:
uc	include/darknet.h	/^    float *uc; \/\/ Gaussian_YOLOv3 - tx,ty,tw,th uncertainty$/;"	m	struct:detection
uc_normalizer	include/darknet.h	/^    float uc_normalizer;$/;"	m	struct:layer
uf	include/darknet.h	/^    struct layer *uf;$/;"	m	struct:layer	typeref:struct:layer::layer
ug	include/darknet.h	/^    struct layer *ug;$/;"	m	struct:layer	typeref:struct:layer::layer
uh	include/darknet.h	/^    struct layer *uh;$/;"	m	struct:layer	typeref:struct:layer::layer
ui	include/darknet.h	/^    struct layer *ui;$/;"	m	struct:layer	typeref:struct:layer::layer
uint_rand	src/utils.c	/^unsigned int uint_rand(unsigned int less_than)$/;"	f
unique_truth_index	src/detector.c	/^    int unique_truth_index;$/;"	m	struct:__anon35	file:
unlink	src/darkunistd.h	31;"	d
unsupervised	include/darknet.h	/^    int unsupervised;$/;"	m	struct:network
uo	include/darknet.h	/^    struct layer *uo;$/;"	m	struct:layer	typeref:struct:layer::layer
update	include/darknet.h	/^    void(*update)    (struct layer, int, float, float, float);$/;"	m	struct:layer
update_args	include/darknet.h	/^typedef struct update_args {$/;"	s
update_args	include/darknet.h	/^} update_args;$/;"	t	typeref:struct:update_args
update_args::B1	include/darknet.h	/^    float B1;$/;"	m	struct:update_args
update_args::B2	include/darknet.h	/^    float B2;$/;"	m	struct:update_args
update_args::adam	include/darknet.h	/^    int adam;$/;"	m	struct:update_args
update_args::batch	include/darknet.h	/^    int batch;$/;"	m	struct:update_args
update_args::decay	include/darknet.h	/^    float decay;$/;"	m	struct:update_args
update_args::eps	include/darknet.h	/^    float eps;$/;"	m	struct:update_args
update_args::learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:update_args
update_args::momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:update_args
update_args::t	include/darknet.h	/^    int t;$/;"	m	struct:update_args
update_batchnorm_layer	src/batchnorm_layer.c	/^void update_batchnorm_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void update_batchnorm_layer_gpu(layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
update_connected_layer	src/connected_layer.c	/^void update_connected_layer(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_connected_layer_gpu	src/connected_layer.c	/^void update_connected_layer_gpu(connected_layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
update_conv_lstm_layer	src/conv_lstm_layer.c	/^void update_conv_lstm_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_conv_lstm_layer_gpu	src/conv_lstm_layer.c	/^void update_conv_lstm_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_convolutional_layer	src/convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, int batch, float learning_rate_init, float momentum, float decay)$/;"	f
update_convolutional_layer_gpu	src/convolutional_kernels.cu	/^void update_convolutional_layer_gpu(layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
update_crnn_layer	src/crnn_layer.c	/^void update_crnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer_gpu	src/crnn_layer.c	/^void update_crnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_cur_bbox_vec	include/yolo_v2_class.hpp	/^    void update_cur_bbox_vec(std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
update_deconvolutional_layer	src/deconvolutional_layer.c	/^void update_deconvolutional_layer(deconvolutional_layer l, int skip, float learning_rate, float momentum, float decay)$/;"	f
update_deconvolutional_layer_gpu	src/deconvolutional_kernels.cu	/^extern "C" void update_deconvolutional_layer_gpu(deconvolutional_layer layer, int skip, float learning_rate, float momentum, float decay)$/;"	f
update_gpu	include/darknet.h	/^    void(*update_gpu)    (struct layer, int, float, float, float, float);$/;"	m	struct:layer
update_gru_layer	src/gru_layer.c	/^void update_gru_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_gru_layer_gpu	src/gru_layer.c	/^void update_gru_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_implicit_layer	src/representation_layer.c	/^void update_implicit_layer(layer l, int batch, float learning_rate_init, float momentum, float decay)$/;"	f
update_implicit_layer_gpu	src/representation_layer.c	/^void update_implicit_layer_gpu(layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
update_layer	include/darknet.h	/^    struct layer *update_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
update_layer	src/network_kernels.cu	/^void update_layer(layer l, network net)$/;"	f
update_local_layer	src/local_layer.c	/^void update_local_layer(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer_gpu	src/local_layer.c	/^void update_local_layer_gpu(local_layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_lstm_layer	src/lstm_layer.c	/^void update_lstm_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_lstm_layer_gpu	src/lstm_layer.c	/^void update_lstm_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_network	src/network.c	/^void update_network(network net)$/;"	f
update_network_gpu	src/network_kernels.cu	/^void update_network_gpu(network net)$/;"	f
update_rnn_layer	src/rnn_layer.c	/^void update_rnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_rnn_layer_gpu	src/rnn_layer.c	/^void update_rnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_shortcut_layer	src/shortcut_layer.c	/^void update_shortcut_layer(layer l, int batch, float learning_rate_init, float momentum, float decay)$/;"	f
update_shortcut_layer_gpu	src/shortcut_layer.c	/^void update_shortcut_layer_gpu(layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
update_tracking_flow	include/yolo_v2_class.hpp	/^    void update_tracking_flow(cv::Mat new_src_mat, std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
update_tracking_flow	include/yolo_v2_class.hpp	/^    void update_tracking_flow(cv::Mat src_mat, std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
upsample_cpu	src/blas.c	/^void upsample_cpu(float *in, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
upsample_gpu	src/blas_kernels.cu	/^extern "C" void upsample_gpu(float *in, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
upsample_kernel	src/blas_kernels.cu	/^__global__ void upsample_kernel(size_t N, float *x, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
upsample_layer.c	src/upsample_layer.c	1;"	F
upsample_layer.h	src/upsample_layer.h	1;"	F
ur	include/darknet.h	/^    struct layer *ur;$/;"	m	struct:layer	typeref:struct:layer::layer
use_bin_output	include/darknet.h	/^    int use_bin_output;$/;"	m	struct:layer
use_cuda_graph	include/darknet.h	/^    int use_cuda_graph;$/;"	m	struct:network
used	src/option_list.h	/^    int used;$/;"	m	struct:__anon31
utils.c	src/utils.c	1;"	F
utils.h	src/utils.h	1;"	F
uz	include/darknet.h	/^    struct layer *uz;$/;"	m	struct:layer	typeref:struct:layer::layer
v	3rdparty/stb/include/stb_image.h	/^      int h,v;$/;"	m	struct:__anon9::__anon10
v	include/darknet.h	/^    float * v;$/;"	m	struct:layer
v1_0	src/httplib.h	/^enum class HttpVersion { v1_0 = 0, v1_1 };$/;"	m	class:httplib::HttpVersion
v_cbn_avg_gpu	include/darknet.h	/^    float * v_cbn_avg_gpu;$/;"	m	struct:layer
v_gpu	include/darknet.h	/^    float *v_gpu;$/;"	m	struct:layer
val	src/getopt.c	/^  int val; \/* its associated status value		*\/$/;"	m	struct:option	file:
val	src/list.h	/^    void *val;$/;"	m	struct:node
val	src/option_list.h	/^    char *val;$/;"	m	struct:__anon31
valid_captcha	src/captcha.c	/^void valid_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
valid_char_rnn	src/rnn.c	/^void valid_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
valid_go	src/go.c	/^void valid_go(char *cfgfile, char *weightfile, int multi)$/;"	f
valid_tactic_rnn	src/rnn.c	/^void valid_tactic_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
validate_classifier_10	src/classifier.c	/^void validate_classifier_10(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_crop	src/classifier.c	/^void validate_classifier_crop(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_full	src/classifier.c	/^void validate_classifier_full(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_multi	src/classifier.c	/^void validate_classifier_multi(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_single	src/classifier.c	/^float validate_classifier_single(char *datacfg, char *filename, char *weightfile, network *existing_net, int topk_custom)$/;"	f
validate_coco	src/coco.c	/^void validate_coco(char *cfgfile, char *weightfile)$/;"	f
validate_coco_recall	src/coco.c	/^void validate_coco_recall(char *cfgfile, char *weightfile)$/;"	f
validate_compare	src/compare.c	/^void validate_compare(char *filename, char *weightfile)$/;"	f
validate_detector	src/detector.c	/^void validate_detector(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f
validate_detector_map	src/detector.c	/^float validate_detector_map(char *datacfg, char *cfgfile, char *weightfile, float thresh_calc_avg_iou, const float iou_thresh, const int map_points, int letter_box, network *existing_net)$/;"	f
validate_detector_recall	src/detector.c	/^void validate_detector_recall(char *datacfg, char *cfgfile, char *weightfile)$/;"	f
validate_dice	src/dice.c	/^void validate_dice(char *filename, char *weightfile)$/;"	f
validate_uint32	3rdparty/stb/include/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
validate_yolo	src/yolo.c	/^void validate_yolo(char *cfgfile, char *weightfile)$/;"	f
validate_yolo_recall	src/yolo.c	/^void validate_yolo_recall(char *cfgfile, char *weightfile)$/;"	f
vals	include/darknet.h	/^    float **vals;$/;"	m	struct:matrix
vals	scripts/kmeansiou.c	/^    double **vals;$/;"	m	struct:matrix	file:
value	3rdparty/stb/include/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon12
values	3rdparty/stb/include/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon8
variance	include/darknet.h	/^    float * variance;$/;"	m	struct:layer
variance_array	src/utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	src/blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta	include/darknet.h	/^    float * variance_delta;$/;"	m	struct:layer
variance_delta_cpu	src/batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
variance_delta_gpu	include/darknet.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer
variance_delta_kernel	src/blas_kernels.cu	/^__global__ void  variance_delta_kernel(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
variance_gpu	include/darknet.h	/^    float * variance_gpu;$/;"	m	struct:layer
variance_gpu	src/blas_kernels.cu	/^extern "C" void variance_gpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_kernel	src/blas_kernels.cu	/^__global__ void variance_kernel(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
vec_char_rnn	src/rnn.c	/^void vec_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
verify_host	src/httplib.h	/^inline bool SSLClient::verify_host(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_host_with_common_name	src/httplib.h	/^inline bool SSLClient::verify_host_with_common_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_host_with_subject_alt_name	src/httplib.h	/^SSLClient::verify_host_with_subject_alt_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_result_	src/httplib.h	/^  long verify_result_ = 0;$/;"	m	class:httplib::SSLClient
version	src/httplib.h	/^  std::string version;$/;"	m	struct:httplib::Request
version	src/httplib.h	/^  std::string version;$/;"	m	struct:httplib::Response
version.h	src/version.h	1;"	F
vf	include/darknet.h	/^    struct layer *vf;$/;"	m	struct:layer	typeref:struct:layer::layer
vi	include/darknet.h	/^    struct layer *vi;$/;"	m	struct:layer	typeref:struct:layer::layer
video_capture	build/darknet/x64/darknet_video.py	/^def video_capture(frame_queue, darknet_image_queue):$/;"	f
video_capture	darknet_video.py	/^def video_capture(frame_queue, darknet_image_queue):$/;"	f
video_height	build/darknet/x64/darknet_video.py	/^    video_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))$/;"	v
video_height	darknet_video.py	/^    video_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))$/;"	v
video_width	build/darknet/x64/darknet_video.py	/^    video_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))$/;"	v
video_width	darknet_video.py	/^    video_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))$/;"	v
video_yolov3.sh	video_yolov3.sh	1;"	F
video_yolov4.sh	video_yolov4.sh	1;"	F
visualize	src/darknet.c	/^void visualize(char *cfgfile, char *weightfile)$/;"	f
visualize_convolutional_layer	src/convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	src/network.c	/^void visualize_network(network net)$/;"	f
vo	include/darknet.h	/^    struct layer *vo;$/;"	m	struct:layer	typeref:struct:layer::layer
voc_ap	build/darknet/x64/voc_eval_py3.py	/^def voc_ap(rec, prec, use_07_metric=False):$/;"	f
voc_ap	scripts/voc_eval.py	/^def voc_ap(rec, prec, use_07_metric=False):$/;"	f
voc_ap	scripts/voc_eval_py3.py	/^def voc_ap(rec, prec, use_07_metric=False):$/;"	f
voc_eval	build/darknet/x64/voc_eval_py3.py	/^def voc_eval(detpath,$/;"	f
voc_eval	scripts/voc_eval.py	/^def voc_eval(detpath,$/;"	f
voc_eval	scripts/voc_eval_py3.py	/^def voc_eval(detpath,$/;"	f
voc_eval.py	scripts/voc_eval.py	1;"	F
voc_eval_py3.py	build/darknet/x64/voc_eval_py3.py	1;"	F
voc_eval_py3.py	scripts/voc_eval_py3.py	1;"	F
voc_label.py	build/darknet/x64/data/voc/voc_label.py	1;"	F
voc_label.py	scripts/voc_label.py	1;"	F
voc_label_difficult.py	scripts/voc_label_difficult.py	1;"	F
voc_names	src/yolo.c	/^char *voc_names[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v
voxel.c	src/voxel.c	1;"	F
vs	3rdparty/stb/include/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon11
w	3rdparty/stb/include/stb_image.h	/^   int w,h;$/;"	m	struct:__anon20
w	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
w	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box
w	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box_label
w	include/darknet.h	/^    int h, w, c;$/;"	m	struct:layer
w	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
w	include/darknet.h	/^    int w, h;$/;"	m	struct:data
w	include/darknet.h	/^    int w;$/;"	m	struct:image
w	include/darknet.h	/^    int w;$/;"	m	struct:load_args
w	include/yolo_v2_class.hpp	/^    int w;                        \/\/ width$/;"	m	struct:image_t
w	include/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;       \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
w	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
w	src/detector.c	/^    float w, h;$/;"	m	struct:__anon36	file:
w	src/http_stream.cpp	/^    WSADATA w;$/;"	m	struct:_INIT_W32DATA	file:
w	src/parser.c	/^    int w;$/;"	m	struct:size_params	file:
w2	3rdparty/stb/include/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10
w_lores	3rdparty/stb/include/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon11
wait_for_stream	src/image_opencv.cpp	/^extern "C" int wait_for_stream(cap_cv *cap, cv::Mat* src, int dont_close)$/;"	f
wait_key_cv	src/image_opencv.cpp	/^extern "C" int wait_key_cv(int delay) { return 0; }$/;"	f
wait_key_cv	src/image_opencv.cpp	/^extern "C" int wait_key_cv(int delay)$/;"	f
wait_stream	include/darknet.h	/^    int wait_stream;$/;"	m	struct:network
wait_stream	include/yolo_v2_class.hpp	/^    bool wait_stream;$/;"	m	class:Detector
wait_stream	src/dark_cuda.c	/^void wait_stream(int i) {$/;"	f
wait_stream_id	include/darknet.h	/^    int wait_stream_id;$/;"	m	struct:layer
wait_until_press_key_cv	src/image_opencv.cpp	/^extern "C" int wait_until_press_key_cv() { return 0; }$/;"	f
wait_until_press_key_cv	src/image_opencv.cpp	/^extern "C" int wait_until_press_key_cv()$/;"	f
wait_until_socket_is_ready	src/httplib.h	/^inline bool wait_until_socket_is_ready(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
warnx	src/getopt.c	/^warnx(const char* fmt, ...)$/;"	f	file:
warpAllReduceSum	src/blas_kernels.cu	/^float warpAllReduceSum(float val) {$/;"	f
warpAllReduceSum	src/convolutional_kernels.cu	/^float warpAllReduceSum(float val) {$/;"	f
warpAllReduceSum	src/im2col_kernels.cu	/^int warpAllReduceSum(int val) {$/;"	f
wd	build/darknet/x64/data/voc/voc_label.py	/^wd = getcwd()$/;"	v
wd	scripts/voc_label.py	/^wd = getcwd()$/;"	v
wd	scripts/voc_label_difficult.py	/^wd = getcwd()$/;"	v
weightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t weightDesc, weightDesc16;$/;"	m	struct:layer
weightDesc	include/darknet.h	/^    void* weightDesc, *weightDesc16;$/;"	m	struct:layer
weightDesc16	include/darknet.h	/^    cudnnFilterDescriptor_t weightDesc, weightDesc16;$/;"	m	struct:layer
weightDesc16	include/darknet.h	/^    void* weightDesc, *weightDesc16;$/;"	m	struct:layer
weight_change_gpu	include/darknet.h	/^    float * weight_change_gpu;$/;"	m	struct:layer
weight_deform_gpu	include/darknet.h	/^    float * weight_deform_gpu;$/;"	m	struct:layer
weight_updates	include/darknet.h	/^    float *weight_updates;$/;"	m	struct:layer
weight_updates_gpu	include/darknet.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer
weight_updates_gpu16	include/darknet.h	/^    float * weight_updates_gpu16;$/;"	m	struct:layer
weighted_delta_cpu	src/blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_delta_gpu	src/blas_kernels.cu	/^extern "C" void weighted_delta_gpu(float *a, float *b, float *s, float *da, float *db, float *ds, int num, float *dc)$/;"	f
weighted_delta_kernel	src/blas_kernels.cu	/^__global__ void weighted_delta_kernel(int n, float *a, float *b, float *s, float *da, float *db, float *ds, float *dc)$/;"	f
weighted_sum_cpu	src/blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weighted_sum_gpu	src/blas_kernels.cu	/^extern "C" void weighted_sum_gpu(float *a, float *b, float *s, int num, float *c)$/;"	f
weighted_sum_kernel	src/blas_kernels.cu	/^__global__ void weighted_sum_kernel(int n, float *a, float *b, float *s, float *c)$/;"	f
weights	include/darknet.h	/^    float *weights;$/;"	m	struct:layer
weights_ema	include/darknet.h	/^    float *weights_ema;$/;"	m	struct:layer
weights_gpu	include/darknet.h	/^    float * weights_gpu;$/;"	m	struct:layer
weights_gpu16	include/darknet.h	/^    float * weights_gpu16;$/;"	m	struct:layer
weights_normalization	include/darknet.h	/^    WEIGHTS_NORMALIZATION_T weights_normalization;$/;"	m	struct:layer
weights_reject_freq	include/darknet.h	/^    int weights_reject_freq;$/;"	m	struct:network
weights_type	include/darknet.h	/^    WEIGHTS_TYPE_T weights_type;$/;"	m	struct:layer
wf	include/darknet.h	/^    struct layer *wf;$/;"	m	struct:layer	typeref:struct:layer::layer
wg	include/darknet.h	/^    struct layer *wg;$/;"	m	struct:layer	typeref:struct:layer::layer
wh	include/darknet.h	/^    struct layer *wh;$/;"	m	struct:layer	typeref:struct:layer::layer
what_time_is_it_now	src/utils.c	/^double what_time_is_it_now()$/;"	f
wi	include/darknet.h	/^    struct layer *wi;$/;"	m	struct:layer	typeref:struct:layer::layer
width_in_cfg_file	build/darknet/x64/gen_anchors.py	/^width_in_cfg_file = 416.$/;"	v
width_in_cfg_file	scripts/gen_anchors.py	/^width_in_cfg_file = 416.$/;"	v
winGPUdll	build/darknet/x64/darknet.py	/^    winGPUdll = os.path.join(cwd, "yolo_cpp_dll.dll")$/;"	v
winNoGPUdll	build/darknet/x64/darknet.py	/^    winNoGPUdll = os.path.join(cwd, "yolo_cpp_dll_nogpu.dll")$/;"	v
win_cifar.cmd	scripts/windows/win_cifar.cmd	1;"	F
win_get_imagenet_train_48hours.cmd	scripts/windows/win_get_imagenet_train_48hours.cmd	1;"	F
win_get_imagenet_valid.cmd	scripts/windows/win_get_imagenet_valid.cmd	1;"	F
win_get_otb_datasets.cmd	scripts/windows/win_get_otb_datasets.cmd	1;"	F
windows_imagenet_label.sh	scripts/windows/windows_imagenet_label.sh	1;"	F
windows_imagenet_train.sh	scripts/windows/windows_imagenet_train.sh	1;"	F
wo	include/darknet.h	/^    struct layer *wo;$/;"	m	struct:layer	typeref:struct:layer::layer
worker	src/httplib.h	/^    explicit worker(ThreadPool &pool) : pool_(pool) {}$/;"	f	struct:httplib::ThreadPool::worker
worker	src/httplib.h	/^  struct worker {$/;"	s	class:httplib::ThreadPool
workspace	include/darknet.h	/^    float *workspace;$/;"	m	struct:network
workspace	include/darknet.h	/^    float *workspace;$/;"	m	struct:network_state
workspace_size	include/darknet.h	/^    size_t workspace_size;$/;"	m	struct:layer
workspace_size_limit	include/darknet.h	/^    size_t workspace_size_limit;$/;"	m	struct:network
wr	include/darknet.h	/^    struct layer *wr;$/;"	m	struct:layer	typeref:struct:layer::layer
write	src/http_stream.cpp	/^    bool write(char const* outputbuf)$/;"	f	class:JSON_sender
write	src/http_stream.cpp	/^    bool write(const Mat & frame)$/;"	f	class:MJPG_sender
write	src/httplib.h	/^inline int BufferStream::write(const char *ptr) {$/;"	f	class:httplib::BufferStream
write	src/httplib.h	/^inline int BufferStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::BufferStream
write	src/httplib.h	/^inline int BufferStream::write(const std::string &s) {$/;"	f	class:httplib::BufferStream
write	src/httplib.h	/^inline int SSLSocketStream::write(const char *ptr) {$/;"	f	class:httplib::SSLSocketStream
write	src/httplib.h	/^inline int SSLSocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::SSLSocketStream
write	src/httplib.h	/^inline int SSLSocketStream::write(const std::string &s) {$/;"	f	class:httplib::SSLSocketStream
write	src/httplib.h	/^inline int SocketStream::write(const char *ptr) {$/;"	f	class:httplib::SocketStream
write	src/httplib.h	/^inline int SocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::SocketStream
write	src/httplib.h	/^inline int SocketStream::write(const std::string &s) {$/;"	f	class:httplib::SocketStream
write_all	src/utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	src/utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_anchors_to_file	build/darknet/x64/gen_anchors.py	/^def write_anchors_to_file(centroids,X,anchor_file):$/;"	f
write_anchors_to_file	scripts/gen_anchors.py	/^def write_anchors_to_file(centroids,X,anchor_file):$/;"	f
write_content	src/httplib.h	/^inline ssize_t write_content(Stream &strm,$/;"	f	namespace:httplib::detail
write_content_chunked	src/httplib.h	/^write_content_chunked(Stream &strm,$/;"	f	namespace:httplib::detail
write_content_with_provider	src/httplib.h	/^Server::write_content_with_provider(Stream &strm, const Request &req,$/;"	f	class:httplib::Server
write_cv	src/image_opencv.h	/^typedef void* write_cv;$/;"	t
write_format	src/httplib.h	/^inline int Stream::write_format(const char *fmt, const Args &... args) {$/;"	f	class:httplib::Stream
write_frame_cv	src/image_opencv.cpp	/^extern "C" void write_frame_cv(write_cv *output_video_writer, mat_cv *mat)$/;"	f
write_headers	src/httplib.h	/^inline int write_headers(Stream &strm, const T &info, const Headers &headers) {$/;"	f	namespace:httplib::detail
write_int	src/utils.c	/^void write_int(int fd, int n)$/;"	f
write_multipart_ranges_data	src/httplib.h	/^inline bool write_multipart_ranges_data(Stream &strm, const Request &req,$/;"	f	namespace:httplib::detail
write_request	src/httplib.h	/^inline void Client::write_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
write_response	src/httplib.h	/^inline bool Server::write_response(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
writing.c	src/writing.c	1;"	F
wsinit_	src/httplib.h	/^static WSInit wsinit_;$/;"	m	namespace:httplib::detail
wz	include/darknet.h	/^    struct layer *wz;$/;"	m	struct:layer	typeref:struct:layer::layer
x	3rdparty/pthreads/include/pthread.h	/^    unsigned int x;             \/* Extra information - reuse count etc *\/$/;"	m	struct:__anon22
x	3rdparty/stb/include/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10
x	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
x	include/darknet.h	/^    float * x;$/;"	m	struct:layer
x	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box
x	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box_label
x	include/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;       \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
x	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
x	src/rnn.c	/^    float *x;$/;"	m	struct:__anon33	file:
x	src/rnn_vid.c	/^    float *x;$/;"	m	struct:__anon26	file:
x	src/utils.c	/^static unsigned int x = 123456789, y = 362436069, z = 521288629;$/;"	v	file:
x_3d	build/darknet/YoloWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
x_3d	include/yolo_v2_class.hpp	/^    float x_3d, y_3d, z_3d;        \/\/ center of object (in Meters) if ZED 3D Camera is used$/;"	m	struct:bbox_t
x_3d	src/csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
x_end	src/image_opencv.cpp	/^std::atomic<int> x_end, y_end;$/;"	v
x_gpu	include/darknet.h	/^    float * x_gpu;$/;"	m	struct:layer
x_norm	include/darknet.h	/^    float * x_norm;$/;"	m	struct:layer
x_norm_gpu	include/darknet.h	/^    float * x_norm_gpu;$/;"	m	struct:layer
x_size	src/image_opencv.cpp	/^std::atomic<int> x_size, y_size;$/;"	v
x_start	src/image_opencv.cpp	/^std::atomic<int> x_start, y_start;$/;"	v
xcalloc	src/utils.h	31;"	d
xcalloc_location	src/utils.c	/^void *xcalloc_location(const size_t nmemb, const size_t size, const char * const filename, const char * const funcname, const int line) {$/;"	f
xmalloc	src/utils.h	30;"	d
xmalloc_location	src/utils.c	/^void *xmalloc_location(const size_t size, const char * const filename, const char * const funcname, const int line) {$/;"	f
xnor	include/darknet.h	/^    int xnor;$/;"	m	struct:layer
xnor	src/gemm.c	/^static inline unsigned char xnor(unsigned char a, unsigned char b) {$/;"	f	file:
xnor_avx2_popcnt	src/gemm.c	/^static inline void xnor_avx2_popcnt(__m256i a_bit256, __m256i b_bit256, __m256i *count_sum) {$/;"	f	file:
xnor_bit1	src/im2col_kernels.cu	/^__device__ __host__ static inline uint8_t xnor_bit1(uint8_t a, uint8_t b) {$/;"	f	file:
xnor_int32	src/gemm.c	/^static inline uint32_t xnor_int32(uint32_t a, uint32_t b) {$/;"	f	file:
xnor_int64	src/gemm.c	/^static inline uint64_t xnor_int64(uint64_t a, uint64_t b) {$/;"	f	file:
xor_int256	src/im2col_kernels.cu	/^__device__ __host__ static inline ulonglong4 xor_int256(ulonglong4 a, ulonglong4 b) {$/;"	f	file:
xor_int32	src/im2col_kernels.cu	/^__device__ __host__ static inline uint32_t xor_int32(uint32_t a, uint32_t b) {$/;"	f	file:
xor_int64	src/im2col_kernels.cu	/^__device__ __host__ static inline uint64_t xor_int64(uint64_t a, uint64_t b) {$/;"	f	file:
xrealloc	src/utils.h	32;"	d
xrealloc_location	src/utils.c	/^void *xrealloc_location(void *ptr, const size_t size, const char * const filename, const char * const funcname, const int line) {$/;"	f
y	3rdparty/stb/include/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10
y	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
y	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box
y	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:box_label
y	include/darknet.h	/^    matrix y;$/;"	m	struct:data
y	include/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;       \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
y	src/csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
y	src/rnn.c	/^    float *y;$/;"	m	struct:__anon33	file:
y	src/rnn_vid.c	/^    float *y;$/;"	m	struct:__anon26	file:
y	src/utils.c	/^static unsigned int x = 123456789, y = 362436069, z = 521288629;$/;"	v	file:
y_3d	build/darknet/YoloWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
y_3d	include/yolo_v2_class.hpp	/^    float x_3d, y_3d, z_3d;        \/\/ center of object (in Meters) if ZED 3D Camera is used$/;"	m	struct:bbox_t
y_3d	src/csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
y_end	src/image_opencv.cpp	/^std::atomic<int> x_end, y_end;$/;"	v
y_size	src/image_opencv.cpp	/^std::atomic<int> x_size, y_size;$/;"	v
y_start	src/image_opencv.cpp	/^std::atomic<int> x_start, y_start;$/;"	v
yolo.c	src/yolo.c	1;"	F
yolo_console_dll.cpp	src/yolo_console_dll.cpp	1;"	F
yolo_layer.c	src/yolo_layer.c	1;"	F
yolo_layer.h	src/yolo_layer.h	1;"	F
yolo_num_detections	src/yolo_layer.c	/^int yolo_num_detections(layer l, float thresh)$/;"	f
yolo_num_detections_batch	src/yolo_layer.c	/^int yolo_num_detections_batch(layer l, float thresh, int batch)$/;"	f
yolo_point	include/darknet.h	/^    YOLO_POINT yolo_point;$/;"	m	struct:layer
yolo_v2_class.cpp	src/yolo_v2_class.cpp	1;"	F
yolo_v2_class.hpp	include/yolo_v2_class.hpp	1;"	F
yoloswag420blazeit360noscope	src/dropout_layer_kernels.cu	/^__global__ void yoloswag420blazeit360noscope(float *input, int size, float *rand, float prob, float scale)$/;"	f
ypos	3rdparty/stb/include/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon11
ystep	3rdparty/stb/include/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon11
z	src/utils.c	/^static unsigned int x = 123456789, y = 362436069, z = 521288629;$/;"	v	file:
z_3d	build/darknet/YoloWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
z_3d	include/yolo_v2_class.hpp	/^    float x_3d, y_3d, z_3d;        \/\/ center of object (in Meters) if ZED 3D Camera is used$/;"	m	struct:bbox_t
z_3d	src/csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
z_cpu	include/darknet.h	/^    float *z_cpu;$/;"	m	struct:layer
z_distance	3rdparty/stb/include/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon13
z_expandable	3rdparty/stb/include/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon13
z_gpu	include/darknet.h	/^    float *z_gpu;$/;"	m	struct:layer
z_length	3rdparty/stb/include/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon13
zbuffer	3rdparty/stb/include/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13
zbuffer_end	3rdparty/stb/include/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13
zed	src/yolo_console_dll.cpp	/^static sl::Camera zed; \/\/ ZED-camera$/;"	v	file:
zed_capture_3d	src/yolo_console_dll.cpp	/^cv::Mat zed_capture_3d(sl::Camera &zed) {$/;"	f
zed_capture_rgb	src/yolo_console_dll.cpp	/^cv::Mat zed_capture_rgb(sl::Camera &zed) {$/;"	f
zero_matrix	scripts/kmeansiou.c	/^void zero_matrix(matrix m)$/;"	f
zero_objectness	src/region_layer.c	/^void zero_objectness(layer l)$/;"	f
zout	3rdparty/stb/include/stb_image.h	/^   char *zout;$/;"	m	struct:__anon13
zout_end	3rdparty/stb/include/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon13
zout_start	3rdparty/stb/include/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon13
~Client	src/httplib.h	/^inline Client::~Client() {}$/;"	f	class:httplib::Client
~Detector	src/yolo_v2_class.cpp	/^LIB_API Detector::~Detector()$/;"	f	class:Detector
~JSON_sender	src/http_stream.cpp	/^    ~JSON_sender()$/;"	f	class:JSON_sender
~MJPG_sender	src/http_stream.cpp	/^    ~MJPG_sender()$/;"	f	class:MJPG_sender
~NoThread	src/httplib.h	/^  virtual ~NoThread() {}$/;"	f	class:httplib::NoThread
~PThreadCleanup	3rdparty/pthreads/include/pthread.h	/^          ~PThreadCleanup()$/;"	f	class:PThreadCleanup
~Response	src/httplib.h	/^  ~Response() {$/;"	f	struct:httplib::Response
~SSLClient	src/httplib.h	/^inline SSLClient::~SSLClient() {$/;"	f	class:httplib::SSLClient
~SSLInit	src/httplib.h	/^  ~SSLInit() {$/;"	f	class:httplib::detail::SSLInit
~SSLServer	src/httplib.h	/^inline SSLServer::~SSLServer() {$/;"	f	class:httplib::SSLServer
~SSLSocketStream	src/httplib.h	/^inline SSLSocketStream::~SSLSocketStream() {}$/;"	f	class:httplib::SSLSocketStream
~SSLThreadLocks	src/httplib.h	/^  ~SSLThreadLocks() { CRYPTO_set_locking_callback(nullptr); }$/;"	f	class:httplib::detail::SSLThreadLocks
~Server	src/httplib.h	/^inline Server::~Server() {}$/;"	f	class:httplib::Server
~SocketStream	src/httplib.h	/^inline SocketStream::~SocketStream() {}$/;"	f	class:httplib::SocketStream
~Threads	src/httplib.h	/^  virtual ~Threads() {}$/;"	f	class:httplib::Threads
~WSInit	src/httplib.h	/^  ~WSInit() { WSACleanup(); }$/;"	f	class:httplib::detail::WSInit
~decompressor	src/httplib.h	/^  ~decompressor() { inflateEnd(&strm); }$/;"	f	class:httplib::detail::decompressor
~detection_t	src/http_stream.cpp	/^    ~detection_t() {$/;"	f	struct:detection_t
